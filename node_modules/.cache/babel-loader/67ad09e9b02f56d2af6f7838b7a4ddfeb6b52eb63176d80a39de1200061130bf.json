{"ast":null,"code":"// import { StreamingTrack } from '../types/track';\nclass UsageTrackingService{constructor(){this.storageKey='stream_soundboard_usage';this.usageData=new Map();this.loadUsageData();}loadUsageData(){try{const stored=localStorage.getItem(this.storageKey);if(stored){const data=JSON.parse(stored);this.usageData=new Map(Object.entries(data));// Convert date strings back to Date objects\nthis.usageData.forEach(usage=>{if(usage.lastUsed){usage.lastUsed=new Date(usage.lastUsed);}});}}catch(error){console.warn('Failed to load usage data:',error);}}saveUsageData(){try{const data=Object.fromEntries(this.usageData);localStorage.setItem(this.storageKey,JSON.stringify(data));}catch(error){console.warn('Failed to save usage data:',error);}}trackUsage(trackId,agencyId,streamerId){const existing=this.usageData.get(trackId);if(existing){existing.usageCount+=1;existing.lastUsed=new Date();if(agencyId)existing.agencyId=agencyId;if(streamerId)existing.streamerId=streamerId;}else{this.usageData.set(trackId,{trackId,usageCount:1,lastUsed:new Date(),agencyId,streamerId,favorite:false});}this.saveUsageData();}getTrackUsage(trackId){return this.usageData.get(trackId);}getAllUsage(){return Array.from(this.usageData.values());}getMostPopularTracks(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;return Array.from(this.usageData.values()).sort((a,b)=>b.usageCount-a.usageCount).slice(0,limit);}getRecentlyUsedTracks(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;return Array.from(this.usageData.values()).filter(usage=>usage.lastUsed).sort((a,b)=>new Date(b.lastUsed).getTime()-new Date(a.lastUsed).getTime()).slice(0,limit);}toggleFavorite(trackId){const usage=this.usageData.get(trackId);if(usage){usage.favorite=!usage.favorite;this.saveUsageData();}}getFavoriteTracks(){return Array.from(this.usageData.values()).filter(usage=>usage.favorite).sort((a,b)=>b.usageCount-a.usageCount);}getAgencyStats(agencyId){const agencyTracks=Array.from(this.usageData.values()).filter(usage=>usage.agencyId===agencyId);if(agencyTracks.length===0){return{totalTracks:0,totalUsage:0,averageUsagePerTrack:0};}const totalUsage=agencyTracks.reduce((sum,track)=>sum+track.usageCount,0);const mostUsedTrack=agencyTracks.reduce((max,track)=>track.usageCount>max.usageCount?track:max);return{totalTracks:agencyTracks.length,totalUsage,mostUsedTrack,averageUsagePerTrack:totalUsage/agencyTracks.length};}clearUsageData(){this.usageData.clear();localStorage.removeItem(this.storageKey);}}// Export as singleton\nexport const usageTrackingService=new UsageTrackingService();","map":{"version":3,"names":["UsageTrackingService","constructor","storageKey","usageData","Map","loadUsageData","stored","localStorage","getItem","data","JSON","parse","Object","entries","forEach","usage","lastUsed","Date","error","console","warn","saveUsageData","fromEntries","setItem","stringify","trackUsage","trackId","agencyId","streamerId","existing","get","usageCount","set","favorite","getTrackUsage","getAllUsage","Array","from","values","getMostPopularTracks","limit","arguments","length","undefined","sort","a","b","slice","getRecentlyUsedTracks","filter","getTime","toggleFavorite","getFavoriteTracks","getAgencyStats","agencyTracks","totalTracks","totalUsage","averageUsagePerTrack","reduce","sum","track","mostUsedTrack","max","clearUsageData","clear","removeItem","usageTrackingService"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/services/usageTrackingService.ts"],"sourcesContent":["// import { StreamingTrack } from '../types/track';\n\nexport interface TrackUsage {\n  trackId: string;\n  usageCount: number;\n  lastUsed: Date;\n  agencyId?: string;\n  streamerId?: string;\n  favorite: boolean;\n}\n\nclass UsageTrackingService {\n  private storageKey = 'stream_soundboard_usage';\n  private usageData: Map<string, TrackUsage> = new Map();\n\n  constructor() {\n    this.loadUsageData();\n  }\n\n  private loadUsageData(): void {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      if (stored) {\n        const data = JSON.parse(stored);\n        this.usageData = new Map(Object.entries(data));\n        \n        // Convert date strings back to Date objects\n        this.usageData.forEach(usage => {\n          if (usage.lastUsed) {\n            usage.lastUsed = new Date(usage.lastUsed);\n          }\n        });\n      }\n    } catch (error) {\n      console.warn('Failed to load usage data:', error);\n    }\n  }\n\n  private saveUsageData(): void {\n    try {\n      const data = Object.fromEntries(this.usageData);\n      localStorage.setItem(this.storageKey, JSON.stringify(data));\n    } catch (error) {\n      console.warn('Failed to save usage data:', error);\n    }\n  }\n\n  trackUsage(trackId: string, agencyId?: string, streamerId?: string): void {\n    const existing = this.usageData.get(trackId);\n    \n    if (existing) {\n      existing.usageCount += 1;\n      existing.lastUsed = new Date();\n      if (agencyId) existing.agencyId = agencyId;\n      if (streamerId) existing.streamerId = streamerId;\n    } else {\n      this.usageData.set(trackId, {\n        trackId,\n        usageCount: 1,\n        lastUsed: new Date(),\n        agencyId,\n        streamerId,\n        favorite: false\n      });\n    }\n    \n    this.saveUsageData();\n  }\n\n  getTrackUsage(trackId: string): TrackUsage | undefined {\n    return this.usageData.get(trackId);\n  }\n\n  getAllUsage(): TrackUsage[] {\n    return Array.from(this.usageData.values());\n  }\n\n  getMostPopularTracks(limit: number = 10): TrackUsage[] {\n    return Array.from(this.usageData.values())\n      .sort((a, b) => b.usageCount - a.usageCount)\n      .slice(0, limit);\n  }\n\n  getRecentlyUsedTracks(limit: number = 10): TrackUsage[] {\n    return Array.from(this.usageData.values())\n      .filter(usage => usage.lastUsed)\n      .sort((a, b) => new Date(b.lastUsed!).getTime() - new Date(a.lastUsed!).getTime())\n      .slice(0, limit);\n  }\n\n  toggleFavorite(trackId: string): void {\n    const usage = this.usageData.get(trackId);\n    if (usage) {\n      usage.favorite = !usage.favorite;\n      this.saveUsageData();\n    }\n  }\n\n  getFavoriteTracks(): TrackUsage[] {\n    return Array.from(this.usageData.values())\n      .filter(usage => usage.favorite)\n      .sort((a, b) => b.usageCount - a.usageCount);\n  }\n\n  getAgencyStats(agencyId: string): {\n    totalTracks: number;\n    totalUsage: number;\n    mostUsedTrack?: TrackUsage;\n    averageUsagePerTrack: number;\n  } {\n    const agencyTracks = Array.from(this.usageData.values())\n      .filter(usage => usage.agencyId === agencyId);\n    \n    if (agencyTracks.length === 0) {\n      return {\n        totalTracks: 0,\n        totalUsage: 0,\n        averageUsagePerTrack: 0\n      };\n    }\n\n    const totalUsage = agencyTracks.reduce((sum, track) => sum + track.usageCount, 0);\n    const mostUsedTrack = agencyTracks.reduce((max, track) => \n      track.usageCount > max.usageCount ? track : max\n    );\n\n    return {\n      totalTracks: agencyTracks.length,\n      totalUsage,\n      mostUsedTrack,\n      averageUsagePerTrack: totalUsage / agencyTracks.length\n    };\n  }\n\n  clearUsageData(): void {\n    this.usageData.clear();\n    localStorage.removeItem(this.storageKey);\n  }\n}\n\n// Export as singleton\nexport const usageTrackingService = new UsageTrackingService();\n\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
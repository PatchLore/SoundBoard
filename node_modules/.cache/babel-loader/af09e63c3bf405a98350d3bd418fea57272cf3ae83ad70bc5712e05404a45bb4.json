{"ast":null,"code":"import { STREAMING_CATEGORIES, updateCategoryTrackCount, getTotalTrackCount } from '../data/categories';\n\n// Sample tracks data - in production this would come from a database\nconst SAMPLE_TRACKS = [{\n  id: '1',\n  title: 'Epic Boss Battle',\n  artist: 'Epic Orchestral',\n  duration: 165,\n  // 2:45\n  audioUrl: '/tracks/boss-battle/epic-orchestral-battle-01.mp3',\n  coverUrl: '/covers/boss-battle-01.jpg',\n  category: 'boss-battle',\n  subcategory: 'orchestral',\n  mood: 'epic',\n  energy: 5,\n  bpm: 140,\n  key: 'C minor',\n  tags: ['epic', 'orchestral', 'battle', 'intense'],\n  description: 'Epic orchestral music for challenging boss battles',\n  streamSafe: true,\n  loopFriendly: true,\n  hasIntro: true,\n  hasOutro: true,\n  dmcaSafe: true,\n  uploadDate: '2024-01-15',\n  uploadedBy: 'admin',\n  approved: true,\n  featured: true\n}, {\n  id: '2',\n  title: 'Chill Lo-Fi Background',\n  artist: 'Lo-Fi Vibes',\n  duration: 260,\n  // 4:20\n  audioUrl: '/tracks/chill-gaming/lo-fi-background-01.mp3',\n  coverUrl: '/covers/chill-gaming-01.jpg',\n  category: 'chill-gaming',\n  subcategory: 'lo-fi',\n  mood: 'chill',\n  energy: 2,\n  bpm: 85,\n  key: 'F major',\n  tags: ['chill', 'lo-fi', 'relaxed', 'background'],\n  description: 'Relaxing lo-fi music for casual gaming sessions',\n  streamSafe: true,\n  loopFriendly: true,\n  hasIntro: false,\n  hasOutro: false,\n  dmcaSafe: true,\n  uploadDate: '2024-01-14',\n  uploadedBy: 'admin',\n  approved: true,\n  featured: false\n}, {\n  id: '3',\n  title: 'Victory Fanfare',\n  artist: 'Triumph Sounds',\n  duration: 45,\n  // 0:45\n  audioUrl: '/tracks/intro-outro/victory-fanfare-01.mp3',\n  coverUrl: '/covers/victory-01.jpg',\n  category: 'intro-outro',\n  subcategory: 'victory',\n  mood: 'uplifting',\n  energy: 4,\n  bpm: 120,\n  key: 'D major',\n  tags: ['victory', 'celebration', 'fanfare', 'short'],\n  description: 'Short victory fanfare for successful moments',\n  streamSafe: true,\n  loopFriendly: false,\n  hasIntro: false,\n  hasOutro: false,\n  dmcaSafe: true,\n  uploadDate: '2024-01-13',\n  uploadedBy: 'admin',\n  approved: true,\n  featured: true\n}];\nclass TrackManagementService {\n  constructor() {\n    this.tracks = [...SAMPLE_TRACKS];\n    this.categories = [...STREAMING_CATEGORIES];\n    this.updateCategoryTrackCounts();\n  }\n\n  // Get all tracks\n  async getAllTracks() {\n    return [...this.tracks];\n  }\n\n  // Get tracks by category\n  async getTracksByCategory(categoryId) {\n    return this.tracks.filter(track => track.category === categoryId);\n  }\n\n  // Get featured tracks\n  async getFeaturedTracks() {\n    return this.tracks.filter(track => track.featured);\n  }\n\n  // Get tracks by energy level\n  async getTracksByEnergy(energy) {\n    return this.tracks.filter(track => track.energy === energy);\n  }\n\n  // Get tracks by mood\n  async getTracksByMood(mood) {\n    return this.tracks.filter(track => track.mood === mood);\n  }\n\n  // Search tracks\n  async searchTracks(query) {\n    const lowerQuery = query.toLowerCase();\n    return this.tracks.filter(track => {\n      var _track$description;\n      return track.title.toLowerCase().includes(lowerQuery) || track.artist.toLowerCase().includes(lowerQuery) || track.tags.some(tag => tag.toLowerCase().includes(lowerQuery)) || ((_track$description = track.description) === null || _track$description === void 0 ? void 0 : _track$description.toLowerCase().includes(lowerQuery));\n    });\n  }\n\n  // Filter tracks\n  async filterTracks(filters) {\n    let filtered = [...this.tracks];\n    if (filters.category) {\n      filtered = filtered.filter(track => track.category === filters.category);\n    }\n    if (filters.mood && filters.mood.length > 0) {\n      filtered = filtered.filter(track => filters.mood.includes(track.mood));\n    }\n    if (filters.energy && filters.energy.length > 0) {\n      filtered = filtered.filter(track => filters.energy.includes(track.energy));\n    }\n    if (filters.duration) {\n      filtered = filtered.filter(track => track.duration >= filters.duration.min && track.duration <= filters.duration.max);\n    }\n    if (filters.bpm) {\n      filtered = filtered.filter(track => track.bpm && track.bpm >= filters.bpm.min && track.bpm <= filters.bpm.max);\n    }\n    if (filters.loopFriendly !== undefined) {\n      filtered = filtered.filter(track => track.loopFriendly === filters.loopFriendly);\n    }\n    if (filters.tags && filters.tags.length > 0) {\n      filtered = filtered.filter(track => track.tags.some(tag => filters.tags.includes(tag)));\n    }\n    if (filters.featured !== undefined) {\n      filtered = filtered.filter(track => track.featured === filters.featured);\n    }\n    return filtered;\n  }\n\n  // Upload new track\n  async uploadTrack(trackData, audioFile) {\n    var _trackData$streamSafe, _trackData$loopFriend, _trackData$hasIntro, _trackData$hasOutro, _trackData$dmcaSafe, _trackData$approved, _trackData$featured;\n    const newTrack = {\n      id: `track_${Date.now()}`,\n      title: trackData.title || 'Untitled Track',\n      artist: trackData.artist || 'Unknown Artist',\n      duration: trackData.duration || 0,\n      audioUrl: URL.createObjectURL(audioFile),\n      // In production, upload to server\n      coverUrl: trackData.coverUrl,\n      category: trackData.category || 'chill-gaming',\n      subcategory: trackData.subcategory || 'general',\n      mood: trackData.mood || 'chill',\n      energy: trackData.energy || 3,\n      bpm: trackData.bpm,\n      key: trackData.key,\n      tags: trackData.tags || [],\n      description: trackData.description,\n      streamSafe: (_trackData$streamSafe = trackData.streamSafe) !== null && _trackData$streamSafe !== void 0 ? _trackData$streamSafe : true,\n      loopFriendly: (_trackData$loopFriend = trackData.loopFriendly) !== null && _trackData$loopFriend !== void 0 ? _trackData$loopFriend : false,\n      hasIntro: (_trackData$hasIntro = trackData.hasIntro) !== null && _trackData$hasIntro !== void 0 ? _trackData$hasIntro : false,\n      hasOutro: (_trackData$hasOutro = trackData.hasOutro) !== null && _trackData$hasOutro !== void 0 ? _trackData$hasOutro : false,\n      dmcaSafe: (_trackData$dmcaSafe = trackData.dmcaSafe) !== null && _trackData$dmcaSafe !== void 0 ? _trackData$dmcaSafe : true,\n      uploadDate: new Date().toISOString().split('T')[0],\n      uploadedBy: trackData.uploadedBy || 'admin',\n      approved: (_trackData$approved = trackData.approved) !== null && _trackData$approved !== void 0 ? _trackData$approved : true,\n      featured: (_trackData$featured = trackData.featured) !== null && _trackData$featured !== void 0 ? _trackData$featured : false\n    };\n    this.tracks.push(newTrack);\n    this.updateCategoryTrackCounts();\n    return newTrack;\n  }\n\n  // Update track\n  async updateTrack(trackId, updates) {\n    const trackIndex = this.tracks.findIndex(track => track.id === trackId);\n    if (trackIndex === -1) return null;\n    this.tracks[trackIndex] = {\n      ...this.tracks[trackIndex],\n      ...updates\n    };\n    this.updateCategoryTrackCounts();\n    return this.tracks[trackIndex];\n  }\n\n  // Delete track\n  async deleteTrack(trackId) {\n    const trackIndex = this.tracks.findIndex(track => track.id === trackId);\n    if (trackIndex === -1) return false;\n    this.tracks.splice(trackIndex, 1);\n    this.updateCategoryTrackCounts();\n    return true;\n  }\n\n  // Bulk upload tracks\n  async bulkUploadTracks(files) {\n    const uploadedTracks = [];\n    for (const file of files) {\n      if (file.type.includes('audio/')) {\n        const trackData = {\n          title: file.name.replace(/\\.[^/.]+$/, ''),\n          // Remove file extension\n          artist: 'Unknown Artist',\n          duration: 0,\n          // Would need to extract from audio file\n          category: 'chill-gaming',\n          // Default category\n          subcategory: 'general',\n          mood: 'chill',\n          energy: 3,\n          tags: [],\n          description: `Auto-uploaded track: ${file.name}`,\n          streamSafe: true,\n          loopFriendly: false,\n          hasIntro: false,\n          hasOutro: false,\n          dmcaSafe: true,\n          uploadedBy: 'admin',\n          approved: false,\n          // Require approval for bulk uploads\n          featured: false\n        };\n        const track = await this.uploadTrack(trackData, file);\n        uploadedTracks.push(track);\n      }\n    }\n    return uploadedTracks;\n  }\n\n  // Get categories with track counts\n  async getCategories() {\n    return [...this.categories];\n  }\n\n  // Get smart playlists\n  async getSmartPlaylists() {\n    return {\n      'Gaming Essentials': this.tracks.filter(track => ['boss-battle', 'gaming-action', 'chill-gaming'].includes(track.category)),\n      'Stream Workflow': this.tracks.filter(track => ['stream-starting', 'break-brb', 'intro-outro'].includes(track.category)),\n      'High Energy': this.tracks.filter(track => track.energy >= 4),\n      'Chill Vibes': this.tracks.filter(track => track.energy <= 2),\n      'Featured Tracks': this.tracks.filter(track => track.featured),\n      'Recently Added': this.tracks.sort((a, b) => new Date(b.uploadDate).getTime() - new Date(a.uploadDate).getTime()).slice(0, 20)\n    };\n  }\n\n  // Update category track counts\n  updateCategoryTrackCounts() {\n    this.categories.forEach(category => {\n      const count = this.tracks.filter(track => track.category === category.id).length;\n      updateCategoryTrackCount(category.id, count);\n    });\n  }\n\n  // Get total track count\n  async getTotalTrackCount() {\n    return getTotalTrackCount();\n  }\n\n  // Get tracks by upload date\n  async getTracksByDateRange(startDate, endDate) {\n    return this.tracks.filter(track => track.uploadDate >= startDate && track.uploadDate <= endDate);\n  }\n\n  // Get tracks by uploader\n  async getTracksByUploader(uploader) {\n    return this.tracks.filter(track => track.uploadedBy === uploader);\n  }\n\n  // Approve track\n  async approveTrack(trackId) {\n    const track = await this.updateTrack(trackId, {\n      approved: true\n    });\n    return track !== null;\n  }\n\n  // Feature track\n  async featureTrack(trackId) {\n    const track = await this.updateTrack(trackId, {\n      featured: true\n    });\n    return track !== null;\n  }\n}\nexport default new TrackManagementService();","map":{"version":3,"names":["STREAMING_CATEGORIES","updateCategoryTrackCount","getTotalTrackCount","SAMPLE_TRACKS","id","title","artist","duration","audioUrl","coverUrl","category","subcategory","mood","energy","bpm","key","tags","description","streamSafe","loopFriendly","hasIntro","hasOutro","dmcaSafe","uploadDate","uploadedBy","approved","featured","TrackManagementService","constructor","tracks","categories","updateCategoryTrackCounts","getAllTracks","getTracksByCategory","categoryId","filter","track","getFeaturedTracks","getTracksByEnergy","getTracksByMood","searchTracks","query","lowerQuery","toLowerCase","_track$description","includes","some","tag","filterTracks","filters","filtered","length","min","max","undefined","uploadTrack","trackData","audioFile","_trackData$streamSafe","_trackData$loopFriend","_trackData$hasIntro","_trackData$hasOutro","_trackData$dmcaSafe","_trackData$approved","_trackData$featured","newTrack","Date","now","URL","createObjectURL","toISOString","split","push","updateTrack","trackId","updates","trackIndex","findIndex","deleteTrack","splice","bulkUploadTracks","files","uploadedTracks","file","type","name","replace","getCategories","getSmartPlaylists","sort","a","b","getTime","slice","forEach","count","getTracksByDateRange","startDate","endDate","getTracksByUploader","uploader","approveTrack","featureTrack"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/services/trackManagementService.ts"],"sourcesContent":["import { Track, Category } from '../types/track';\nimport { STREAMING_CATEGORIES, updateCategoryTrackCount, getTotalTrackCount } from '../data/categories';\n\n// Sample tracks data - in production this would come from a database\nconst SAMPLE_TRACKS: Track[] = [\n  {\n    id: '1',\n    title: 'Epic Boss Battle',\n    artist: 'Epic Orchestral',\n    duration: 165, // 2:45\n    audioUrl: '/tracks/boss-battle/epic-orchestral-battle-01.mp3',\n    coverUrl: '/covers/boss-battle-01.jpg',\n    category: 'boss-battle',\n    subcategory: 'orchestral',\n    mood: 'epic',\n    energy: 5,\n    bpm: 140,\n    key: 'C minor',\n    tags: ['epic', 'orchestral', 'battle', 'intense'],\n    description: 'Epic orchestral music for challenging boss battles',\n    streamSafe: true,\n    loopFriendly: true,\n    hasIntro: true,\n    hasOutro: true,\n    dmcaSafe: true,\n    uploadDate: '2024-01-15',\n    uploadedBy: 'admin',\n    approved: true,\n    featured: true\n  },\n  {\n    id: '2',\n    title: 'Chill Lo-Fi Background',\n    artist: 'Lo-Fi Vibes',\n    duration: 260, // 4:20\n    audioUrl: '/tracks/chill-gaming/lo-fi-background-01.mp3',\n    coverUrl: '/covers/chill-gaming-01.jpg',\n    category: 'chill-gaming',\n    subcategory: 'lo-fi',\n    mood: 'chill',\n    energy: 2,\n    bpm: 85,\n    key: 'F major',\n    tags: ['chill', 'lo-fi', 'relaxed', 'background'],\n    description: 'Relaxing lo-fi music for casual gaming sessions',\n    streamSafe: true,\n    loopFriendly: true,\n    hasIntro: false,\n    hasOutro: false,\n    dmcaSafe: true,\n    uploadDate: '2024-01-14',\n    uploadedBy: 'admin',\n    approved: true,\n    featured: false\n  },\n  {\n    id: '3',\n    title: 'Victory Fanfare',\n    artist: 'Triumph Sounds',\n    duration: 45, // 0:45\n    audioUrl: '/tracks/intro-outro/victory-fanfare-01.mp3',\n    coverUrl: '/covers/victory-01.jpg',\n    category: 'intro-outro',\n    subcategory: 'victory',\n    mood: 'uplifting',\n    energy: 4,\n    bpm: 120,\n    key: 'D major',\n    tags: ['victory', 'celebration', 'fanfare', 'short'],\n    description: 'Short victory fanfare for successful moments',\n    streamSafe: true,\n    loopFriendly: false,\n    hasIntro: false,\n    hasOutro: false,\n    dmcaSafe: true,\n    uploadDate: '2024-01-13',\n    uploadedBy: 'admin',\n    approved: true,\n    featured: true\n  }\n];\n\nclass TrackManagementService {\n  private tracks: Track[] = [...SAMPLE_TRACKS];\n  private categories: Category[] = [...STREAMING_CATEGORIES];\n\n  constructor() {\n    this.updateCategoryTrackCounts();\n  }\n\n  // Get all tracks\n  async getAllTracks(): Promise<Track[]> {\n    return [...this.tracks];\n  }\n\n  // Get tracks by category\n  async getTracksByCategory(categoryId: string): Promise<Track[]> {\n    return this.tracks.filter(track => track.category === categoryId);\n  }\n\n  // Get featured tracks\n  async getFeaturedTracks(): Promise<Track[]> {\n    return this.tracks.filter(track => track.featured);\n  }\n\n  // Get tracks by energy level\n  async getTracksByEnergy(energy: number): Promise<Track[]> {\n    return this.tracks.filter(track => track.energy === energy);\n  }\n\n  // Get tracks by mood\n  async getTracksByMood(mood: string): Promise<Track[]> {\n    return this.tracks.filter(track => track.mood === mood);\n  }\n\n  // Search tracks\n  async searchTracks(query: string): Promise<Track[]> {\n    const lowerQuery = query.toLowerCase();\n    return this.tracks.filter(track => \n      track.title.toLowerCase().includes(lowerQuery) ||\n      track.artist.toLowerCase().includes(lowerQuery) ||\n      track.tags.some(tag => tag.toLowerCase().includes(lowerQuery)) ||\n      track.description?.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  // Filter tracks\n  async filterTracks(filters: {\n    category?: string;\n    mood?: string[];\n    energy?: number[];\n    duration?: { min: number; max: number };\n    bpm?: { min: number; max: number };\n    loopFriendly?: boolean;\n    tags?: string[];\n    featured?: boolean;\n  }): Promise<Track[]> {\n    let filtered = [...this.tracks];\n\n    if (filters.category) {\n      filtered = filtered.filter(track => track.category === filters.category);\n    }\n\n    if (filters.mood && filters.mood.length > 0) {\n      filtered = filtered.filter(track => filters.mood!.includes(track.mood));\n    }\n\n    if (filters.energy && filters.energy.length > 0) {\n      filtered = filtered.filter(track => filters.energy!.includes(track.energy));\n    }\n\n    if (filters.duration) {\n      filtered = filtered.filter(track => \n        track.duration >= filters.duration!.min && \n        track.duration <= filters.duration!.max\n      );\n    }\n\n    if (filters.bpm) {\n      filtered = filtered.filter(track => \n        track.bpm && \n        track.bpm >= filters.bpm!.min && \n        track.bpm <= filters.bpm!.max\n      );\n    }\n\n    if (filters.loopFriendly !== undefined) {\n      filtered = filtered.filter(track => track.loopFriendly === filters.loopFriendly);\n    }\n\n    if (filters.tags && filters.tags.length > 0) {\n      filtered = filtered.filter(track => \n        track.tags.some(tag => filters.tags!.includes(tag))\n      );\n    }\n\n    if (filters.featured !== undefined) {\n      filtered = filtered.filter(track => track.featured === filters.featured);\n    }\n\n    return filtered;\n  }\n\n  // Upload new track\n  async uploadTrack(trackData: Partial<Track>, audioFile: File): Promise<Track> {\n    const newTrack: Track = {\n      id: `track_${Date.now()}`,\n      title: trackData.title || 'Untitled Track',\n      artist: trackData.artist || 'Unknown Artist',\n      duration: trackData.duration || 0,\n      audioUrl: URL.createObjectURL(audioFile), // In production, upload to server\n      coverUrl: trackData.coverUrl,\n      category: trackData.category || 'chill-gaming',\n      subcategory: trackData.subcategory || 'general',\n      mood: trackData.mood || 'chill',\n      energy: trackData.energy || 3,\n      bpm: trackData.bpm,\n      key: trackData.key,\n      tags: trackData.tags || [],\n      description: trackData.description,\n      streamSafe: trackData.streamSafe ?? true,\n      loopFriendly: trackData.loopFriendly ?? false,\n      hasIntro: trackData.hasIntro ?? false,\n      hasOutro: trackData.hasOutro ?? false,\n      dmcaSafe: trackData.dmcaSafe ?? true,\n      uploadDate: new Date().toISOString().split('T')[0],\n      uploadedBy: trackData.uploadedBy || 'admin',\n      approved: trackData.approved ?? true,\n      featured: trackData.featured ?? false\n    };\n\n    this.tracks.push(newTrack);\n    this.updateCategoryTrackCounts();\n    \n    return newTrack;\n  }\n\n  // Update track\n  async updateTrack(trackId: string, updates: Partial<Track>): Promise<Track | null> {\n    const trackIndex = this.tracks.findIndex(track => track.id === trackId);\n    if (trackIndex === -1) return null;\n\n    this.tracks[trackIndex] = { ...this.tracks[trackIndex], ...updates };\n    this.updateCategoryTrackCounts();\n    \n    return this.tracks[trackIndex];\n  }\n\n  // Delete track\n  async deleteTrack(trackId: string): Promise<boolean> {\n    const trackIndex = this.tracks.findIndex(track => track.id === trackId);\n    if (trackIndex === -1) return false;\n\n    this.tracks.splice(trackIndex, 1);\n    this.updateCategoryTrackCounts();\n    \n    return true;\n  }\n\n  // Bulk upload tracks\n  async bulkUploadTracks(files: File[]): Promise<Track[]> {\n    const uploadedTracks: Track[] = [];\n    \n    for (const file of files) {\n      if (file.type.includes('audio/')) {\n        const trackData: Partial<Track> = {\n          title: file.name.replace(/\\.[^/.]+$/, ''), // Remove file extension\n          artist: 'Unknown Artist',\n          duration: 0, // Would need to extract from audio file\n          category: 'chill-gaming', // Default category\n          subcategory: 'general',\n          mood: 'chill',\n          energy: 3,\n          tags: [],\n          description: `Auto-uploaded track: ${file.name}`,\n          streamSafe: true,\n          loopFriendly: false,\n          hasIntro: false,\n          hasOutro: false,\n          dmcaSafe: true,\n          uploadedBy: 'admin',\n          approved: false, // Require approval for bulk uploads\n          featured: false\n        };\n\n        const track = await this.uploadTrack(trackData, file);\n        uploadedTracks.push(track);\n      }\n    }\n\n    return uploadedTracks;\n  }\n\n  // Get categories with track counts\n  async getCategories(): Promise<Category[]> {\n    return [...this.categories];\n  }\n\n  // Get smart playlists\n  async getSmartPlaylists(): Promise<{ [key: string]: Track[] }> {\n    return {\n      'Gaming Essentials': this.tracks.filter(track => \n        ['boss-battle', 'gaming-action', 'chill-gaming'].includes(track.category)\n      ),\n      'Stream Workflow': this.tracks.filter(track => \n        ['stream-starting', 'break-brb', 'intro-outro'].includes(track.category)\n      ),\n      'High Energy': this.tracks.filter(track => track.energy >= 4),\n      'Chill Vibes': this.tracks.filter(track => track.energy <= 2),\n      'Featured Tracks': this.tracks.filter(track => track.featured),\n      'Recently Added': this.tracks\n        .sort((a, b) => new Date(b.uploadDate).getTime() - new Date(a.uploadDate).getTime())\n        .slice(0, 20)\n    };\n  }\n\n  // Update category track counts\n  private updateCategoryTrackCounts(): void {\n    this.categories.forEach(category => {\n      const count = this.tracks.filter(track => track.category === category.id).length;\n      updateCategoryTrackCount(category.id, count);\n    });\n  }\n\n  // Get total track count\n  async getTotalTrackCount(): Promise<number> {\n    return getTotalTrackCount();\n  }\n\n  // Get tracks by upload date\n  async getTracksByDateRange(startDate: string, endDate: string): Promise<Track[]> {\n    return this.tracks.filter(track => \n      track.uploadDate >= startDate && track.uploadDate <= endDate\n    );\n  }\n\n  // Get tracks by uploader\n  async getTracksByUploader(uploader: string): Promise<Track[]> {\n    return this.tracks.filter(track => track.uploadedBy === uploader);\n  }\n\n  // Approve track\n  async approveTrack(trackId: string): Promise<boolean> {\n    const track = await this.updateTrack(trackId, { approved: true });\n    return track !== null;\n  }\n\n  // Feature track\n  async featureTrack(trackId: string): Promise<boolean> {\n    const track = await this.updateTrack(trackId, { featured: true });\n    return track !== null;\n  }\n}\n\nexport default new TrackManagementService();\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
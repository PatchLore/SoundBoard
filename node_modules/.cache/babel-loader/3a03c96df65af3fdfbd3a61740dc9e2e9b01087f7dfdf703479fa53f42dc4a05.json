{"ast":null,"code":"import { audioController } from './audioController';\nimport { obsIntegration } from './obsIntegration';\nimport { discordBot } from './discordBot';\nimport { twitchIntegration } from './twitchIntegration';\nclass APIEndpoints {\n  constructor() {\n    this.endpoints = new Map();\n    this.isRunning = false;\n    this.server = null;\n    this.setupEndpoints();\n  }\n  setupEndpoints() {\n    // Audio Control Endpoints\n    this.addEndpoint({\n      path: '/api/audio/play',\n      method: 'POST',\n      description: 'Play a track',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const {\n            trackId,\n            crossfade,\n            volume\n          } = req.body;\n          if (!trackId) {\n            return this.sendResponse(res, 400, {\n              success: false,\n              error: 'Track ID is required'\n            });\n          }\n\n          // This would find the track by ID\n          const track = await this.findTrackById(trackId);\n          if (!track) {\n            return this.sendResponse(res, 404, {\n              success: false,\n              error: 'Track not found'\n            });\n          }\n          if (volume !== undefined) {\n            audioController.setVolume(volume);\n          }\n          await audioController.playTrack(track, crossfade || false);\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              message: 'Track started playing',\n              track: track.title\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, {\n            success: false,\n            error: errorMessage\n          });\n        }\n      }\n    });\n    this.addEndpoint({\n      path: '/api/audio/pause',\n      method: 'POST',\n      description: 'Pause current track',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          audioController.pause();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              message: 'Track paused'\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, {\n            success: false,\n            error: errorMessage\n          });\n        }\n      }\n    });\n    this.addEndpoint({\n      path: '/api/audio/resume',\n      method: 'POST',\n      description: 'Resume current track',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          audioController.resume();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              message: 'Track resumed'\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, {\n            success: false,\n            error: errorMessage\n          });\n        }\n      }\n    });\n    this.addEndpoint({\n      path: '/api/audio/stop',\n      method: 'POST',\n      description: 'Stop current track',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          audioController.stop();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              message: 'Track stopped'\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, {\n            success: false,\n            error: errorMessage\n          });\n        }\n      }\n    });\n    this.addEndpoint({\n      path: '/api/audio/volume',\n      method: 'POST',\n      description: 'Set volume',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const {\n            volume\n          } = req.body;\n          if (volume === undefined || volume < 0 || volume > 100) {\n            return this.sendResponse(res, 400, {\n              success: false,\n              error: 'Volume must be between 0-100'\n            });\n          }\n          audioController.setVolume(volume / 100);\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              message: 'Volume set',\n              volume\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, {\n            success: false,\n            error: errorMessage\n          });\n        }\n      }\n    });\n    this.addEndpoint({\n      path: '/api/audio/volume',\n      method: 'GET',\n      description: 'Get current volume',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const volume = Math.round(audioController.getVolume() * 100);\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              volume\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, {\n            success: false,\n            error: errorMessage\n          });\n        }\n      }\n    });\n    this.addEndpoint({\n      path: '/api/audio/fade',\n      method: 'POST',\n      description: 'Fade audio in/out',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const {\n            direction,\n            duration\n          } = req.body;\n          if (!direction || !['in', 'out'].includes(direction)) {\n            return this.sendResponse(res, 400, {\n              success: false,\n              error: 'Direction must be \"in\" or \"out\"'\n            });\n          }\n          const fadeDuration = duration || 2;\n          if (direction === 'in') {\n            audioController.fadeIn(fadeDuration);\n          } else {\n            audioController.fadeOut(fadeDuration);\n          }\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              message: `Fading ${direction}`,\n              duration: fadeDuration\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, {\n            success: false,\n            error: errorMessage\n          });\n        }\n      }\n    });\n    this.addEndpoint({\n      path: '/api/audio/ducking',\n      method: 'POST',\n      description: 'Configure audio ducking',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const {\n            enabled,\n            threshold,\n            amount\n          } = req.body;\n          if (enabled === undefined) {\n            return this.sendResponse(res, 400, {\n              success: false,\n              error: 'Enabled state is required'\n            });\n          }\n          audioController.enableDucking(enabled);\n          if (threshold !== undefined) {\n            audioController.setDuckingThreshold(threshold);\n          }\n          if (amount !== undefined) {\n            audioController.setDuckingAmount(amount);\n          }\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              message: 'Audio ducking configured',\n              enabled\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, {\n            success: false,\n            error: errorMessage\n          });\n        }\n      }\n    });\n    this.addEndpoint({\n      path: '/api/audio/ducking',\n      method: 'GET',\n      description: 'Get audio ducking status',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const settings = audioController.getSettings();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              enabled: settings.duckingEnabled,\n              threshold: settings.duckingThreshold,\n              amount: settings.duckingAmount\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, {\n            success: false,\n            error: errorMessage\n          });\n        }\n      }\n    });\n\n    // Status Endpoints\n    this.addEndpoint({\n      path: '/api/status',\n      method: 'GET',\n      description: 'Get system status',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const currentTrack = audioController.getCurrentTrack();\n          const isPlaying = audioController.getIsPlaying();\n          const volume = audioController.getVolume();\n          const settings = audioController.getSettings();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              audio: {\n                isPlaying,\n                volume: Math.round(volume * 100),\n                currentTrack: currentTrack ? {\n                  id: currentTrack.id,\n                  title: currentTrack.title,\n                  duration: currentTrack.duration\n                } : null,\n                settings: {\n                  duckingEnabled: settings.duckingEnabled,\n                  normalizationEnabled: settings.normalizationEnabled,\n                  loopEnabled: settings.loopEnabled\n                }\n              },\n              integrations: {\n                obs: obsIntegration.isConnected(),\n                discord: discordBot.isBotConnected(),\n                twitch: twitchIntegration.isTwitchConnected()\n              }\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, {\n            success: false,\n            error: errorMessage\n          });\n        }\n      }\n    });\n\n    // OBS Integration Endpoints\n    this.addEndpoint({\n      path: '/api/obs/connect',\n      method: 'POST',\n      description: 'Connect to OBS',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const {\n            host,\n            port,\n            password\n          } = req.body;\n          if (host && port) {\n            obsIntegration.setConfig({\n              host,\n              port,\n              password\n            });\n          }\n          const connected = await obsIntegration.connect();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              connected,\n              message: connected ? 'Connected to OBS' : 'Failed to connect to OBS'\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, {\n            success: false,\n            error: errorMessage\n          });\n        }\n      }\n    });\n    this.addEndpoint({\n      path: '/api/obs/status',\n      method: 'GET',\n      description: 'Get OBS connection status',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const connection = obsIntegration.getConnection();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: connection\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, {\n            success: false,\n            error: errorMessage\n          });\n        }\n      }\n    });\n\n    // Discord Integration Endpoints\n    this.addEndpoint({\n      path: '/api/discord/connect',\n      method: 'POST',\n      description: 'Connect Discord bot',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const {\n            token,\n            clientId,\n            guildId,\n            modRoleId\n          } = req.body;\n          if (token && clientId && guildId) {\n            discordBot.setConfig({\n              token,\n              clientId,\n              guildId,\n              modRoleId,\n              enabled: true\n            });\n          }\n          const connected = await discordBot.connect();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              connected,\n              message: connected ? 'Discord bot connected' : 'Failed to connect Discord bot'\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, {\n            success: false,\n            error: errorMessage\n          });\n        }\n      }\n    });\n\n    // Twitch Integration Endpoints\n    this.addEndpoint({\n      path: '/api/twitch/connect',\n      method: 'POST',\n      description: 'Connect to Twitch',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const {\n            username,\n            oauth,\n            channel\n          } = req.body;\n          if (username && oauth && channel) {\n            twitchIntegration.setConfig({\n              username,\n              oauth,\n              channel,\n              enabled: true\n            });\n          }\n          const connected = await twitchIntegration.connect();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              connected,\n              message: connected ? 'Connected to Twitch' : 'Failed to connect to Twitch'\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, {\n            success: false,\n            error: errorMessage\n          });\n        }\n      }\n    });\n\n    // Health Check Endpoint\n    this.addEndpoint({\n      path: '/api/health',\n      method: 'GET',\n      description: 'Health check endpoint',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        this.sendResponse(res, 200, {\n          success: true,\n          data: {\n            status: 'healthy',\n            timestamp: new Date().toISOString(),\n            version: '1.0.0'\n          }\n        });\n      }\n    });\n  }\n  addEndpoint(endpoint) {\n    this.endpoints.set(endpoint.path, endpoint);\n  }\n  async findTrackById(trackId) {\n    // This would search your track library by ID\n    // For now, return null to indicate no track found\n    return null;\n  }\n  sendResponse(res, status, data) {\n    res.status(status).json({\n      ...data,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  // Get all available endpoints\n  getEndpoints() {\n    return new Map(this.endpoints);\n  }\n\n  // Get endpoint documentation\n  getDocumentation() {\n    return Array.from(this.endpoints.values()).map(endpoint => ({\n      path: endpoint.path,\n      method: endpoint.method,\n      description: endpoint.description,\n      requiresAuth: endpoint.requiresAuth\n    }));\n  }\n\n  // Start the API server\n  async startServer(port = 3001) {\n    if (this.isRunning) return;\n    try {\n      // This would start an Express.js server\n      // For now, we'll simulate it\n      this.isRunning = true;\n      console.log(`API server started on port ${port}`);\n      console.log('Available endpoints:');\n      this.endpoints.forEach((endpoint, path) => {\n        console.log(`  ${endpoint.method} ${path} - ${endpoint.description}`);\n      });\n    } catch (error) {\n      console.error('Failed to start API server:', error);\n      this.isRunning = false;\n    }\n  }\n\n  // Stop the API server\n  stopServer() {\n    if (!this.isRunning) return;\n    this.isRunning = false;\n    console.log('API server stopped');\n  }\n\n  // Check if server is running\n  isServerRunning() {\n    return this.isRunning;\n  }\n\n  // Cleanup\n  destroy() {\n    this.stopServer();\n    this.endpoints.clear();\n  }\n}\n\n// Export singleton instance\nexport const apiEndpoints = new APIEndpoints();","map":{"version":3,"names":["audioController","obsIntegration","discordBot","twitchIntegration","APIEndpoints","constructor","endpoints","Map","isRunning","server","setupEndpoints","addEndpoint","path","method","description","requiresAuth","handler","req","res","trackId","crossfade","volume","body","sendResponse","success","error","track","findTrackById","undefined","setVolume","playTrack","data","message","title","errorMessage","Error","pause","resume","stop","Math","round","getVolume","direction","duration","includes","fadeDuration","fadeIn","fadeOut","enabled","threshold","amount","enableDucking","setDuckingThreshold","setDuckingAmount","settings","getSettings","duckingEnabled","duckingThreshold","duckingAmount","currentTrack","getCurrentTrack","isPlaying","getIsPlaying","audio","id","normalizationEnabled","loopEnabled","integrations","obs","isConnected","discord","isBotConnected","twitch","isTwitchConnected","host","port","password","setConfig","connected","connect","connection","getConnection","token","clientId","guildId","modRoleId","username","oauth","channel","status","timestamp","Date","toISOString","version","endpoint","set","json","getEndpoints","getDocumentation","Array","from","values","map","startServer","console","log","forEach","stopServer","isServerRunning","destroy","clear","apiEndpoints"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/services/apiEndpoints.ts"],"sourcesContent":["import { audioController } from './audioController';\nimport { obsIntegration } from './obsIntegration';\nimport { discordBot } from './discordBot';\nimport { twitchIntegration } from './twitchIntegration';\nimport { StreamingTrack } from '../types/track';\n\nexport interface APIEndpoint {\n  path: string;\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  description: string;\n  requiresAuth: boolean;\n  handler: (req: any, res: any) => Promise<void>;\n}\n\nexport interface APIResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n\nexport interface TrackRequest {\n  trackId: string;\n  crossfade?: boolean;\n  volume?: number;\n}\n\nexport interface VolumeRequest {\n  volume: number;\n}\n\nexport interface DuckingRequest {\n  enabled: boolean;\n  threshold?: number;\n  amount?: number;\n}\n\nclass APIEndpoints {\n  private endpoints: Map<string, APIEndpoint> = new Map();\n  private isRunning = false;\n  private server: any = null;\n\n  constructor() {\n    this.setupEndpoints();\n  }\n\n  private setupEndpoints(): void {\n    // Audio Control Endpoints\n    this.addEndpoint({\n      path: '/api/audio/play',\n      method: 'POST',\n      description: 'Play a track',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const { trackId, crossfade, volume }: TrackRequest = req.body;\n          \n          if (!trackId) {\n            return this.sendResponse(res, 400, { success: false, error: 'Track ID is required' });\n          }\n\n          // This would find the track by ID\n          const track = await this.findTrackById(trackId);\n          if (!track) {\n            return this.sendResponse(res, 404, { success: false, error: 'Track not found' });\n          }\n\n          if (volume !== undefined) {\n            audioController.setVolume(volume);\n          }\n\n          await audioController.playTrack(track, crossfade || false);\n          \n          this.sendResponse(res, 200, {\n            success: true,\n            data: { message: 'Track started playing', track: track.title }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/pause',\n      method: 'POST',\n      description: 'Pause current track',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          audioController.pause();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: { message: 'Track paused' }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/resume',\n      method: 'POST',\n      description: 'Resume current track',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          audioController.resume();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: { message: 'Track resumed' }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/stop',\n      method: 'POST',\n      description: 'Stop current track',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          audioController.stop();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: { message: 'Track stopped' }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/volume',\n      method: 'POST',\n      description: 'Set volume',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const { volume }: VolumeRequest = req.body;\n          \n          if (volume === undefined || volume < 0 || volume > 100) {\n            return this.sendResponse(res, 400, { success: false, error: 'Volume must be between 0-100' });\n          }\n\n          audioController.setVolume(volume / 100);\n          \n          this.sendResponse(res, 200, {\n            success: true,\n            data: { message: 'Volume set', volume }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/volume',\n      method: 'GET',\n      description: 'Get current volume',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const volume = Math.round(audioController.getVolume() * 100);\n          this.sendResponse(res, 200, {\n            success: true,\n            data: { volume }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/fade',\n      method: 'POST',\n      description: 'Fade audio in/out',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const { direction, duration } = req.body;\n          \n          if (!direction || !['in', 'out'].includes(direction)) {\n            return this.sendResponse(res, 400, { success: false, error: 'Direction must be \"in\" or \"out\"' });\n          }\n\n          const fadeDuration = duration || 2;\n\n          if (direction === 'in') {\n            audioController.fadeIn(fadeDuration);\n          } else {\n            audioController.fadeOut(fadeDuration);\n          }\n\n          this.sendResponse(res, 200, {\n            success: true,\n            data: { message: `Fading ${direction}`, duration: fadeDuration }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/ducking',\n      method: 'POST',\n      description: 'Configure audio ducking',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const { enabled, threshold, amount }: DuckingRequest = req.body;\n          \n          if (enabled === undefined) {\n            return this.sendResponse(res, 400, { success: false, error: 'Enabled state is required' });\n          }\n\n          audioController.enableDucking(enabled);\n          \n          if (threshold !== undefined) {\n            audioController.setDuckingThreshold(threshold);\n          }\n          \n          if (amount !== undefined) {\n            audioController.setDuckingAmount(amount);\n          }\n\n          this.sendResponse(res, 200, {\n            success: true,\n            data: { message: 'Audio ducking configured', enabled }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/ducking',\n      method: 'GET',\n      description: 'Get audio ducking status',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const settings = audioController.getSettings();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              enabled: settings.duckingEnabled,\n              threshold: settings.duckingThreshold,\n              amount: settings.duckingAmount\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    // Status Endpoints\n    this.addEndpoint({\n      path: '/api/status',\n      method: 'GET',\n      description: 'Get system status',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const currentTrack = audioController.getCurrentTrack();\n          const isPlaying = audioController.getIsPlaying();\n          const volume = audioController.getVolume();\n          const settings = audioController.getSettings();\n\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              audio: {\n                isPlaying,\n                volume: Math.round(volume * 100),\n                currentTrack: currentTrack ? {\n                  id: currentTrack.id,\n                  title: currentTrack.title,\n                  duration: currentTrack.duration\n                } : null,\n                settings: {\n                  duckingEnabled: settings.duckingEnabled,\n                  normalizationEnabled: settings.normalizationEnabled,\n                  loopEnabled: settings.loopEnabled\n                }\n              },\n              integrations: {\n                obs: obsIntegration.isConnected(),\n                discord: discordBot.isBotConnected(),\n                twitch: twitchIntegration.isTwitchConnected()\n              }\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    // OBS Integration Endpoints\n    this.addEndpoint({\n      path: '/api/obs/connect',\n      method: 'POST',\n      description: 'Connect to OBS',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const { host, port, password } = req.body;\n          \n          if (host && port) {\n            obsIntegration.setConfig({ host, port, password });\n          }\n          \n          const connected = await obsIntegration.connect();\n          \n          this.sendResponse(res, 200, {\n            success: true,\n            data: { connected, message: connected ? 'Connected to OBS' : 'Failed to connect to OBS' }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/obs/status',\n      method: 'GET',\n      description: 'Get OBS connection status',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const connection = obsIntegration.getConnection();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: connection\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    // Discord Integration Endpoints\n    this.addEndpoint({\n      path: '/api/discord/connect',\n      method: 'POST',\n      description: 'Connect Discord bot',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const { token, clientId, guildId, modRoleId } = req.body;\n          \n          if (token && clientId && guildId) {\n            discordBot.setConfig({ token, clientId, guildId, modRoleId, enabled: true });\n          }\n          \n          const connected = await discordBot.connect();\n          \n          this.sendResponse(res, 200, {\n            success: true,\n            data: { connected, message: connected ? 'Discord bot connected' : 'Failed to connect Discord bot' }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    // Twitch Integration Endpoints\n    this.addEndpoint({\n      path: '/api/twitch/connect',\n      method: 'POST',\n      description: 'Connect to Twitch',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const { username, oauth, channel } = req.body;\n          \n          if (username && oauth && channel) {\n            twitchIntegration.setConfig({ username, oauth, channel, enabled: true });\n          }\n          \n          const connected = await twitchIntegration.connect();\n          \n          this.sendResponse(res, 200, {\n            success: true,\n            data: { connected, message: connected ? 'Connected to Twitch' : 'Failed to connect to Twitch' }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    // Health Check Endpoint\n    this.addEndpoint({\n      path: '/api/health',\n      method: 'GET',\n      description: 'Health check endpoint',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        this.sendResponse(res, 200, {\n          success: true,\n          data: { \n            status: 'healthy',\n            timestamp: new Date().toISOString(),\n            version: '1.0.0'\n          }\n        });\n      }\n    });\n  }\n\n  private addEndpoint(endpoint: APIEndpoint): void {\n    this.endpoints.set(endpoint.path, endpoint);\n  }\n\n  private async findTrackById(trackId: string): Promise<StreamingTrack | null> {\n    // This would search your track library by ID\n    // For now, return null to indicate no track found\n    return null;\n  }\n\n  private sendResponse(res: any, status: number, data: APIResponse): void {\n    res.status(status).json({\n      ...data,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  // Get all available endpoints\n  getEndpoints(): Map<string, APIEndpoint> {\n    return new Map(this.endpoints);\n  }\n\n  // Get endpoint documentation\n  getDocumentation(): any[] {\n    return Array.from(this.endpoints.values()).map(endpoint => ({\n      path: endpoint.path,\n      method: endpoint.method,\n      description: endpoint.description,\n      requiresAuth: endpoint.requiresAuth\n    }));\n  }\n\n  // Start the API server\n  async startServer(port: number = 3001): Promise<void> {\n    if (this.isRunning) return;\n\n    try {\n      // This would start an Express.js server\n      // For now, we'll simulate it\n      this.isRunning = true;\n      console.log(`API server started on port ${port}`);\n      console.log('Available endpoints:');\n      \n      this.endpoints.forEach((endpoint, path) => {\n        console.log(`  ${endpoint.method} ${path} - ${endpoint.description}`);\n      });\n    } catch (error) {\n      console.error('Failed to start API server:', error);\n      this.isRunning = false;\n    }\n  }\n\n  // Stop the API server\n  stopServer(): void {\n    if (!this.isRunning) return;\n\n    this.isRunning = false;\n    console.log('API server stopped');\n  }\n\n  // Check if server is running\n  isServerRunning(): boolean {\n    return this.isRunning;\n  }\n\n  // Cleanup\n  destroy(): void {\n    this.stopServer();\n    this.endpoints.clear();\n  }\n}\n\n// Export singleton instance\nexport const apiEndpoints = new APIEndpoints();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// import { StreamingTrack } from '../types/track';\n\nclass UsageTrackingService {\n  constructor() {\n    this.storageKey = 'stream_soundboard_usage';\n    this.usageData = new Map();\n    this.loadUsageData();\n  }\n  loadUsageData() {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      if (stored) {\n        const data = JSON.parse(stored);\n        this.usageData = new Map(Object.entries(data));\n\n        // Convert date strings back to Date objects\n        this.usageData.forEach(usage => {\n          if (usage.lastUsed) {\n            usage.lastUsed = new Date(usage.lastUsed);\n          }\n        });\n      }\n    } catch (error) {\n      console.warn('Failed to load usage data:', error);\n    }\n  }\n  saveUsageData() {\n    try {\n      const data = Object.fromEntries(this.usageData);\n      localStorage.setItem(this.storageKey, JSON.stringify(data));\n    } catch (error) {\n      console.warn('Failed to save usage data:', error);\n    }\n  }\n  trackUsage(trackId, agencyId, streamerId) {\n    const existing = this.usageData.get(trackId);\n    if (existing) {\n      existing.usageCount += 1;\n      existing.lastUsed = new Date();\n      if (agencyId) existing.agencyId = agencyId;\n      if (streamerId) existing.streamerId = streamerId;\n    } else {\n      this.usageData.set(trackId, {\n        trackId,\n        usageCount: 1,\n        lastUsed: new Date(),\n        agencyId,\n        streamerId,\n        favorite: false\n      });\n    }\n    this.saveUsageData();\n  }\n  getTrackUsage(trackId) {\n    return this.usageData.get(trackId);\n  }\n  getAllUsage() {\n    return Array.from(this.usageData.values());\n  }\n  getMostPopularTracks(limit = 10) {\n    return Array.from(this.usageData.values()).sort((a, b) => b.usageCount - a.usageCount).slice(0, limit);\n  }\n  getRecentlyUsedTracks(limit = 10) {\n    return Array.from(this.usageData.values()).filter(usage => usage.lastUsed).sort((a, b) => new Date(b.lastUsed).getTime() - new Date(a.lastUsed).getTime()).slice(0, limit);\n  }\n  toggleFavorite(trackId) {\n    const usage = this.usageData.get(trackId);\n    if (usage) {\n      usage.favorite = !usage.favorite;\n      this.saveUsageData();\n    }\n  }\n  getFavoriteTracks() {\n    return Array.from(this.usageData.values()).filter(usage => usage.favorite).sort((a, b) => b.usageCount - a.usageCount);\n  }\n  getAgencyStats(agencyId) {\n    const agencyTracks = Array.from(this.usageData.values()).filter(usage => usage.agencyId === agencyId);\n    if (agencyTracks.length === 0) {\n      return {\n        totalTracks: 0,\n        totalUsage: 0,\n        averageUsagePerTrack: 0\n      };\n    }\n    const totalUsage = agencyTracks.reduce((sum, track) => sum + track.usageCount, 0);\n    const mostUsedTrack = agencyTracks.reduce((max, track) => track.usageCount > max.usageCount ? track : max);\n    return {\n      totalTracks: agencyTracks.length,\n      totalUsage,\n      mostUsedTrack,\n      averageUsagePerTrack: totalUsage / agencyTracks.length\n    };\n  }\n  clearUsageData() {\n    this.usageData.clear();\n    localStorage.removeItem(this.storageKey);\n  }\n}\n\n// Export as singleton\nexport const usageTrackingService = new UsageTrackingService();","map":{"version":3,"names":["UsageTrackingService","constructor","storageKey","usageData","Map","loadUsageData","stored","localStorage","getItem","data","JSON","parse","Object","entries","forEach","usage","lastUsed","Date","error","console","warn","saveUsageData","fromEntries","setItem","stringify","trackUsage","trackId","agencyId","streamerId","existing","get","usageCount","set","favorite","getTrackUsage","getAllUsage","Array","from","values","getMostPopularTracks","limit","sort","a","b","slice","getRecentlyUsedTracks","filter","getTime","toggleFavorite","getFavoriteTracks","getAgencyStats","agencyTracks","length","totalTracks","totalUsage","averageUsagePerTrack","reduce","sum","track","mostUsedTrack","max","clearUsageData","clear","removeItem","usageTrackingService"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/services/usageTrackingService.ts"],"sourcesContent":["// import { StreamingTrack } from '../types/track';\n\nexport interface TrackUsage {\n  trackId: string;\n  usageCount: number;\n  lastUsed: Date;\n  agencyId?: string;\n  streamerId?: string;\n  favorite: boolean;\n}\n\nclass UsageTrackingService {\n  private storageKey = 'stream_soundboard_usage';\n  private usageData: Map<string, TrackUsage> = new Map();\n\n  constructor() {\n    this.loadUsageData();\n  }\n\n  private loadUsageData(): void {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      if (stored) {\n        const data = JSON.parse(stored);\n        this.usageData = new Map(Object.entries(data));\n        \n        // Convert date strings back to Date objects\n        this.usageData.forEach(usage => {\n          if (usage.lastUsed) {\n            usage.lastUsed = new Date(usage.lastUsed);\n          }\n        });\n      }\n    } catch (error) {\n      console.warn('Failed to load usage data:', error);\n    }\n  }\n\n  private saveUsageData(): void {\n    try {\n      const data = Object.fromEntries(this.usageData);\n      localStorage.setItem(this.storageKey, JSON.stringify(data));\n    } catch (error) {\n      console.warn('Failed to save usage data:', error);\n    }\n  }\n\n  trackUsage(trackId: string, agencyId?: string, streamerId?: string): void {\n    const existing = this.usageData.get(trackId);\n    \n    if (existing) {\n      existing.usageCount += 1;\n      existing.lastUsed = new Date();\n      if (agencyId) existing.agencyId = agencyId;\n      if (streamerId) existing.streamerId = streamerId;\n    } else {\n      this.usageData.set(trackId, {\n        trackId,\n        usageCount: 1,\n        lastUsed: new Date(),\n        agencyId,\n        streamerId,\n        favorite: false\n      });\n    }\n    \n    this.saveUsageData();\n  }\n\n  getTrackUsage(trackId: string): TrackUsage | undefined {\n    return this.usageData.get(trackId);\n  }\n\n  getAllUsage(): TrackUsage[] {\n    return Array.from(this.usageData.values());\n  }\n\n  getMostPopularTracks(limit: number = 10): TrackUsage[] {\n    return Array.from(this.usageData.values())\n      .sort((a, b) => b.usageCount - a.usageCount)\n      .slice(0, limit);\n  }\n\n  getRecentlyUsedTracks(limit: number = 10): TrackUsage[] {\n    return Array.from(this.usageData.values())\n      .filter(usage => usage.lastUsed)\n      .sort((a, b) => new Date(b.lastUsed!).getTime() - new Date(a.lastUsed!).getTime())\n      .slice(0, limit);\n  }\n\n  toggleFavorite(trackId: string): void {\n    const usage = this.usageData.get(trackId);\n    if (usage) {\n      usage.favorite = !usage.favorite;\n      this.saveUsageData();\n    }\n  }\n\n  getFavoriteTracks(): TrackUsage[] {\n    return Array.from(this.usageData.values())\n      .filter(usage => usage.favorite)\n      .sort((a, b) => b.usageCount - a.usageCount);\n  }\n\n  getAgencyStats(agencyId: string): {\n    totalTracks: number;\n    totalUsage: number;\n    mostUsedTrack?: TrackUsage;\n    averageUsagePerTrack: number;\n  } {\n    const agencyTracks = Array.from(this.usageData.values())\n      .filter(usage => usage.agencyId === agencyId);\n    \n    if (agencyTracks.length === 0) {\n      return {\n        totalTracks: 0,\n        totalUsage: 0,\n        averageUsagePerTrack: 0\n      };\n    }\n\n    const totalUsage = agencyTracks.reduce((sum, track) => sum + track.usageCount, 0);\n    const mostUsedTrack = agencyTracks.reduce((max, track) => \n      track.usageCount > max.usageCount ? track : max\n    );\n\n    return {\n      totalTracks: agencyTracks.length,\n      totalUsage,\n      mostUsedTrack,\n      averageUsagePerTrack: totalUsage / agencyTracks.length\n    };\n  }\n\n  clearUsageData(): void {\n    this.usageData.clear();\n    localStorage.removeItem(this.storageKey);\n  }\n}\n\n// Export as singleton\nexport const usageTrackingService = new UsageTrackingService();\n\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _objectSpread from\"/Users/allendunn/Documents/Stream/stream-soundboard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{audioController}from'./audioController';class DiscordBot{constructor(){this.config={token:'',clientId:'',guildId:'',prefix:'!',modRoleId:'',enabled:false};this.commands=new Map();this.isConnected=false;this.setupCommands();}// Configuration\nsetConfig(config){this.config=_objectSpread(_objectSpread({},this.config),config);}getConfig(){return _objectSpread({},this.config);}// Command System\nsetupCommands(){// Play command\nthis.addCommand({name:'play',description:'Play a track by name or ID',usage:'!play <track name or ID>',modOnly:true,execute:async(message,args)=>{if(args.length===0){await this.reply(message,'Please specify a track to play. Usage: !play <track name>');return;}await this.reply(message,'üéµ Play command executed');}});// Pause command\nthis.addCommand({name:'pause',description:'Pause the current track',usage:'!pause',modOnly:true,execute:async message=>{audioController.pause();await this.reply(message,'‚è∏Ô∏è Music paused');}});// Resume command\nthis.addCommand({name:'resume',description:'Resume the current track',usage:'!resume',modOnly:true,execute:async message=>{audioController.resume();await this.reply(message,'‚ñ∂Ô∏è Music resumed');}});// Stop command\nthis.addCommand({name:'stop',description:'Stop the current track',usage:'!stop',modOnly:true,execute:async message=>{audioController.stop();await this.reply(message,'‚èπÔ∏è Music stopped');}});// Volume command\nthis.addCommand({name:'volume',description:'Set the volume (0-100)',usage:'!volume <0-100>',modOnly:true,execute:async(message,args)=>{if(args.length===0){const currentVolume=Math.round(audioController.getVolume()*100);await this.reply(message,\"\\uD83D\\uDD0A Current volume: **\".concat(currentVolume,\"%**\"));return;}const volume=parseInt(args[0]);if(isNaN(volume)||volume<0||volume>100){await this.reply(message,'‚ùå Please specify a volume between 0 and 100');return;}audioController.setVolume(volume/100);await this.reply(message,\"\\uD83D\\uDD0A Volume set to **\".concat(volume,\"%**\"));}});// Help command\nthis.addCommand({name:'help',description:'Show available commands',usage:'!help [command]',modOnly:false,execute:async message=>{const commandList=Array.from(this.commands.values()).map(cmd=>\"**\".concat(this.config.prefix).concat(cmd.name,\"** - \").concat(cmd.description)).join('\\n');await this.reply(message,{embeds:[{color:0x0099ff,title:'üéµ Music Bot Commands',description:commandList}]});}});}addCommand(command){this.commands.set(command.name.toLowerCase(),command);}// Command Execution\nasync executeCommand(message,content){var _args$shift;if(!content.startsWith(this.config.prefix))return;const args=content.slice(this.config.prefix.length).trim().split(/ +/);const commandName=(_args$shift=args.shift())===null||_args$shift===void 0?void 0:_args$shift.toLowerCase();if(!commandName||!this.commands.has(commandName))return;const command=this.commands.get(commandName);try{await command.execute(message,args);}catch(error){console.error(\"Error executing command \".concat(commandName,\":\"),error);await this.reply(message,\"\\u274C An error occurred while executing the command\");}}// Utility Methods\nasync reply(message,content){try{if(typeof content==='string'){await message.reply(content);}else{await message.reply(content);}}catch(error){console.error('Error replying to message:',error);}}// Connection Management\nasync connect(){if(!this.config.enabled||!this.config.token){console.log('Discord bot not configured or disabled');return false;}try{this.isConnected=true;console.log('Discord bot connected');return true;}catch(error){console.error('Failed to connect Discord bot:',error);return false;}}disconnect(){this.isConnected=false;console.log('Discord bot disconnected');}// Getters\nisBotConnected(){return this.isConnected;}getCommands(){return new Map(this.commands);}// Cleanup\ndestroy(){this.disconnect();this.commands.clear();}}// Export singleton instance\nexport const discordBot=new DiscordBot();","map":{"version":3,"names":["audioController","DiscordBot","constructor","config","token","clientId","guildId","prefix","modRoleId","enabled","commands","Map","isConnected","setupCommands","setConfig","_objectSpread","getConfig","addCommand","name","description","usage","modOnly","execute","message","args","length","reply","pause","resume","stop","currentVolume","Math","round","getVolume","concat","volume","parseInt","isNaN","setVolume","commandList","Array","from","values","map","cmd","join","embeds","color","title","command","set","toLowerCase","executeCommand","content","_args$shift","startsWith","slice","trim","split","commandName","shift","has","get","error","console","connect","log","disconnect","isBotConnected","getCommands","destroy","clear","discordBot"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/services/discordBot.ts"],"sourcesContent":["import { audioController } from './audioController';\nimport { StreamingTrack } from '../types/track';\n\nexport interface DiscordBotConfig {\n  token: string;\n  clientId: string;\n  guildId: string;\n  prefix: string;\n  modRoleId: string;\n  enabled: boolean;\n}\n\nexport interface DiscordCommand {\n  name: string;\n  description: string;\n  usage: string;\n  modOnly: boolean;\n  execute: (message: any, args: string[]) => Promise<void>;\n}\n\nclass DiscordBot {\n  private config: DiscordBotConfig = {\n    token: '',\n    clientId: '',\n    guildId: '',\n    prefix: '!',\n    modRoleId: '',\n    enabled: false\n  };\n  private commands: Map<string, DiscordCommand> = new Map();\n  private isConnected = false;\n\n  constructor() {\n    this.setupCommands();\n  }\n\n  // Configuration\n  setConfig(config: Partial<DiscordBotConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  getConfig(): DiscordBotConfig {\n    return { ...this.config };\n  }\n\n  // Command System\n  private setupCommands(): void {\n    // Play command\n    this.addCommand({\n      name: 'play',\n      description: 'Play a track by name or ID',\n      usage: '!play <track name or ID>',\n      modOnly: true,\n      execute: async (message, args) => {\n        if (args.length === 0) {\n          await this.reply(message, 'Please specify a track to play. Usage: !play <track name>');\n          return;\n        }\n        await this.reply(message, 'üéµ Play command executed');\n      }\n    });\n\n    // Pause command\n    this.addCommand({\n      name: 'pause',\n      description: 'Pause the current track',\n      usage: '!pause',\n      modOnly: true,\n      execute: async (message) => {\n        audioController.pause();\n        await this.reply(message, '‚è∏Ô∏è Music paused');\n      }\n    });\n\n    // Resume command\n    this.addCommand({\n      name: 'resume',\n      description: 'Resume the current track',\n      usage: '!resume',\n      modOnly: true,\n      execute: async (message) => {\n        audioController.resume();\n        await this.reply(message, '‚ñ∂Ô∏è Music resumed');\n      }\n    });\n\n    // Stop command\n    this.addCommand({\n      name: 'stop',\n      description: 'Stop the current track',\n      usage: '!stop',\n      modOnly: true,\n      execute: async (message) => {\n        audioController.stop();\n        await this.reply(message, '‚èπÔ∏è Music stopped');\n      }\n    });\n\n    // Volume command\n    this.addCommand({\n      name: 'volume',\n      description: 'Set the volume (0-100)',\n      usage: '!volume <0-100>',\n      modOnly: true,\n      execute: async (message, args) => {\n        if (args.length === 0) {\n          const currentVolume = Math.round(audioController.getVolume() * 100);\n          await this.reply(message, `üîä Current volume: **${currentVolume}%**`);\n          return;\n        }\n\n        const volume = parseInt(args[0]);\n        if (isNaN(volume) || volume < 0 || volume > 100) {\n          await this.reply(message, '‚ùå Please specify a volume between 0 and 100');\n          return;\n        }\n\n        audioController.setVolume(volume / 100);\n        await this.reply(message, `üîä Volume set to **${volume}%**`);\n      }\n    });\n\n    // Help command\n    this.addCommand({\n      name: 'help',\n      description: 'Show available commands',\n      usage: '!help [command]',\n      modOnly: false,\n      execute: async (message) => {\n        const commandList = Array.from(this.commands.values())\n          .map(cmd => `**${this.config.prefix}${cmd.name}** - ${cmd.description}`)\n          .join('\\n');\n\n        await this.reply(message, {\n          embeds: [{\n            color: 0x0099ff,\n            title: 'üéµ Music Bot Commands',\n            description: commandList\n          }]\n        });\n      }\n    });\n  }\n\n  private addCommand(command: DiscordCommand): void {\n    this.commands.set(command.name.toLowerCase(), command);\n  }\n\n  // Command Execution\n  async executeCommand(message: any, content: string): Promise<void> {\n    if (!content.startsWith(this.config.prefix)) return;\n\n    const args = content.slice(this.config.prefix.length).trim().split(/ +/);\n    const commandName = args.shift()?.toLowerCase();\n\n    if (!commandName || !this.commands.has(commandName)) return;\n\n    const command = this.commands.get(commandName)!;\n    \n    try {\n      await command.execute(message, args);\n    } catch (error) {\n      console.error(`Error executing command ${commandName}:`, error);\n      await this.reply(message, `‚ùå An error occurred while executing the command`);\n    }\n  }\n\n  // Utility Methods\n  private async reply(message: any, content: string | object): Promise<void> {\n    try {\n      if (typeof content === 'string') {\n        await message.reply(content);\n      } else {\n        await message.reply(content);\n      }\n    } catch (error) {\n      console.error('Error replying to message:', error);\n    }\n  }\n\n  // Connection Management\n  async connect(): Promise<boolean> {\n    if (!this.config.enabled || !this.config.token) {\n      console.log('Discord bot not configured or disabled');\n      return false;\n    }\n\n    try {\n      this.isConnected = true;\n      console.log('Discord bot connected');\n      return true;\n    } catch (error) {\n      console.error('Failed to connect Discord bot:', error);\n      return false;\n    }\n  }\n\n  disconnect(): void {\n    this.isConnected = false;\n    console.log('Discord bot disconnected');\n  }\n\n  // Getters\n  isBotConnected(): boolean {\n    return this.isConnected;\n  }\n\n  getCommands(): Map<string, DiscordCommand> {\n    return new Map(this.commands);\n  }\n\n  // Cleanup\n  destroy(): void {\n    this.disconnect();\n    this.commands.clear();\n  }\n}\n\n// Export singleton instance\nexport const discordBot = new DiscordBot();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
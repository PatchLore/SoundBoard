{"ast":null,"code":"// Performance test utilities for diagnosing loading issues on older hardware\n\nexport const testJSONLoading = async () => {\n  const startTime = performance.now();\n  let jsonLoadTime = 0;\n  let trackProcessingTime = 0;\n  let tracksProcessed = 0;\n  let error;\n  try {\n    var _memory;\n    console.log('🧪 Starting performance test...');\n\n    // Test JSON import (removed YouTube Audio Library integration — migrated to Suno API)\n    const jsonStart = performance.now();\n    // Simulate processing Suno API tracks instead of JSON file\n    jsonLoadTime = performance.now() - jsonStart;\n    console.log(`📊 Suno API tracks processed in ${jsonLoadTime.toFixed(2)}ms`);\n    console.log(`📁 Simulated ${tracksProcessed} AI-generated tracks`);\n\n    // Removed YouTube Audio Library integration — migrated to Suno API\n    // Test track processing\n    const processingStart = performance.now();\n    tracksProcessed = 10; // Simulate processing 10 AI-generated tracks\n\n    // Simulate track processing for Suno API tracks\n    Array.from({\n      length: 10\n    }, (_, index) => ({\n      id: `suno_test_${index}`,\n      title: `AI Generated Track ${index + 1}`,\n      sunoId: `suno_${index}`,\n      // Add minimal processing to simulate real usage\n      processed: true\n    }));\n    trackProcessingTime = performance.now() - processingStart;\n    console.log(`⚡ Processed ${tracksProcessed} tracks in ${trackProcessingTime.toFixed(2)}ms`);\n    return {\n      jsonLoadTime,\n      trackProcessingTime,\n      memoryUsage: ((_memory = performance.memory) === null || _memory === void 0 ? void 0 : _memory.usedJSHeapSize) || 0,\n      totalTime: performance.now() - startTime,\n      success: true,\n      tracksProcessed\n    };\n  } catch (err) {\n    var _memory2;\n    error = err instanceof Error ? err.message : 'Unknown error';\n    console.error('❌ Performance test failed:', error);\n    return {\n      jsonLoadTime,\n      trackProcessingTime,\n      memoryUsage: ((_memory2 = performance.memory) === null || _memory2 === void 0 ? void 0 : _memory2.usedJSHeapSize) || 0,\n      totalTime: performance.now() - startTime,\n      success: false,\n      error,\n      tracksProcessed\n    };\n  }\n};\nexport const getHardwareInfo = () => {\n  const info = {\n    userAgent: navigator.userAgent,\n    platform: navigator.platform,\n    hardwareConcurrency: navigator.hardwareConcurrency || 'Unknown',\n    deviceMemory: navigator.deviceMemory || 'Unknown',\n    maxTouchPoints: navigator.maxTouchPoints || 0,\n    onLine: navigator.onLine,\n    cookieEnabled: navigator.cookieEnabled,\n    language: navigator.language,\n    memoryInfo: performance.memory ? {\n      usedJSHeapSize: performance.memory.usedJSHeapSize,\n      totalJSHeapSize: performance.memory.totalJSHeapSize,\n      jsHeapSizeLimit: performance.memory.jsHeapSizeLimit\n    } : 'Not available'\n  };\n  console.log('🖥️ Hardware Info:', info);\n  return info;\n};\nexport const runPerformanceDiagnostics = async () => {\n  console.log('🔍 Running performance diagnostics...');\n\n  // Get hardware info\n  const hardwareInfo = getHardwareInfo();\n\n  // Test JSON loading\n  const testResult = await testJSONLoading();\n\n  // Analyze results\n  const analysis = {\n    hardwareInfo,\n    testResult,\n    recommendations: []\n  };\n  if (testResult.jsonLoadTime > 5000) {\n    analysis.recommendations.push('JSON loading is slow (>5s) - consider using smaller batches');\n  }\n  if (testResult.trackProcessingTime > 3000) {\n    analysis.recommendations.push('Track processing is slow (>3s) - consider optimizing processing logic');\n  }\n  if (testResult.totalTime > 10000) {\n    analysis.recommendations.push('Total loading time is very slow (>10s) - consider lazy loading');\n  }\n  if (hardwareInfo.hardwareConcurrency && hardwareInfo.hardwareConcurrency < 4) {\n    analysis.recommendations.push('Low CPU cores detected - consider reducing batch sizes');\n  }\n  if (hardwareInfo.deviceMemory && hardwareInfo.deviceMemory < 4) {\n    analysis.recommendations.push('Low device memory detected - consider memory optimization');\n  }\n  console.log('📋 Performance Analysis:', analysis);\n  return analysis;\n};","map":{"version":3,"names":["testJSONLoading","startTime","performance","now","jsonLoadTime","trackProcessingTime","tracksProcessed","error","_memory","console","log","jsonStart","toFixed","processingStart","Array","from","length","_","index","id","title","sunoId","processed","memoryUsage","memory","usedJSHeapSize","totalTime","success","err","_memory2","Error","message","getHardwareInfo","info","userAgent","navigator","platform","hardwareConcurrency","deviceMemory","maxTouchPoints","onLine","cookieEnabled","language","memoryInfo","totalJSHeapSize","jsHeapSizeLimit","runPerformanceDiagnostics","hardwareInfo","testResult","analysis","recommendations","push"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/utils/performanceTest.ts"],"sourcesContent":["// Performance test utilities for diagnosing loading issues on older hardware\n\nexport interface PerformanceTestResult {\n  jsonLoadTime: number;\n  trackProcessingTime: number;\n  memoryUsage: number;\n  totalTime: number;\n  success: boolean;\n  error?: string;\n  tracksProcessed: number;\n}\n\nexport const testJSONLoading = async (): Promise<PerformanceTestResult> => {\n  const startTime = performance.now();\n  let jsonLoadTime = 0;\n  let trackProcessingTime = 0;\n  let tracksProcessed = 0;\n  let error: string | undefined;\n\n  try {\n    console.log('🧪 Starting performance test...');\n    \n    // Test JSON import (removed YouTube Audio Library integration — migrated to Suno API)\n    const jsonStart = performance.now();\n    // Simulate processing Suno API tracks instead of JSON file\n    jsonLoadTime = performance.now() - jsonStart;\n    \n    console.log(`📊 Suno API tracks processed in ${jsonLoadTime.toFixed(2)}ms`);\n    console.log(`📁 Simulated ${tracksProcessed} AI-generated tracks`);\n    \n    // Removed YouTube Audio Library integration — migrated to Suno API\n    // Test track processing\n    const processingStart = performance.now();\n    tracksProcessed = 10; // Simulate processing 10 AI-generated tracks\n    \n    // Simulate track processing for Suno API tracks\n    Array.from({ length: 10 }, (_, index: number) => ({\n      id: `suno_test_${index}`,\n      title: `AI Generated Track ${index + 1}`,\n      sunoId: `suno_${index}`,\n      // Add minimal processing to simulate real usage\n      processed: true\n    }));\n    \n    trackProcessingTime = performance.now() - processingStart;\n    \n    console.log(`⚡ Processed ${tracksProcessed} tracks in ${trackProcessingTime.toFixed(2)}ms`);\n    \n    return {\n      jsonLoadTime,\n      trackProcessingTime,\n      memoryUsage: (performance as any).memory?.usedJSHeapSize || 0,\n      totalTime: performance.now() - startTime,\n      success: true,\n      tracksProcessed\n    };\n    \n  } catch (err) {\n    error = err instanceof Error ? err.message : 'Unknown error';\n    console.error('❌ Performance test failed:', error);\n    \n    return {\n      jsonLoadTime,\n      trackProcessingTime,\n      memoryUsage: (performance as any).memory?.usedJSHeapSize || 0,\n      totalTime: performance.now() - startTime,\n      success: false,\n      error,\n      tracksProcessed\n    };\n  }\n};\n\nexport const getHardwareInfo = () => {\n  const info = {\n    userAgent: navigator.userAgent,\n    platform: navigator.platform,\n    hardwareConcurrency: navigator.hardwareConcurrency || 'Unknown',\n    deviceMemory: (navigator as any).deviceMemory || 'Unknown',\n    maxTouchPoints: navigator.maxTouchPoints || 0,\n    onLine: navigator.onLine,\n    cookieEnabled: navigator.cookieEnabled,\n    language: navigator.language,\n    memoryInfo: (performance as any).memory ? {\n      usedJSHeapSize: (performance as any).memory.usedJSHeapSize,\n      totalJSHeapSize: (performance as any).memory.totalJSHeapSize,\n      jsHeapSizeLimit: (performance as any).memory.jsHeapSizeLimit\n    } : 'Not available'\n  };\n  \n  console.log('🖥️ Hardware Info:', info);\n  return info;\n};\n\nexport const runPerformanceDiagnostics = async () => {\n  console.log('🔍 Running performance diagnostics...');\n  \n  // Get hardware info\n  const hardwareInfo = getHardwareInfo();\n  \n  // Test JSON loading\n  const testResult = await testJSONLoading();\n  \n  // Analyze results\n  const analysis = {\n    hardwareInfo,\n    testResult,\n    recommendations: [] as string[]\n  };\n  \n  if (testResult.jsonLoadTime > 5000) {\n    analysis.recommendations.push('JSON loading is slow (>5s) - consider using smaller batches');\n  }\n  \n  if (testResult.trackProcessingTime > 3000) {\n    analysis.recommendations.push('Track processing is slow (>3s) - consider optimizing processing logic');\n  }\n  \n  if (testResult.totalTime > 10000) {\n    analysis.recommendations.push('Total loading time is very slow (>10s) - consider lazy loading');\n  }\n  \n  if (hardwareInfo.hardwareConcurrency && hardwareInfo.hardwareConcurrency < 4) {\n    analysis.recommendations.push('Low CPU cores detected - consider reducing batch sizes');\n  }\n  \n  if (hardwareInfo.deviceMemory && hardwareInfo.deviceMemory < 4) {\n    analysis.recommendations.push('Low device memory detected - consider memory optimization');\n  }\n  \n  console.log('📋 Performance Analysis:', analysis);\n  return analysis;\n};\n\n"],"mappings":"AAAA;;AAYA,OAAO,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAA4C;EACzE,MAAMC,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;EACnC,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,mBAAmB,GAAG,CAAC;EAC3B,IAAIC,eAAe,GAAG,CAAC;EACvB,IAAIC,KAAyB;EAE7B,IAAI;IAAA,IAAAC,OAAA;IACFC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;;IAE9C;IACA,MAAMC,SAAS,GAAGT,WAAW,CAACC,GAAG,CAAC,CAAC;IACnC;IACAC,YAAY,GAAGF,WAAW,CAACC,GAAG,CAAC,CAAC,GAAGQ,SAAS;IAE5CF,OAAO,CAACC,GAAG,CAAC,mCAAmCN,YAAY,CAACQ,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IAC3EH,OAAO,CAACC,GAAG,CAAC,gBAAgBJ,eAAe,sBAAsB,CAAC;;IAElE;IACA;IACA,MAAMO,eAAe,GAAGX,WAAW,CAACC,GAAG,CAAC,CAAC;IACzCG,eAAe,GAAG,EAAE,CAAC,CAAC;;IAEtB;IACAQ,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,KAAa,MAAM;MAChDC,EAAE,EAAE,aAAaD,KAAK,EAAE;MACxBE,KAAK,EAAE,sBAAsBF,KAAK,GAAG,CAAC,EAAE;MACxCG,MAAM,EAAE,QAAQH,KAAK,EAAE;MACvB;MACAI,SAAS,EAAE;IACb,CAAC,CAAC,CAAC;IAEHjB,mBAAmB,GAAGH,WAAW,CAACC,GAAG,CAAC,CAAC,GAAGU,eAAe;IAEzDJ,OAAO,CAACC,GAAG,CAAC,eAAeJ,eAAe,cAAcD,mBAAmB,CAACO,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IAE3F,OAAO;MACLR,YAAY;MACZC,mBAAmB;MACnBkB,WAAW,EAAE,EAAAf,OAAA,GAACN,WAAW,CAASsB,MAAM,cAAAhB,OAAA,uBAA3BA,OAAA,CAA6BiB,cAAc,KAAI,CAAC;MAC7DC,SAAS,EAAExB,WAAW,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;MACxC0B,OAAO,EAAE,IAAI;MACbrB;IACF,CAAC;EAEH,CAAC,CAAC,OAAOsB,GAAG,EAAE;IAAA,IAAAC,QAAA;IACZtB,KAAK,GAAGqB,GAAG,YAAYE,KAAK,GAAGF,GAAG,CAACG,OAAO,GAAG,eAAe;IAC5DtB,OAAO,CAACF,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAElD,OAAO;MACLH,YAAY;MACZC,mBAAmB;MACnBkB,WAAW,EAAE,EAAAM,QAAA,GAAC3B,WAAW,CAASsB,MAAM,cAAAK,QAAA,uBAA3BA,QAAA,CAA6BJ,cAAc,KAAI,CAAC;MAC7DC,SAAS,EAAExB,WAAW,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;MACxC0B,OAAO,EAAE,KAAK;MACdpB,KAAK;MACLD;IACF,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAM0B,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMC,IAAI,GAAG;IACXC,SAAS,EAAEC,SAAS,CAACD,SAAS;IAC9BE,QAAQ,EAAED,SAAS,CAACC,QAAQ;IAC5BC,mBAAmB,EAAEF,SAAS,CAACE,mBAAmB,IAAI,SAAS;IAC/DC,YAAY,EAAGH,SAAS,CAASG,YAAY,IAAI,SAAS;IAC1DC,cAAc,EAAEJ,SAAS,CAACI,cAAc,IAAI,CAAC;IAC7CC,MAAM,EAAEL,SAAS,CAACK,MAAM;IACxBC,aAAa,EAAEN,SAAS,CAACM,aAAa;IACtCC,QAAQ,EAAEP,SAAS,CAACO,QAAQ;IAC5BC,UAAU,EAAGzC,WAAW,CAASsB,MAAM,GAAG;MACxCC,cAAc,EAAGvB,WAAW,CAASsB,MAAM,CAACC,cAAc;MAC1DmB,eAAe,EAAG1C,WAAW,CAASsB,MAAM,CAACoB,eAAe;MAC5DC,eAAe,EAAG3C,WAAW,CAASsB,MAAM,CAACqB;IAC/C,CAAC,GAAG;EACN,CAAC;EAEDpC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEuB,IAAI,CAAC;EACvC,OAAOA,IAAI;AACb,CAAC;AAED,OAAO,MAAMa,yBAAyB,GAAG,MAAAA,CAAA,KAAY;EACnDrC,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;;EAEpD;EACA,MAAMqC,YAAY,GAAGf,eAAe,CAAC,CAAC;;EAEtC;EACA,MAAMgB,UAAU,GAAG,MAAMhD,eAAe,CAAC,CAAC;;EAE1C;EACA,MAAMiD,QAAQ,GAAG;IACfF,YAAY;IACZC,UAAU;IACVE,eAAe,EAAE;EACnB,CAAC;EAED,IAAIF,UAAU,CAAC5C,YAAY,GAAG,IAAI,EAAE;IAClC6C,QAAQ,CAACC,eAAe,CAACC,IAAI,CAAC,6DAA6D,CAAC;EAC9F;EAEA,IAAIH,UAAU,CAAC3C,mBAAmB,GAAG,IAAI,EAAE;IACzC4C,QAAQ,CAACC,eAAe,CAACC,IAAI,CAAC,uEAAuE,CAAC;EACxG;EAEA,IAAIH,UAAU,CAACtB,SAAS,GAAG,KAAK,EAAE;IAChCuB,QAAQ,CAACC,eAAe,CAACC,IAAI,CAAC,gEAAgE,CAAC;EACjG;EAEA,IAAIJ,YAAY,CAACV,mBAAmB,IAAIU,YAAY,CAACV,mBAAmB,GAAG,CAAC,EAAE;IAC5EY,QAAQ,CAACC,eAAe,CAACC,IAAI,CAAC,wDAAwD,CAAC;EACzF;EAEA,IAAIJ,YAAY,CAACT,YAAY,IAAIS,YAAY,CAACT,YAAY,GAAG,CAAC,EAAE;IAC9DW,QAAQ,CAACC,eAAe,CAACC,IAAI,CAAC,2DAA2D,CAAC;EAC5F;EAEA1C,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEuC,QAAQ,CAAC;EACjD,OAAOA,QAAQ;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _env;\n// Suno.ai API Configuration\nconst SUNO_API_KEY = ((_env = import.meta.env) === null || _env === void 0 ? void 0 : _env.VITE_SUNO_API_KEY) || process.env.REACT_APP_SUNO_API_KEY;\nconst SUNO_API_BASE = 'https://api.sunoapi.org/api/v1';\n\n// Rich, styled prompt templates for different streaming categories\nconst CATEGORY_PROMPTS = {\n  stream_starting_soon: [\"Upbeat electronic with driving synths, fast tempo (140-160 BPM), exciting energy, perfect for stream countdowns. Include build-ups and positive vibes for audience anticipation.\", \"Energetic gaming intro music with modern electronic beats, festival-style drops, and euphoric melodies. High-energy track designed to get viewers hyped for the stream.\", \"Epic orchestral intro music with cinematic strings, powerful brass, and dramatic percussion. Builds excitement and sets the stage for an amazing stream experience.\"],\n  chill_gaming: [\"Lo-fi hip hop with mellow beats, warm piano, smooth bass, and vinyl crackle. Relaxed mood (70-85 BPM) with jazzy samples, perfect for casual gaming sessions.\", \"Ambient electronic music with soft pads, gentle arpeggios, and atmospheric textures. Peaceful and non-distracting, creates a calm gaming environment.\", \"Calm acoustic guitar with soft electronic elements, fingerpicking patterns, and subtle percussion. Organic feel with modern touches for relaxed gaming.\"],\n  gaming_action: [\"Intense electronic music with heavy bass, aggressive synths, and driving percussion. High energy (150-170 BPM) with drops and build-ups for action gaming scenes.\", \"Epic orchestral battle music with dramatic percussion, choirs, and intense cinematic build-ups. Powerful brass and strings for competitive gaming moments.\", \"Fast-paced electronic beats with aggressive drums, distorted bass, and energetic melodies. Designed for high-intensity gaming and competitive play.\"],\n  hype_raid: [\"Energetic EDM with heavy bass drops, festival-style synths, and euphoric melodies. High-energy vibe (140-160 BPM) perfect for raid celebrations and hype moments.\", \"Epic orchestral music with dramatic percussion, choirs, and cinematic build-ups. Designed to create excitement and celebration during raid events.\", \"High-energy electronic beats with powerful drops, uplifting melodies, and driving rhythms. Perfect for creating hype and energy during raid moments.\"],\n  break_brb: [\"Calm ambient with soft pads, light piano, and gentle textures. Very low tempo (60-75 BPM), peaceful intermission atmosphere with subtle movement.\", \"Soft instrumental music with gentle strings, light percussion, and warm tones. Soothing and non-intrusive, perfect for break screens and BRB moments.\", \"Chill electronic music with ambient pads, soft arpeggios, and minimal percussion. Quiet and non-intrusive, creates a peaceful break atmosphere.\"],\n  talk_show: [\"Light jazz with upright bass, soft drums, and piano. Conversational and background-friendly (80-100 BPM), sophisticated but not distracting.\", \"Soft instrumental music with gentle guitar, light percussion, and warm tones. Professional and unobtrusive, perfect for discussions and interviews.\", \"Ambient electronic music with subtle textures, soft pads, and minimal percussion. Background-friendly with sophisticated atmosphere for talk shows.\"],\n  intro_outro: [\"Epic synthwave with powerful intro build, strong melodies, and dramatic outro fade. Stream branding style with memorable hooks and professional production.\", \"Modern electronic intro/outro music with energetic beats, powerful bass, and catchy melodies. Professional and engaging for stream branding.\", \"Classic rock-inspired intro/outro music with powerful guitars, driving drums, and strong vocals. Engaging and memorable for stream identity.\"],\n  boss_battle: [\"Intense orchestral boss battle music with dramatic percussion, choirs, and cinematic build-ups. Dark and powerful atmosphere for epic boss fights.\", \"Epic electronic boss battle music with heavy bass, aggressive synths, and dramatic drops. High energy and intense for challenging boss encounters.\", \"Dark orchestral music with ominous strings, powerful percussion, and dramatic brass. Creates tension and excitement for boss battle moments.\"],\n  intermission: [\"Calm instrumental intermission music with soft strings, gentle piano, and light percussion. Peaceful and relaxing for smooth transitions.\", \"Soft electronic intermission music with ambient pads, gentle arpeggios, and minimal beats. Atmospheric and unobtrusive for intermission periods.\", \"Chill acoustic intermission music with fingerpicked guitar, soft percussion, and warm tones. Organic and peaceful for transition moments.\"],\n  background_chat: [\"Very quiet ambient soundscape with subtle textures, soft pads, and minimal movement. Extremely low volume background music that doesn't interfere with chat.\", \"Soft instrumental background music with gentle piano, light strings, and minimal percussion. Barely audible but adds atmosphere to chat sessions.\", \"Gentle electronic background music with ambient textures, soft arpeggios, and minimal beats. Non-distracting background music for chat-focused content.\"]\n};\n\n// Fallback prompt for unmapped categories\nconst GENERIC_SAFE_PROMPT = \"DMCA-safe background music suitable for streaming. Gentle instrumental with soft melodies, non-distracting and platform-compliant.\";\n\n// Legacy prompts for backward compatibility (deprecated)\nconst GENERATION_PROMPTS = CATEGORY_PROMPTS;\n\n// Category prompts interface for type safety\n\n// Suno.ai API response interface\n\n// Generation request interface\n\nclass SunoService {\n  constructor() {\n    this.apiKey = void 0;\n    this.isInitialized = false;\n    this.apiKey = SUNO_API_KEY || '';\n    this.isInitialized = !!this.apiKey;\n    if (!this.isInitialized) {\n      console.log('‚ÑπÔ∏è Suno.ai API key not found - using demo mode with sample tracks');\n      console.log('üí° To enable AI music generation, set REACT_APP_SUNO_API_KEY environment variable');\n      console.log('üîó Get your API key at: https://suno.ai/');\n    }\n  }\n\n  // Initialize the service\n  async initialize() {\n    if (!this.apiKey) {\n      console.log('‚ÑπÔ∏è Suno.ai API key not available - running in demo mode');\n      console.log('üéµ You can still use sample tracks and test the interface');\n      return false;\n    }\n    try {\n      // Test API connection with proper endpoint\n      const response = await fetch(`${SUNO_API_BASE}/generate`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: \"Test connection - simple instrumental music\",\n          customMode: false,\n          instrumental: true,\n          model: \"V4\"\n        })\n      });\n      if (response.status === 401) {\n        console.error('‚ùå Suno API authentication failed ‚Äî check your API key and Bearer header');\n        return false;\n      }\n      if (response.ok) {\n        console.log('‚úÖ Suno.ai API connection successful');\n        this.isInitialized = true;\n        return true;\n      } else {\n        console.error(`‚ùå Suno.ai API connection failed: ${response.status} ${response.statusText}`);\n        return false;\n      }\n    } catch (error) {\n      console.error('‚ùå Suno.ai API connection error:', error);\n      return false;\n    }\n  }\n\n  // Generate a new track\n  async generateTrack(request) {\n    if (!this.isInitialized) {\n      throw new Error('Suno.ai API key required for track generation. Set REACT_APP_SUNO_API_KEY to enable AI music creation.');\n    }\n    try {\n      console.log('üéµ Generating track with Suno.ai:', request.prompt);\n      const response = await fetch(`${SUNO_API_BASE}/generate`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: request.prompt,\n          customMode: false,\n          instrumental: true,\n          model: \"V4\"\n        })\n      });\n      if (response.status === 401) {\n        console.error('‚ùå Suno API authentication failed ‚Äî check your API key and Bearer header');\n        throw new Error('Authentication failed - check API key');\n      }\n      if (!response.ok) {\n        throw new Error(`Suno.ai API error: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      console.log('üéµ Track generation started:', result.id);\n      return result;\n    } catch (error) {\n      console.error('‚ùå Track generation failed:', error);\n      throw error;\n    }\n  }\n\n  // Check generation status\n  async checkGenerationStatus(generationId) {\n    if (!this.isInitialized) {\n      throw new Error('Suno.ai API key required for status checking. Set REACT_APP_SUNO_API_KEY to enable AI music features.');\n    }\n    try {\n      const response = await fetch(`${SUNO_API_BASE}/generations/${generationId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Suno.ai API error: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('‚ùå Status check failed:', error);\n      throw error;\n    }\n  }\n\n  // Wait for generation to complete\n  async waitForGeneration(generationId, maxWaitTime = 300000) {\n    const startTime = Date.now();\n    while (Date.now() - startTime < maxWaitTime) {\n      const status = await this.checkGenerationStatus(generationId);\n      if (status.status === 'completed') {\n        console.log('‚úÖ Track generation completed:', generationId);\n        return status;\n      } else if (status.status === 'failed') {\n        throw new Error(`Track generation failed: ${status.error}`);\n      }\n\n      // Wait 5 seconds before checking again\n      await new Promise(resolve => setTimeout(resolve, 5000));\n    }\n    throw new Error('Track generation timeout');\n  }\n\n  // Generate track for a specific category\n  async generateTrackForCategory(category, mood, genre) {\n    var _result$metadata, _result$metadata2;\n    // Get styled prompts for the category, with fallback to generic safe prompt\n    const prompts = getPromptsForCategory(category);\n\n    // Select a random styled prompt for variety\n    const prompt = prompts[Math.floor(Math.random() * prompts.length)];\n    const request = {\n      prompt,\n      category,\n      mood,\n      genre,\n      duration: this.getDurationForCategory(category)\n    };\n    console.log('üéµ Generating track for category:', category);\n    console.log('üéµ Prompt:', prompt);\n    const generation = await this.generateTrack(request);\n    const result = await this.waitForGeneration(generation.id);\n    if (!result.audio_url) {\n      throw new Error('No audio URL in generation result');\n    }\n\n    // Create a StreamingTrack from the generated audio\n    const track = {\n      id: `suno_${generation.id}`,\n      title: this.generateTitle(category, mood, genre),\n      artist: `AI-generated track by Suno.ai - ${prompt}`,\n      duration: ((_result$metadata = result.metadata) === null || _result$metadata === void 0 ? void 0 : _result$metadata.duration) || 180,\n      audioUrl: result.audio_url,\n      category: 'chill-gaming',\n      // Default category\n      subcategory: 'ambient',\n      // Default subcategory\n      mood: mood,\n      energy: this.getEnergyLevelForCategory(category) === 'high' ? 4 : this.getEnergyLevelForCategory(category) === 'medium' ? 3 : 2,\n      tags: ((_result$metadata2 = result.metadata) === null || _result$metadata2 === void 0 ? void 0 : _result$metadata2.tags) || [category, mood, genre],\n      streamSafe: true,\n      loopFriendly: true,\n      hasIntro: false,\n      hasOutro: false,\n      uploadDate: new Date().toISOString(),\n      uploadedBy: 'system',\n      approved: true,\n      featured: false,\n      // Legacy fields for backward compatibility\n      streamingCategory: category,\n      energyLevel: this.getEnergyLevelForCategory(category),\n      genre: genre,\n      dmcaSafe: true,\n      vodSafe: true,\n      license: 'royalty_free',\n      licenseDetails: 'AI-generated music by Suno.ai - Royalty-free for commercial use',\n      platformCompliance: {\n        twitch: 'safe',\n        youtube: 'safe',\n        facebook: 'safe',\n        tiktok: 'safe'\n      },\n      usageTracking: {\n        usageCount: 0\n      },\n      agencyNotes: 'AI-generated track - DMCA safe for all platforms'\n    };\n    return track;\n  }\n\n  // Generate multiple tracks for a category\n  async generateTracksForCategory(category, count = 5) {\n    const tracks = [];\n    const moods = ['chill', 'energetic', 'epic', 'peaceful', 'mysterious'];\n    const genres = ['electronic', 'orchestral', 'ambient', 'acoustic', 'cinematic'];\n    for (let i = 0; i < count; i++) {\n      try {\n        const mood = moods[i % moods.length];\n        const genre = genres[i % genres.length];\n        const track = await this.generateTrackForCategory(category, mood, genre);\n        tracks.push(track);\n        console.log(`‚úÖ Generated track ${i + 1}/${count}: ${track.title}`);\n\n        // Wait between generations to avoid rate limits\n        if (i < count - 1) {\n          await new Promise(resolve => setTimeout(resolve, 10000)); // 10 second delay\n        }\n      } catch (error) {\n        console.error(`‚ùå Failed to generate track ${i + 1}:`, error);\n      }\n    }\n    return tracks;\n  }\n\n  // Generate a complete library for all categories\n  async generateCompleteLibrary(tracksPerCategory = 3) {\n    const allTracks = [];\n    const categories = Object.keys(CATEGORY_PROMPTS);\n    console.log(`üéµ Generating complete library: ${categories.length} categories √ó ${tracksPerCategory} tracks`);\n    for (const category of categories) {\n      try {\n        console.log(`üéµ Generating tracks for category: ${category}`);\n        const categoryTracks = await this.generateTracksForCategory(category, tracksPerCategory);\n        allTracks.push(...categoryTracks);\n        console.log(`‚úÖ Generated ${categoryTracks.length} tracks for ${category}`);\n\n        // Wait between categories\n        await new Promise(resolve => setTimeout(resolve, 30000)); // 30 second delay\n      } catch (error) {\n        console.error(`‚ùå Failed to generate tracks for category ${category}:`, error);\n      }\n    }\n    console.log(`‚úÖ Complete library generated: ${allTracks.length} tracks`);\n    return allTracks;\n  }\n\n  // Helper methods\n  getDurationForCategory(category) {\n    const durations = {\n      stream_starting_soon: 180,\n      // 3 minutes\n      intro_outro: 120,\n      // 2 minutes\n      break_brb: 180,\n      // 3 minutes\n      intermission: 180,\n      // 3 minutes\n      background_chat: 300,\n      // 5 minutes\n      chill_gaming: 300,\n      // 5 minutes\n      gaming_action: 240,\n      // 4 minutes\n      hype_raid: 180,\n      // 3 minutes\n      talk_show: 300,\n      // 5 minutes\n      boss_battle: 240 // 4 minutes\n    };\n    return durations[category] || 180;\n  }\n  getEnergyLevelForCategory(category) {\n    const highEnergy = ['gaming_action', 'hype_raid', 'boss_battle', 'intro_outro'];\n    const lowEnergy = ['chill_gaming', 'break_brb', 'intermission', 'background_chat', 'talk_show'];\n    if (highEnergy.includes(category)) return 'high';\n    if (lowEnergy.includes(category)) return 'low';\n    return 'medium';\n  }\n  formatDuration(seconds) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  }\n  generateTitle(category, mood, genre) {\n    const categoryNames = {\n      stream_starting_soon: 'Stream Starting Soon',\n      chill_gaming: 'Chill Gaming',\n      gaming_action: 'Gaming Action',\n      hype_raid: 'Hype Raid',\n      break_brb: 'Break/BRB',\n      talk_show: 'Talk Show',\n      intro_outro: 'Intro/Outro',\n      boss_battle: 'Boss Battle',\n      intermission: 'Intermission',\n      background_chat: 'Background Chat'\n    };\n    const categoryName = categoryNames[category] || category;\n    return `${categoryName} - ${mood.charAt(0).toUpperCase() + mood.slice(1)} ${genre.charAt(0).toUpperCase() + genre.slice(1)}`;\n  }\n\n  // Get service status\n  getStatus() {\n    return {\n      initialized: this.isInitialized,\n      hasApiKey: !!this.apiKey\n    };\n  }\n  isDemoMode() {\n    return !this.isInitialized;\n  }\n  getDemoMessage() {\n    if (this.isDemoMode()) {\n      return 'üéµ Demo Mode: Set REACT_APP_SUNO_API_KEY to enable AI music generation';\n    }\n    return '';\n  }\n}\n\n// Export singleton instance\nconst sunoService = new SunoService();\nexport default sunoService;\n\n// Helper function to get prompts with fallback\nconst getPromptsForCategory = category => {\n  const prompts = CATEGORY_PROMPTS[category];\n  if (prompts && prompts.length > 0) {\n    return prompts;\n  }\n  console.warn(`‚ö†Ô∏è Category \"${category}\" not found in CATEGORY_PROMPTS, using generic safe prompt`);\n  return [GENERIC_SAFE_PROMPT];\n};\n\n// Streaming categories for compatibility\nexport const STREAMING_CATEGORIES = {\n  STREAM_STARTING_SOON: 'stream_starting_soon',\n  CHILL_GAMING: 'chill_gaming',\n  GAMING_ACTION: 'gaming_action',\n  HYPE_RAID: 'hype_raid',\n  BREAK_BRB: 'break_brb',\n  TALK_SHOW: 'talk_show',\n  INTRO_OUTRO: 'intro_outro',\n  BOSS_BATTLE: 'boss_battle',\n  INTERMISSION: 'intermission',\n  BACKGROUND_CHAT: 'background_chat'\n};\n\n// Get all available streaming categories\nexport const getStreamingCategories = () => {\n  return Object.values(STREAMING_CATEGORIES);\n};\n\n// Get display name for category\nexport const getCategoryDisplayName = category => {\n  const displayNames = {\n    stream_starting_soon: 'Stream Starting Soon',\n    chill_gaming: 'Chill Gaming',\n    gaming_action: 'Gaming Action',\n    hype_raid: 'Hype Raid',\n    break_brb: 'Break/BRB',\n    talk_show: 'Talk Show',\n    intro_outro: 'Intro/Outro',\n    boss_battle: 'Boss Battle',\n    intermission: 'Intermission',\n    background_chat: 'Background Chat'\n  };\n  return displayNames[category] || category;\n};\n\n// Export types and constants\nexport { CATEGORY_PROMPTS, GENERIC_SAFE_PROMPT, GENERATION_PROMPTS,\n// Legacy export for backward compatibility\ngetPromptsForCategory };","map":{"version":3,"names":["SUNO_API_KEY","_env","import","meta","env","VITE_SUNO_API_KEY","process","REACT_APP_SUNO_API_KEY","SUNO_API_BASE","CATEGORY_PROMPTS","stream_starting_soon","chill_gaming","gaming_action","hype_raid","break_brb","talk_show","intro_outro","boss_battle","intermission","background_chat","GENERIC_SAFE_PROMPT","GENERATION_PROMPTS","SunoService","constructor","apiKey","isInitialized","console","log","initialize","response","fetch","method","headers","body","JSON","stringify","prompt","customMode","instrumental","model","status","error","ok","statusText","generateTrack","request","Error","result","json","id","checkGenerationStatus","generationId","waitForGeneration","maxWaitTime","startTime","Date","now","Promise","resolve","setTimeout","generateTrackForCategory","category","mood","genre","_result$metadata","_result$metadata2","prompts","getPromptsForCategory","Math","floor","random","length","duration","getDurationForCategory","generation","audio_url","track","title","generateTitle","artist","metadata","audioUrl","subcategory","energy","getEnergyLevelForCategory","tags","streamSafe","loopFriendly","hasIntro","hasOutro","uploadDate","toISOString","uploadedBy","approved","featured","streamingCategory","energyLevel","dmcaSafe","vodSafe","license","licenseDetails","platformCompliance","twitch","youtube","facebook","tiktok","usageTracking","usageCount","agencyNotes","generateTracksForCategory","count","tracks","moods","genres","i","push","generateCompleteLibrary","tracksPerCategory","allTracks","categories","Object","keys","categoryTracks","durations","highEnergy","lowEnergy","includes","formatDuration","seconds","minutes","remainingSeconds","toString","padStart","categoryNames","categoryName","charAt","toUpperCase","slice","getStatus","initialized","hasApiKey","isDemoMode","getDemoMessage","sunoService","warn","STREAMING_CATEGORIES","STREAM_STARTING_SOON","CHILL_GAMING","GAMING_ACTION","HYPE_RAID","BREAK_BRB","TALK_SHOW","INTRO_OUTRO","BOSS_BATTLE","INTERMISSION","BACKGROUND_CHAT","getStreamingCategories","values","getCategoryDisplayName","displayNames"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/services/sunoService.ts"],"sourcesContent":["import { StreamingTrack } from '../types/track';\n\n// Suno.ai API Configuration\nconst SUNO_API_KEY = (import.meta as any).env?.VITE_SUNO_API_KEY || process.env.REACT_APP_SUNO_API_KEY;\nconst SUNO_API_BASE = 'https://api.sunoapi.org/api/v1';\n\n// Rich, styled prompt templates for different streaming categories\nconst CATEGORY_PROMPTS: CategoryPrompts = {\n  stream_starting_soon: [\n    \"Upbeat electronic with driving synths, fast tempo (140-160 BPM), exciting energy, perfect for stream countdowns. Include build-ups and positive vibes for audience anticipation.\",\n    \"Energetic gaming intro music with modern electronic beats, festival-style drops, and euphoric melodies. High-energy track designed to get viewers hyped for the stream.\",\n    \"Epic orchestral intro music with cinematic strings, powerful brass, and dramatic percussion. Builds excitement and sets the stage for an amazing stream experience.\"\n  ],\n  chill_gaming: [\n    \"Lo-fi hip hop with mellow beats, warm piano, smooth bass, and vinyl crackle. Relaxed mood (70-85 BPM) with jazzy samples, perfect for casual gaming sessions.\",\n    \"Ambient electronic music with soft pads, gentle arpeggios, and atmospheric textures. Peaceful and non-distracting, creates a calm gaming environment.\",\n    \"Calm acoustic guitar with soft electronic elements, fingerpicking patterns, and subtle percussion. Organic feel with modern touches for relaxed gaming.\"\n  ],\n  gaming_action: [\n    \"Intense electronic music with heavy bass, aggressive synths, and driving percussion. High energy (150-170 BPM) with drops and build-ups for action gaming scenes.\",\n    \"Epic orchestral battle music with dramatic percussion, choirs, and intense cinematic build-ups. Powerful brass and strings for competitive gaming moments.\",\n    \"Fast-paced electronic beats with aggressive drums, distorted bass, and energetic melodies. Designed for high-intensity gaming and competitive play.\"\n  ],\n  hype_raid: [\n    \"Energetic EDM with heavy bass drops, festival-style synths, and euphoric melodies. High-energy vibe (140-160 BPM) perfect for raid celebrations and hype moments.\",\n    \"Epic orchestral music with dramatic percussion, choirs, and cinematic build-ups. Designed to create excitement and celebration during raid events.\",\n    \"High-energy electronic beats with powerful drops, uplifting melodies, and driving rhythms. Perfect for creating hype and energy during raid moments.\"\n  ],\n  break_brb: [\n    \"Calm ambient with soft pads, light piano, and gentle textures. Very low tempo (60-75 BPM), peaceful intermission atmosphere with subtle movement.\",\n    \"Soft instrumental music with gentle strings, light percussion, and warm tones. Soothing and non-intrusive, perfect for break screens and BRB moments.\",\n    \"Chill electronic music with ambient pads, soft arpeggios, and minimal percussion. Quiet and non-intrusive, creates a peaceful break atmosphere.\"\n  ],\n  talk_show: [\n    \"Light jazz with upright bass, soft drums, and piano. Conversational and background-friendly (80-100 BPM), sophisticated but not distracting.\",\n    \"Soft instrumental music with gentle guitar, light percussion, and warm tones. Professional and unobtrusive, perfect for discussions and interviews.\",\n    \"Ambient electronic music with subtle textures, soft pads, and minimal percussion. Background-friendly with sophisticated atmosphere for talk shows.\"\n  ],\n  intro_outro: [\n    \"Epic synthwave with powerful intro build, strong melodies, and dramatic outro fade. Stream branding style with memorable hooks and professional production.\",\n    \"Modern electronic intro/outro music with energetic beats, powerful bass, and catchy melodies. Professional and engaging for stream branding.\",\n    \"Classic rock-inspired intro/outro music with powerful guitars, driving drums, and strong vocals. Engaging and memorable for stream identity.\"\n  ],\n  boss_battle: [\n    \"Intense orchestral boss battle music with dramatic percussion, choirs, and cinematic build-ups. Dark and powerful atmosphere for epic boss fights.\",\n    \"Epic electronic boss battle music with heavy bass, aggressive synths, and dramatic drops. High energy and intense for challenging boss encounters.\",\n    \"Dark orchestral music with ominous strings, powerful percussion, and dramatic brass. Creates tension and excitement for boss battle moments.\"\n  ],\n  intermission: [\n    \"Calm instrumental intermission music with soft strings, gentle piano, and light percussion. Peaceful and relaxing for smooth transitions.\",\n    \"Soft electronic intermission music with ambient pads, gentle arpeggios, and minimal beats. Atmospheric and unobtrusive for intermission periods.\",\n    \"Chill acoustic intermission music with fingerpicked guitar, soft percussion, and warm tones. Organic and peaceful for transition moments.\"\n  ],\n  background_chat: [\n    \"Very quiet ambient soundscape with subtle textures, soft pads, and minimal movement. Extremely low volume background music that doesn't interfere with chat.\",\n    \"Soft instrumental background music with gentle piano, light strings, and minimal percussion. Barely audible but adds atmosphere to chat sessions.\",\n    \"Gentle electronic background music with ambient textures, soft arpeggios, and minimal beats. Non-distracting background music for chat-focused content.\"\n  ]\n};\n\n// Fallback prompt for unmapped categories\nconst GENERIC_SAFE_PROMPT = \"DMCA-safe background music suitable for streaming. Gentle instrumental with soft melodies, non-distracting and platform-compliant.\";\n\n// Legacy prompts for backward compatibility (deprecated)\nconst GENERATION_PROMPTS = CATEGORY_PROMPTS;\n\n// Category prompts interface for type safety\ninterface CategoryPrompts {\n  [category: string]: string[];\n}\n\n// Suno.ai API response interface\ninterface SunoGenerationResponse {\n  id: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  audio_url?: string;\n  metadata?: {\n    prompt: string;\n    duration: number;\n    tags: string[];\n  };\n  error?: string;\n}\n\n// Generation request interface\ninterface GenerationRequest {\n  prompt: string;\n  duration?: number; // in seconds\n  tags?: string[];\n  category: string;\n  mood: string;\n  genre: string;\n}\n\nclass SunoService {\n  private apiKey: string;\n  private isInitialized: boolean = false;\n\n  constructor() {\n    this.apiKey = SUNO_API_KEY || '';\n    this.isInitialized = !!this.apiKey;\n    \n    if (!this.isInitialized) {\n      console.log('‚ÑπÔ∏è Suno.ai API key not found - using demo mode with sample tracks');\n      console.log('üí° To enable AI music generation, set REACT_APP_SUNO_API_KEY environment variable');\n      console.log('üîó Get your API key at: https://suno.ai/');\n    }\n  }\n\n  // Initialize the service\n  async initialize(): Promise<boolean> {\n    if (!this.apiKey) {\n      console.log('‚ÑπÔ∏è Suno.ai API key not available - running in demo mode');\n      console.log('üéµ You can still use sample tracks and test the interface');\n      return false;\n    }\n\n    try {\n      // Test API connection with proper endpoint\n      const response = await fetch(`${SUNO_API_BASE}/generate`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: \"Test connection - simple instrumental music\",\n          customMode: false,\n          instrumental: true,\n          model: \"V4\"\n        })\n      });\n\n      if (response.status === 401) {\n        console.error('‚ùå Suno API authentication failed ‚Äî check your API key and Bearer header');\n        return false;\n      }\n\n      if (response.ok) {\n        console.log('‚úÖ Suno.ai API connection successful');\n        this.isInitialized = true;\n        return true;\n      } else {\n        console.error(`‚ùå Suno.ai API connection failed: ${response.status} ${response.statusText}`);\n        return false;\n      }\n    } catch (error) {\n      console.error('‚ùå Suno.ai API connection error:', error);\n      return false;\n    }\n  }\n\n  // Generate a new track\n  async generateTrack(request: GenerationRequest): Promise<SunoGenerationResponse> {\n    if (!this.isInitialized) {\n      throw new Error('Suno.ai API key required for track generation. Set REACT_APP_SUNO_API_KEY to enable AI music creation.');\n    }\n\n    try {\n      console.log('üéµ Generating track with Suno.ai:', request.prompt);\n\n      const response = await fetch(`${SUNO_API_BASE}/generate`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: request.prompt,\n          customMode: false,\n          instrumental: true,\n          model: \"V4\"\n        })\n      });\n\n      if (response.status === 401) {\n        console.error('‚ùå Suno API authentication failed ‚Äî check your API key and Bearer header');\n        throw new Error('Authentication failed - check API key');\n      }\n\n      if (!response.ok) {\n        throw new Error(`Suno.ai API error: ${response.status} ${response.statusText}`);\n      }\n\n      const result: SunoGenerationResponse = await response.json();\n      console.log('üéµ Track generation started:', result.id);\n      \n      return result;\n    } catch (error) {\n      console.error('‚ùå Track generation failed:', error);\n      throw error;\n    }\n  }\n\n  // Check generation status\n  async checkGenerationStatus(generationId: string): Promise<SunoGenerationResponse> {\n    if (!this.isInitialized) {\n      throw new Error('Suno.ai API key required for status checking. Set REACT_APP_SUNO_API_KEY to enable AI music features.');\n    }\n\n    try {\n      const response = await fetch(`${SUNO_API_BASE}/generations/${generationId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Suno.ai API error: ${response.status} ${response.statusText}`);\n      }\n\n      const result: SunoGenerationResponse = await response.json();\n      return result;\n    } catch (error) {\n      console.error('‚ùå Status check failed:', error);\n      throw error;\n    }\n  }\n\n  // Wait for generation to complete\n  async waitForGeneration(generationId: string, maxWaitTime: number = 300000): Promise<SunoGenerationResponse> {\n    const startTime = Date.now();\n    \n    while (Date.now() - startTime < maxWaitTime) {\n      const status = await this.checkGenerationStatus(generationId);\n      \n      if (status.status === 'completed') {\n        console.log('‚úÖ Track generation completed:', generationId);\n        return status;\n      } else if (status.status === 'failed') {\n        throw new Error(`Track generation failed: ${status.error}`);\n      }\n      \n      // Wait 5 seconds before checking again\n      await new Promise(resolve => setTimeout(resolve, 5000));\n    }\n    \n    throw new Error('Track generation timeout');\n  }\n\n  // Generate track for a specific category\n  async generateTrackForCategory(category: string, mood: string, genre: string): Promise<StreamingTrack> {\n    // Get styled prompts for the category, with fallback to generic safe prompt\n    const prompts = getPromptsForCategory(category);\n    \n    // Select a random styled prompt for variety\n    const prompt = prompts[Math.floor(Math.random() * prompts.length)];\n    \n    const request: GenerationRequest = {\n      prompt,\n      category,\n      mood,\n      genre,\n      duration: this.getDurationForCategory(category)\n    };\n\n    console.log('üéµ Generating track for category:', category);\n    console.log('üéµ Prompt:', prompt);\n\n    const generation = await this.generateTrack(request);\n    const result = await this.waitForGeneration(generation.id);\n\n    if (!result.audio_url) {\n      throw new Error('No audio URL in generation result');\n    }\n\n    // Create a StreamingTrack from the generated audio\n    const track: StreamingTrack = {\n            id: `suno_${generation.id}`,\n      title: this.generateTitle(category, mood, genre),\n      artist: `AI-generated track by Suno.ai - ${prompt}`,\n      duration: result.metadata?.duration || 180,\n      audioUrl: result.audio_url,\n              category: 'chill-gaming', // Default category\n      subcategory: 'ambient', // Default subcategory\n      mood: mood as any,\n      energy: this.getEnergyLevelForCategory(category) === 'high' ? 4 : \n              this.getEnergyLevelForCategory(category) === 'medium' ? 3 : 2,\n      tags: result.metadata?.tags || [category, mood, genre],\n      streamSafe: true,\n      loopFriendly: true,\n      hasIntro: false,\n      hasOutro: false,\n      uploadDate: new Date().toISOString(),\n      uploadedBy: 'system',\n      approved: true,\n      featured: false,\n      // Legacy fields for backward compatibility\n      streamingCategory: category as any,\n      energyLevel: this.getEnergyLevelForCategory(category),\n      genre: genre as any,\n      dmcaSafe: true,\n      vodSafe: true,\n      license: 'royalty_free',\n      licenseDetails: 'AI-generated music by Suno.ai - Royalty-free for commercial use',\n      platformCompliance: {\n        twitch: 'safe',\n        youtube: 'safe',\n        facebook: 'safe',\n        tiktok: 'safe'\n      },\n      usageTracking: {\n        usageCount: 0\n      },\n      agencyNotes: 'AI-generated track - DMCA safe for all platforms'\n    };\n\n    return track;\n  }\n\n  // Generate multiple tracks for a category\n  async generateTracksForCategory(category: string, count: number = 5): Promise<StreamingTrack[]> {\n    const tracks: StreamingTrack[] = [];\n    const moods = ['chill', 'energetic', 'epic', 'peaceful', 'mysterious'];\n    const genres = ['electronic', 'orchestral', 'ambient', 'acoustic', 'cinematic'];\n\n    for (let i = 0; i < count; i++) {\n      try {\n        const mood = moods[i % moods.length];\n        const genre = genres[i % genres.length];\n        \n        const track = await this.generateTrackForCategory(category, mood, genre);\n        tracks.push(track);\n        \n        console.log(`‚úÖ Generated track ${i + 1}/${count}: ${track.title}`);\n        \n        // Wait between generations to avoid rate limits\n        if (i < count - 1) {\n          await new Promise(resolve => setTimeout(resolve, 10000)); // 10 second delay\n        }\n      } catch (error) {\n        console.error(`‚ùå Failed to generate track ${i + 1}:`, error);\n      }\n    }\n\n    return tracks;\n  }\n\n  // Generate a complete library for all categories\n  async generateCompleteLibrary(tracksPerCategory: number = 3): Promise<StreamingTrack[]> {\n    const allTracks: StreamingTrack[] = [];\n    const categories = Object.keys(CATEGORY_PROMPTS);\n\n    console.log(`üéµ Generating complete library: ${categories.length} categories √ó ${tracksPerCategory} tracks`);\n\n    for (const category of categories) {\n      try {\n        console.log(`üéµ Generating tracks for category: ${category}`);\n        const categoryTracks = await this.generateTracksForCategory(category, tracksPerCategory);\n        allTracks.push(...categoryTracks);\n        \n        console.log(`‚úÖ Generated ${categoryTracks.length} tracks for ${category}`);\n        \n        // Wait between categories\n        await new Promise(resolve => setTimeout(resolve, 30000)); // 30 second delay\n      } catch (error) {\n        console.error(`‚ùå Failed to generate tracks for category ${category}:`, error);\n      }\n    }\n\n    console.log(`‚úÖ Complete library generated: ${allTracks.length} tracks`);\n    return allTracks;\n  }\n\n  // Helper methods\n  private getDurationForCategory(category: string): number {\n    const durations: { [key: string]: number } = {\n      stream_starting_soon: 180, // 3 minutes\n      intro_outro: 120, // 2 minutes\n      break_brb: 180, // 3 minutes\n      intermission: 180, // 3 minutes\n      background_chat: 300, // 5 minutes\n      chill_gaming: 300, // 5 minutes\n      gaming_action: 240, // 4 minutes\n      hype_raid: 180, // 3 minutes\n      talk_show: 300, // 5 minutes\n      boss_battle: 240 // 4 minutes\n    };\n    \n    return durations[category] || 180;\n  }\n\n  private getEnergyLevelForCategory(category: string): 'low' | 'medium' | 'high' {\n    const highEnergy = ['gaming_action', 'hype_raid', 'boss_battle', 'intro_outro'];\n    const lowEnergy = ['chill_gaming', 'break_brb', 'intermission', 'background_chat', 'talk_show'];\n    \n    if (highEnergy.includes(category)) return 'high';\n    if (lowEnergy.includes(category)) return 'low';\n    return 'medium';\n  }\n\n  private formatDuration(seconds: number): string {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  }\n\n  private generateTitle(category: string, mood: string, genre: string): string {\n    const categoryNames: { [key: string]: string } = {\n      stream_starting_soon: 'Stream Starting Soon',\n      chill_gaming: 'Chill Gaming',\n      gaming_action: 'Gaming Action',\n      hype_raid: 'Hype Raid',\n      break_brb: 'Break/BRB',\n      talk_show: 'Talk Show',\n      intro_outro: 'Intro/Outro',\n      boss_battle: 'Boss Battle',\n      intermission: 'Intermission',\n      background_chat: 'Background Chat'\n    };\n\n    const categoryName = categoryNames[category] || category;\n    return `${categoryName} - ${mood.charAt(0).toUpperCase() + mood.slice(1)} ${genre.charAt(0).toUpperCase() + genre.slice(1)}`;\n  }\n\n  // Get service status\n  getStatus(): { initialized: boolean; hasApiKey: boolean } {\n    return {\n      initialized: this.isInitialized,\n      hasApiKey: !!this.apiKey\n    };\n  }\n\n  public isDemoMode(): boolean {\n    return !this.isInitialized;\n  }\n\n  public getDemoMessage(): string {\n    if (this.isDemoMode()) {\n      return 'üéµ Demo Mode: Set REACT_APP_SUNO_API_KEY to enable AI music generation';\n    }\n    return '';\n  }\n}\n\n// Export singleton instance\nconst sunoService = new SunoService();\nexport default sunoService;\n\n// Helper function to get prompts with fallback\nconst getPromptsForCategory = (category: string): string[] => {\n  const prompts = CATEGORY_PROMPTS[category];\n  if (prompts && prompts.length > 0) {\n    return prompts;\n  }\n  console.warn(`‚ö†Ô∏è Category \"${category}\" not found in CATEGORY_PROMPTS, using generic safe prompt`);\n  return [GENERIC_SAFE_PROMPT];\n};\n\n// Streaming categories for compatibility\nexport const STREAMING_CATEGORIES = {\n  STREAM_STARTING_SOON: 'stream_starting_soon',\n  CHILL_GAMING: 'chill_gaming',\n  GAMING_ACTION: 'gaming_action',\n  HYPE_RAID: 'hype_raid',\n  BREAK_BRB: 'break_brb',\n  TALK_SHOW: 'talk_show',\n  INTRO_OUTRO: 'intro_outro',\n  BOSS_BATTLE: 'boss_battle',\n  INTERMISSION: 'intermission',\n  BACKGROUND_CHAT: 'background_chat'\n} as const;\n\n// Get all available streaming categories\nexport const getStreamingCategories = () => {\n  return Object.values(STREAMING_CATEGORIES);\n};\n\n// Get display name for category\nexport const getCategoryDisplayName = (category: string): string => {\n  const displayNames: { [key: string]: string } = {\n    stream_starting_soon: 'Stream Starting Soon',\n    chill_gaming: 'Chill Gaming',\n    gaming_action: 'Gaming Action',\n    hype_raid: 'Hype Raid',\n    break_brb: 'Break/BRB',\n    talk_show: 'Talk Show',\n    intro_outro: 'Intro/Outro',\n    boss_battle: 'Boss Battle',\n    intermission: 'Intermission',\n    background_chat: 'Background Chat'\n  };\n  \n  return displayNames[category] || category;\n};\n\n// Export types and constants\nexport {\n  CATEGORY_PROMPTS,\n  GENERIC_SAFE_PROMPT,\n  GENERATION_PROMPTS, // Legacy export for backward compatibility\n  getPromptsForCategory,\n  type SunoGenerationResponse,\n  type GenerationRequest,\n  type CategoryPrompts\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
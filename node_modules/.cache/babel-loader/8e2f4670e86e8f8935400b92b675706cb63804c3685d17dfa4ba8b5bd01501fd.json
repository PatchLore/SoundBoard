{"ast":null,"code":"import { audioController } from './audioController';\nclass DiscordBot {\n  constructor() {\n    this.config = {\n      token: '',\n      clientId: '',\n      guildId: '',\n      prefix: '!',\n      modRoleId: '',\n      enabled: false\n    };\n    this.commands = new Map();\n    this.isConnected = false;\n    this.setupCommands();\n  }\n\n  // Configuration\n  setConfig(config) {\n    this.config = {\n      ...this.config,\n      ...config\n    };\n  }\n  getConfig() {\n    return {\n      ...this.config\n    };\n  }\n\n  // Command System\n  setupCommands() {\n    // Play command\n    this.addCommand({\n      name: 'play',\n      description: 'Play a track by name or ID',\n      usage: '!play <track name or ID>',\n      modOnly: true,\n      execute: async (message, args) => {\n        if (args.length === 0) {\n          await this.reply(message, 'Please specify a track to play. Usage: !play <track name>');\n          return;\n        }\n        await this.reply(message, 'üéµ Play command executed');\n      }\n    });\n\n    // Pause command\n    this.addCommand({\n      name: 'pause',\n      description: 'Pause the current track',\n      usage: '!pause',\n      modOnly: true,\n      execute: async message => {\n        audioController.pause();\n        await this.reply(message, '‚è∏Ô∏è Music paused');\n      }\n    });\n\n    // Resume command\n    this.addCommand({\n      name: 'resume',\n      description: 'Resume the current track',\n      usage: '!resume',\n      modOnly: true,\n      execute: async message => {\n        audioController.resume();\n        await this.reply(message, '‚ñ∂Ô∏è Music resumed');\n      }\n    });\n\n    // Stop command\n    this.addCommand({\n      name: 'stop',\n      description: 'Stop the current track',\n      usage: '!stop',\n      modOnly: true,\n      execute: async message => {\n        audioController.stop();\n        await this.reply(message, '‚èπÔ∏è Music stopped');\n      }\n    });\n\n    // Volume command\n    this.addCommand({\n      name: 'volume',\n      description: 'Set the volume (0-100)',\n      usage: '!volume <0-100>',\n      modOnly: true,\n      execute: async (message, args) => {\n        if (args.length === 0) {\n          const currentVolume = Math.round(audioController.getVolume() * 100);\n          await this.reply(message, `üîä Current volume: **${currentVolume}%**`);\n          return;\n        }\n        const volume = parseInt(args[0]);\n        if (isNaN(volume) || volume < 0 || volume > 100) {\n          await this.reply(message, '‚ùå Please specify a volume between 0 and 100');\n          return;\n        }\n        audioController.setVolume(volume / 100);\n        await this.reply(message, `üîä Volume set to **${volume}%**`);\n      }\n    });\n\n    // Help command\n    this.addCommand({\n      name: 'help',\n      description: 'Show available commands',\n      usage: '!help [command]',\n      modOnly: false,\n      execute: async message => {\n        const commandList = Array.from(this.commands.values()).map(cmd => `**${this.config.prefix}${cmd.name}** - ${cmd.description}`).join('\\n');\n        await this.reply(message, {\n          embeds: [{\n            color: 0x0099ff,\n            title: 'üéµ Music Bot Commands',\n            description: commandList\n          }]\n        });\n      }\n    });\n  }\n  addCommand(command) {\n    this.commands.set(command.name.toLowerCase(), command);\n  }\n\n  // Command Execution\n  async executeCommand(message, content) {\n    var _args$shift;\n    if (!content.startsWith(this.config.prefix)) return;\n    const args = content.slice(this.config.prefix.length).trim().split(/ +/);\n    const commandName = (_args$shift = args.shift()) === null || _args$shift === void 0 ? void 0 : _args$shift.toLowerCase();\n    if (!commandName || !this.commands.has(commandName)) return;\n    const command = this.commands.get(commandName);\n    try {\n      await command.execute(message, args);\n    } catch (error) {\n      console.error(`Error executing command ${commandName}:`, error);\n      await this.reply(message, `‚ùå An error occurred while executing the command`);\n    }\n  }\n\n  // Utility Methods\n  async reply(message, content) {\n    try {\n      if (typeof content === 'string') {\n        await message.reply(content);\n      } else {\n        await message.reply(content);\n      }\n    } catch (error) {\n      console.error('Error replying to message:', error);\n    }\n  }\n\n  // Connection Management\n  async connect() {\n    if (!this.config.enabled || !this.config.token) {\n      console.log('Discord bot not configured or disabled');\n      return false;\n    }\n    try {\n      this.isConnected = true;\n      console.log('Discord bot connected');\n      return true;\n    } catch (error) {\n      console.error('Failed to connect Discord bot:', error);\n      return false;\n    }\n  }\n  disconnect() {\n    this.isConnected = false;\n    console.log('Discord bot disconnected');\n  }\n\n  // Getters\n  isBotConnected() {\n    return this.isConnected;\n  }\n  getCommands() {\n    return new Map(this.commands);\n  }\n\n  // Cleanup\n  destroy() {\n    this.disconnect();\n    this.commands.clear();\n  }\n}\n\n// Export singleton instance\nexport const discordBot = new DiscordBot();","map":{"version":3,"names":["audioController","DiscordBot","constructor","config","token","clientId","guildId","prefix","modRoleId","enabled","commands","Map","isConnected","setupCommands","setConfig","getConfig","addCommand","name","description","usage","modOnly","execute","message","args","length","reply","pause","resume","stop","currentVolume","Math","round","getVolume","volume","parseInt","isNaN","setVolume","commandList","Array","from","values","map","cmd","join","embeds","color","title","command","set","toLowerCase","executeCommand","content","_args$shift","startsWith","slice","trim","split","commandName","shift","has","get","error","console","connect","log","disconnect","isBotConnected","getCommands","destroy","clear","discordBot"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/services/discordBot.ts"],"sourcesContent":["import { audioController } from './audioController';\n\nexport interface DiscordBotConfig {\n  token: string;\n  clientId: string;\n  guildId: string;\n  prefix: string;\n  modRoleId: string;\n  enabled: boolean;\n}\n\nexport interface DiscordCommand {\n  name: string;\n  description: string;\n  usage: string;\n  modOnly: boolean;\n  execute: (message: any, args: string[]) => Promise<void>;\n}\n\nclass DiscordBot {\n  private config: DiscordBotConfig = {\n    token: '',\n    clientId: '',\n    guildId: '',\n    prefix: '!',\n    modRoleId: '',\n    enabled: false\n  };\n  private commands: Map<string, DiscordCommand> = new Map();\n  private isConnected = false;\n\n  constructor() {\n    this.setupCommands();\n  }\n\n  // Configuration\n  setConfig(config: Partial<DiscordBotConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  getConfig(): DiscordBotConfig {\n    return { ...this.config };\n  }\n\n  // Command System\n  private setupCommands(): void {\n    // Play command\n    this.addCommand({\n      name: 'play',\n      description: 'Play a track by name or ID',\n      usage: '!play <track name or ID>',\n      modOnly: true,\n      execute: async (message, args) => {\n        if (args.length === 0) {\n          await this.reply(message, 'Please specify a track to play. Usage: !play <track name>');\n          return;\n        }\n        await this.reply(message, 'üéµ Play command executed');\n      }\n    });\n\n    // Pause command\n    this.addCommand({\n      name: 'pause',\n      description: 'Pause the current track',\n      usage: '!pause',\n      modOnly: true,\n      execute: async (message) => {\n        audioController.pause();\n        await this.reply(message, '‚è∏Ô∏è Music paused');\n      }\n    });\n\n    // Resume command\n    this.addCommand({\n      name: 'resume',\n      description: 'Resume the current track',\n      usage: '!resume',\n      modOnly: true,\n      execute: async (message) => {\n        audioController.resume();\n        await this.reply(message, '‚ñ∂Ô∏è Music resumed');\n      }\n    });\n\n    // Stop command\n    this.addCommand({\n      name: 'stop',\n      description: 'Stop the current track',\n      usage: '!stop',\n      modOnly: true,\n      execute: async (message) => {\n        audioController.stop();\n        await this.reply(message, '‚èπÔ∏è Music stopped');\n      }\n    });\n\n    // Volume command\n    this.addCommand({\n      name: 'volume',\n      description: 'Set the volume (0-100)',\n      usage: '!volume <0-100>',\n      modOnly: true,\n      execute: async (message, args) => {\n        if (args.length === 0) {\n          const currentVolume = Math.round(audioController.getVolume() * 100);\n          await this.reply(message, `üîä Current volume: **${currentVolume}%**`);\n          return;\n        }\n\n        const volume = parseInt(args[0]);\n        if (isNaN(volume) || volume < 0 || volume > 100) {\n          await this.reply(message, '‚ùå Please specify a volume between 0 and 100');\n          return;\n        }\n\n        audioController.setVolume(volume / 100);\n        await this.reply(message, `üîä Volume set to **${volume}%**`);\n      }\n    });\n\n    // Help command\n    this.addCommand({\n      name: 'help',\n      description: 'Show available commands',\n      usage: '!help [command]',\n      modOnly: false,\n      execute: async (message) => {\n        const commandList = Array.from(this.commands.values())\n          .map(cmd => `**${this.config.prefix}${cmd.name}** - ${cmd.description}`)\n          .join('\\n');\n\n        await this.reply(message, {\n          embeds: [{\n            color: 0x0099ff,\n            title: 'üéµ Music Bot Commands',\n            description: commandList\n          }]\n        });\n      }\n    });\n  }\n\n  private addCommand(command: DiscordCommand): void {\n    this.commands.set(command.name.toLowerCase(), command);\n  }\n\n  // Command Execution\n  async executeCommand(message: any, content: string): Promise<void> {\n    if (!content.startsWith(this.config.prefix)) return;\n\n    const args = content.slice(this.config.prefix.length).trim().split(/ +/);\n    const commandName = args.shift()?.toLowerCase();\n\n    if (!commandName || !this.commands.has(commandName)) return;\n\n    const command = this.commands.get(commandName)!;\n    \n    try {\n      await command.execute(message, args);\n    } catch (error) {\n      console.error(`Error executing command ${commandName}:`, error);\n      await this.reply(message, `‚ùå An error occurred while executing the command`);\n    }\n  }\n\n  // Utility Methods\n  private async reply(message: any, content: string | object): Promise<void> {\n    try {\n      if (typeof content === 'string') {\n        await message.reply(content);\n      } else {\n        await message.reply(content);\n      }\n    } catch (error) {\n      console.error('Error replying to message:', error);\n    }\n  }\n\n  // Connection Management\n  async connect(): Promise<boolean> {\n    if (!this.config.enabled || !this.config.token) {\n      console.log('Discord bot not configured or disabled');\n      return false;\n    }\n\n    try {\n      this.isConnected = true;\n      console.log('Discord bot connected');\n      return true;\n    } catch (error) {\n      console.error('Failed to connect Discord bot:', error);\n      return false;\n    }\n  }\n\n  disconnect(): void {\n    this.isConnected = false;\n    console.log('Discord bot disconnected');\n  }\n\n  // Getters\n  isBotConnected(): boolean {\n    return this.isConnected;\n  }\n\n  getCommands(): Map<string, DiscordCommand> {\n    return new Map(this.commands);\n  }\n\n  // Cleanup\n  destroy(): void {\n    this.disconnect();\n    this.commands.clear();\n  }\n}\n\n// Export singleton instance\nexport const discordBot = new DiscordBot();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"class TrackStorageService {\n  constructor() {\n    this.STORAGE_KEYS = {\n      TRACKS: 'suno_tracks',\n      CLIENTS: 'suno_clients',\n      RECENTLY_GENERATED: 'suno_recently_generated',\n      SETTINGS: 'suno_settings'\n    };\n    this.initializeStorage();\n  }\n  initializeStorage() {\n    // Initialize storage if it doesn't exist\n    if (!localStorage.getItem(this.STORAGE_KEYS.TRACKS)) {\n      localStorage.setItem(this.STORAGE_KEYS.TRACKS, JSON.stringify([]));\n    }\n    if (!localStorage.getItem(this.STORAGE_KEYS.CLIENTS)) {\n      localStorage.setItem(this.STORAGE_KEYS.CLIENTS, JSON.stringify([]));\n    }\n    if (!localStorage.getItem(this.STORAGE_KEYS.RECENTLY_GENERATED)) {\n      localStorage.setItem(this.STORAGE_KEYS.RECENTLY_GENERATED, JSON.stringify([]));\n    }\n    if (!localStorage.getItem(this.STORAGE_KEYS.SETTINGS)) {\n      localStorage.setItem(this.STORAGE_KEYS.SETTINGS, JSON.stringify({\n        defaultClient: 'default',\n        autoSave: true,\n        maxRecentTracks: 50\n      }));\n    }\n  }\n\n  // Track Management\n  saveTrack(track) {\n    const tracks = this.getAllTracks();\n    const existingIndex = tracks.findIndex(t => t.id === track.id);\n    if (existingIndex >= 0) {\n      var _track$usageTracking$, _track$usageTracking;\n      tracks[existingIndex] = {\n        ...track,\n        usageTracking: {\n          usageCount: (_track$usageTracking$ = (_track$usageTracking = track.usageTracking) === null || _track$usageTracking === void 0 ? void 0 : _track$usageTracking.usageCount) !== null && _track$usageTracking$ !== void 0 ? _track$usageTracking$ : 0,\n          lastUsed: new Date()\n        }\n      };\n    } else {\n      var _track$usageTracking$2, _track$usageTracking2;\n      tracks.push({\n        ...track,\n        usageTracking: {\n          usageCount: (_track$usageTracking$2 = (_track$usageTracking2 = track.usageTracking) === null || _track$usageTracking2 === void 0 ? void 0 : _track$usageTracking2.usageCount) !== null && _track$usageTracking$2 !== void 0 ? _track$usageTracking$2 : 0,\n          lastUsed: new Date()\n        }\n      });\n    }\n    localStorage.setItem(this.STORAGE_KEYS.TRACKS, JSON.stringify(tracks));\n    this.addToRecentlyGenerated(track.id);\n    console.log(`💾 Track saved: ${track.title}`);\n  }\n  getTrack(trackId) {\n    const tracks = this.getAllTracks();\n    return tracks.find(t => t.id === trackId) || null;\n  }\n  getAllTracks() {\n    try {\n      const tracksData = localStorage.getItem(this.STORAGE_KEYS.TRACKS);\n      return tracksData ? JSON.parse(tracksData) : [];\n    } catch (error) {\n      console.error('Error loading tracks from storage:', error);\n      return [];\n    }\n  }\n  deleteTrack(trackId) {\n    const tracks = this.getAllTracks();\n    const filteredTracks = tracks.filter(t => t.id !== trackId);\n    if (filteredTracks.length < tracks.length) {\n      localStorage.setItem(this.STORAGE_KEYS.TRACKS, JSON.stringify(filteredTracks));\n      this.removeFromRecentlyGenerated(trackId);\n      console.log(`🗑️ Track deleted: ${trackId}`);\n      return true;\n    }\n    return false;\n  }\n  searchTracks(query, filters) {\n    const tracks = this.getAllTracks();\n    const queryLower = query.toLowerCase();\n    return tracks.filter(track => {\n      var _track$description;\n      // Text search\n      const matchesQuery = track.title.toLowerCase().includes(queryLower) || ((_track$description = track.description) === null || _track$description === void 0 ? void 0 : _track$description.toLowerCase().includes(queryLower)) || track.tags.some(tag => tag.toLowerCase().includes(queryLower));\n      if (!matchesQuery) return false;\n\n      // Apply filters\n      if (filters !== null && filters !== void 0 && filters.mood && track.mood !== filters.mood) return false;\n      if (filters !== null && filters !== void 0 && filters.genre && track.genre !== filters.genre) return false;\n      if (filters !== null && filters !== void 0 && filters.energyLevel && track.energyLevel !== filters.energyLevel) return false;\n      if (filters !== null && filters !== void 0 && filters.category && track.streamingCategory !== filters.category) return false;\n      return true;\n    });\n  }\n\n  // Recently Generated Tracks\n  addToRecentlyGenerated(trackId) {\n    const recent = this.getRecentlyGenerated();\n    const filtered = recent.filter(id => id !== trackId);\n    filtered.unshift(trackId);\n\n    // Keep only the most recent tracks\n    const settings = this.getSettings();\n    const maxRecent = settings.maxRecentTracks || 50;\n    const trimmed = filtered.slice(0, maxRecent);\n    localStorage.setItem(this.STORAGE_KEYS.RECENTLY_GENERATED, JSON.stringify(trimmed));\n  }\n  removeFromRecentlyGenerated(trackId) {\n    const recent = this.getRecentlyGenerated();\n    const filtered = recent.filter(id => id !== trackId);\n    localStorage.setItem(this.STORAGE_KEYS.RECENTLY_GENERATED, JSON.stringify(filtered));\n  }\n  getRecentlyGenerated() {\n    try {\n      const recentData = localStorage.getItem(this.STORAGE_KEYS.RECENTLY_GENERATED);\n      return recentData ? JSON.parse(recentData) : [];\n    } catch (error) {\n      console.error('Error loading recently generated tracks:', error);\n      return [];\n    }\n  }\n  getRecentlyGeneratedTracks(limit = 10) {\n    const recentIds = this.getRecentlyGenerated();\n    const tracks = this.getAllTracks();\n    return recentIds.map(id => tracks.find(t => t.id === id)).filter(Boolean).slice(0, limit);\n  }\n\n  // Client Management\n  createClient(name, description) {\n    const clients = this.getAllClients();\n    const newClient = {\n      id: `client_${Date.now()}`,\n      name,\n      description,\n      collections: [],\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    clients.push(newClient);\n    localStorage.setItem(this.STORAGE_KEYS.CLIENTS, JSON.stringify(clients));\n    console.log(`👥 Client created: ${name}`);\n    return newClient;\n  }\n  getAllClients() {\n    try {\n      const clientsData = localStorage.getItem(this.STORAGE_KEYS.CLIENTS);\n      return clientsData ? JSON.parse(clientsData) : [];\n    } catch (error) {\n      console.error('Error loading clients from storage:', error);\n      return [];\n    }\n  }\n  getClient(clientId) {\n    const clients = this.getAllClients();\n    return clients.find(c => c.id === clientId) || null;\n  }\n  updateClient(clientId, updates) {\n    const clients = this.getAllClients();\n    const index = clients.findIndex(c => c.id === clientId);\n    if (index >= 0) {\n      clients[index] = {\n        ...clients[index],\n        ...updates,\n        updatedAt: new Date()\n      };\n      localStorage.setItem(this.STORAGE_KEYS.CLIENTS, JSON.stringify(clients));\n      console.log(`👥 Client updated: ${clientId}`);\n      return true;\n    }\n    return false;\n  }\n  deleteClient(clientId) {\n    const clients = this.getAllClients();\n    const filtered = clients.filter(c => c.id !== clientId);\n    if (filtered.length < clients.length) {\n      localStorage.setItem(this.STORAGE_KEYS.CLIENTS, JSON.stringify(filtered));\n      console.log(`🗑️ Client deleted: ${clientId}`);\n      return true;\n    }\n    return false;\n  }\n\n  // Collection Management\n  createCollection(clientId, name, description) {\n    const client = this.getClient(clientId);\n    if (!client) return null;\n    const newCollection = {\n      id: `collection_${Date.now()}`,\n      name,\n      description,\n      tracks: [],\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    client.collections.push(newCollection);\n    client.updatedAt = new Date();\n    this.updateClient(clientId, client);\n    console.log(`📁 Collection created: ${name} for client ${client.name}`);\n    return newCollection;\n  }\n  addTrackToCollection(collectionId, trackId) {\n    const clients = this.getAllClients();\n    for (const client of clients) {\n      const collection = client.collections.find(c => c.id === collectionId);\n      if (collection) {\n        if (!collection.tracks.includes(trackId)) {\n          collection.tracks.push(trackId);\n          collection.updatedAt = new Date();\n          client.updatedAt = new Date();\n          this.updateClient(client.id, client);\n          console.log(`📁 Track added to collection: ${trackId} -> ${collection.name}`);\n          return true;\n        }\n        break;\n      }\n    }\n    return false;\n  }\n  removeTrackFromCollection(collectionId, trackId) {\n    const clients = this.getAllClients();\n    for (const client of clients) {\n      const collection = client.collections.find(c => c.id === collectionId);\n      if (collection) {\n        const index = collection.tracks.indexOf(trackId);\n        if (index >= 0) {\n          collection.tracks.splice(index, 1);\n          collection.updatedAt = new Date();\n          client.updatedAt = new Date();\n          this.updateClient(client.id, client);\n          console.log(`📁 Track removed from collection: ${trackId} <- ${collection.name}`);\n          return true;\n        }\n        break;\n      }\n    }\n    return false;\n  }\n\n  // Settings\n  getSettings() {\n    try {\n      const settingsData = localStorage.getItem(this.STORAGE_KEYS.SETTINGS);\n      return settingsData ? JSON.parse(settingsData) : {};\n    } catch (error) {\n      console.error('Error loading settings:', error);\n      return {};\n    }\n  }\n  updateSettings(updates) {\n    const settings = this.getSettings();\n    const updated = {\n      ...settings,\n      ...updates\n    };\n    localStorage.setItem(this.STORAGE_KEYS.SETTINGS, JSON.stringify(updated));\n    console.log('⚙️ Settings updated');\n  }\n\n  // Export/Import\n  exportData() {\n    const data = {\n      tracks: this.getAllTracks(),\n      clients: this.getAllClients(),\n      settings: this.getSettings(),\n      exportDate: new Date().toISOString()\n    };\n    return JSON.stringify(data, null, 2);\n  }\n  importData(data) {\n    try {\n      const parsed = JSON.parse(data);\n      if (parsed.tracks) {\n        localStorage.setItem(this.STORAGE_KEYS.TRACKS, JSON.stringify(parsed.tracks));\n      }\n      if (parsed.clients) {\n        localStorage.setItem(this.STORAGE_KEYS.CLIENTS, JSON.stringify(parsed.clients));\n      }\n      if (parsed.settings) {\n        localStorage.setItem(this.STORAGE_KEYS.SETTINGS, JSON.stringify(parsed.settings));\n      }\n      console.log('📥 Data imported successfully');\n      return true;\n    } catch (error) {\n      console.error('Error importing data:', error);\n      return false;\n    }\n  }\n\n  // Cleanup\n  clearAllData() {\n    localStorage.removeItem(this.STORAGE_KEYS.TRACKS);\n    localStorage.removeItem(this.STORAGE_KEYS.CLIENTS);\n    localStorage.removeItem(this.STORAGE_KEYS.RECENTLY_GENERATED);\n    localStorage.removeItem(this.STORAGE_KEYS.SETTINGS);\n    this.initializeStorage();\n    console.log('🗑️ All data cleared');\n  }\n}\n\n// Export singleton instance\nconst trackStorageService = new TrackStorageService();\nexport default trackStorageService;","map":{"version":3,"names":["TrackStorageService","constructor","STORAGE_KEYS","TRACKS","CLIENTS","RECENTLY_GENERATED","SETTINGS","initializeStorage","localStorage","getItem","setItem","JSON","stringify","defaultClient","autoSave","maxRecentTracks","saveTrack","track","tracks","getAllTracks","existingIndex","findIndex","t","id","_track$usageTracking$","_track$usageTracking","usageTracking","usageCount","lastUsed","Date","_track$usageTracking$2","_track$usageTracking2","push","addToRecentlyGenerated","console","log","title","getTrack","trackId","find","tracksData","parse","error","deleteTrack","filteredTracks","filter","length","removeFromRecentlyGenerated","searchTracks","query","filters","queryLower","toLowerCase","_track$description","matchesQuery","includes","description","tags","some","tag","mood","genre","energyLevel","category","streamingCategory","recent","getRecentlyGenerated","filtered","unshift","settings","getSettings","maxRecent","trimmed","slice","recentData","getRecentlyGeneratedTracks","limit","recentIds","map","Boolean","createClient","name","clients","getAllClients","newClient","now","collections","createdAt","updatedAt","clientsData","getClient","clientId","c","updateClient","updates","index","deleteClient","createCollection","client","newCollection","addTrackToCollection","collectionId","collection","removeTrackFromCollection","indexOf","splice","settingsData","updateSettings","updated","exportData","data","exportDate","toISOString","importData","parsed","clearAllData","removeItem","trackStorageService"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/services/trackStorageService.ts"],"sourcesContent":["import { StreamingTrack } from '../types/track';\n\nexport interface TrackCollection {\n  id: string;\n  name: string;\n  description?: string;\n  tracks: string[]; // Track IDs\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Client {\n  id: string;\n  name: string;\n  description?: string;\n  collections: TrackCollection[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nclass TrackStorageService {\n  private readonly STORAGE_KEYS = {\n    TRACKS: 'suno_tracks',\n    CLIENTS: 'suno_clients',\n    RECENTLY_GENERATED: 'suno_recently_generated',\n    SETTINGS: 'suno_settings'\n  };\n\n  constructor() {\n    this.initializeStorage();\n  }\n\n  private initializeStorage(): void {\n    // Initialize storage if it doesn't exist\n    if (!localStorage.getItem(this.STORAGE_KEYS.TRACKS)) {\n      localStorage.setItem(this.STORAGE_KEYS.TRACKS, JSON.stringify([]));\n    }\n    if (!localStorage.getItem(this.STORAGE_KEYS.CLIENTS)) {\n      localStorage.setItem(this.STORAGE_KEYS.CLIENTS, JSON.stringify([]));\n    }\n    if (!localStorage.getItem(this.STORAGE_KEYS.RECENTLY_GENERATED)) {\n      localStorage.setItem(this.STORAGE_KEYS.RECENTLY_GENERATED, JSON.stringify([]));\n    }\n    if (!localStorage.getItem(this.STORAGE_KEYS.SETTINGS)) {\n      localStorage.setItem(this.STORAGE_KEYS.SETTINGS, JSON.stringify({\n        defaultClient: 'default',\n        autoSave: true,\n        maxRecentTracks: 50\n      }));\n    }\n  }\n\n  // Track Management\n  public saveTrack(track: StreamingTrack): void {\n    const tracks = this.getAllTracks();\n    const existingIndex = tracks.findIndex(t => t.id === track.id);\n    \n    if (existingIndex >= 0) {\n      tracks[existingIndex] = {\n        ...track,\n        usageTracking: {\n          usageCount: (track.usageTracking?.usageCount ?? 0),\n          lastUsed: new Date()\n        }\n      };\n    } else {\n      tracks.push({\n        ...track,\n        usageTracking: {\n          usageCount: (track.usageTracking?.usageCount ?? 0),\n          lastUsed: new Date()\n        }\n      });\n    }\n    \n    localStorage.setItem(this.STORAGE_KEYS.TRACKS, JSON.stringify(tracks));\n    this.addToRecentlyGenerated(track.id);\n    \n    console.log(`💾 Track saved: ${track.title}`);\n  }\n\n  public getTrack(trackId: string): StreamingTrack | null {\n    const tracks = this.getAllTracks();\n    return tracks.find(t => t.id === trackId) || null;\n  }\n\n  public getAllTracks(): StreamingTrack[] {\n    try {\n      const tracksData = localStorage.getItem(this.STORAGE_KEYS.TRACKS);\n      return tracksData ? JSON.parse(tracksData) : [];\n    } catch (error) {\n      console.error('Error loading tracks from storage:', error);\n      return [];\n    }\n  }\n\n  public deleteTrack(trackId: string): boolean {\n    const tracks = this.getAllTracks();\n    const filteredTracks = tracks.filter(t => t.id !== trackId);\n    \n    if (filteredTracks.length < tracks.length) {\n      localStorage.setItem(this.STORAGE_KEYS.TRACKS, JSON.stringify(filteredTracks));\n      this.removeFromRecentlyGenerated(trackId);\n      console.log(`🗑️ Track deleted: ${trackId}`);\n      return true;\n    }\n    return false;\n  }\n\n  public searchTracks(query: string, filters?: {\n    mood?: string;\n    genre?: string;\n    energyLevel?: string;\n    category?: string;\n  }): StreamingTrack[] {\n    const tracks = this.getAllTracks();\n    const queryLower = query.toLowerCase();\n    \n    return tracks.filter(track => {\n      // Text search\n      const matchesQuery = \n        track.title.toLowerCase().includes(queryLower) ||\n        track.description?.toLowerCase().includes(queryLower) ||\n        track.tags.some(tag => tag.toLowerCase().includes(queryLower));\n      \n      if (!matchesQuery) return false;\n      \n      // Apply filters\n      if (filters?.mood && track.mood !== filters.mood) return false;\n      if (filters?.genre && track.genre !== filters.genre) return false;\n      if (filters?.energyLevel && track.energyLevel !== filters.energyLevel) return false;\n      if (filters?.category && track.streamingCategory !== filters.category) return false;\n      \n      return true;\n    });\n  }\n\n  // Recently Generated Tracks\n  private addToRecentlyGenerated(trackId: string): void {\n    const recent = this.getRecentlyGenerated();\n    const filtered = recent.filter(id => id !== trackId);\n    filtered.unshift(trackId);\n    \n    // Keep only the most recent tracks\n    const settings = this.getSettings();\n    const maxRecent = settings.maxRecentTracks || 50;\n    const trimmed = filtered.slice(0, maxRecent);\n    \n    localStorage.setItem(this.STORAGE_KEYS.RECENTLY_GENERATED, JSON.stringify(trimmed));\n  }\n\n  private removeFromRecentlyGenerated(trackId: string): void {\n    const recent = this.getRecentlyGenerated();\n    const filtered = recent.filter(id => id !== trackId);\n    localStorage.setItem(this.STORAGE_KEYS.RECENTLY_GENERATED, JSON.stringify(filtered));\n  }\n\n  public getRecentlyGenerated(): string[] {\n    try {\n      const recentData = localStorage.getItem(this.STORAGE_KEYS.RECENTLY_GENERATED);\n      return recentData ? JSON.parse(recentData) : [];\n    } catch (error) {\n      console.error('Error loading recently generated tracks:', error);\n      return [];\n    }\n  }\n\n  public getRecentlyGeneratedTracks(limit: number = 10): StreamingTrack[] {\n    const recentIds = this.getRecentlyGenerated();\n    const tracks = this.getAllTracks();\n    \n    return recentIds\n      .map(id => tracks.find(t => t.id === id))\n      .filter(Boolean)\n      .slice(0, limit) as StreamingTrack[];\n  }\n\n  // Client Management\n  public createClient(name: string, description?: string): Client {\n    const clients = this.getAllClients();\n    const newClient: Client = {\n      id: `client_${Date.now()}`,\n      name,\n      description,\n      collections: [],\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    \n    clients.push(newClient);\n    localStorage.setItem(this.STORAGE_KEYS.CLIENTS, JSON.stringify(clients));\n    \n    console.log(`👥 Client created: ${name}`);\n    return newClient;\n  }\n\n  public getAllClients(): Client[] {\n    try {\n      const clientsData = localStorage.getItem(this.STORAGE_KEYS.CLIENTS);\n      return clientsData ? JSON.parse(clientsData) : [];\n    } catch (error) {\n      console.error('Error loading clients from storage:', error);\n      return [];\n    }\n  }\n\n  public getClient(clientId: string): Client | null {\n    const clients = this.getAllClients();\n    return clients.find(c => c.id === clientId) || null;\n  }\n\n  public updateClient(clientId: string, updates: Partial<Client>): boolean {\n    const clients = this.getAllClients();\n    const index = clients.findIndex(c => c.id === clientId);\n    \n    if (index >= 0) {\n      clients[index] = { ...clients[index], ...updates, updatedAt: new Date() };\n      localStorage.setItem(this.STORAGE_KEYS.CLIENTS, JSON.stringify(clients));\n      console.log(`👥 Client updated: ${clientId}`);\n      return true;\n    }\n    return false;\n  }\n\n  public deleteClient(clientId: string): boolean {\n    const clients = this.getAllClients();\n    const filtered = clients.filter(c => c.id !== clientId);\n    \n    if (filtered.length < clients.length) {\n      localStorage.setItem(this.STORAGE_KEYS.CLIENTS, JSON.stringify(filtered));\n      console.log(`🗑️ Client deleted: ${clientId}`);\n      return true;\n    }\n    return false;\n  }\n\n  // Collection Management\n  public createCollection(clientId: string, name: string, description?: string): TrackCollection | null {\n    const client = this.getClient(clientId);\n    if (!client) return null;\n    \n    const newCollection: TrackCollection = {\n      id: `collection_${Date.now()}`,\n      name,\n      description,\n      tracks: [],\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    \n    client.collections.push(newCollection);\n    client.updatedAt = new Date();\n    \n    this.updateClient(clientId, client);\n    console.log(`📁 Collection created: ${name} for client ${client.name}`);\n    return newCollection;\n  }\n\n  public addTrackToCollection(collectionId: string, trackId: string): boolean {\n    const clients = this.getAllClients();\n    \n    for (const client of clients) {\n      const collection = client.collections.find(c => c.id === collectionId);\n      if (collection) {\n        if (!collection.tracks.includes(trackId)) {\n          collection.tracks.push(trackId);\n          collection.updatedAt = new Date();\n          client.updatedAt = new Date();\n          \n          this.updateClient(client.id, client);\n          console.log(`📁 Track added to collection: ${trackId} -> ${collection.name}`);\n          return true;\n        }\n        break;\n      }\n    }\n    return false;\n  }\n\n  public removeTrackFromCollection(collectionId: string, trackId: string): boolean {\n    const clients = this.getAllClients();\n    \n    for (const client of clients) {\n      const collection = client.collections.find(c => c.id === collectionId);\n      if (collection) {\n        const index = collection.tracks.indexOf(trackId);\n        if (index >= 0) {\n          collection.tracks.splice(index, 1);\n          collection.updatedAt = new Date();\n          client.updatedAt = new Date();\n          \n          this.updateClient(client.id, client);\n          console.log(`📁 Track removed from collection: ${trackId} <- ${collection.name}`);\n          return true;\n        }\n        break;\n      }\n    }\n    return false;\n  }\n\n  // Settings\n  public getSettings(): any {\n    try {\n      const settingsData = localStorage.getItem(this.STORAGE_KEYS.SETTINGS);\n      return settingsData ? JSON.parse(settingsData) : {};\n    } catch (error) {\n      console.error('Error loading settings:', error);\n      return {};\n    }\n  }\n\n  public updateSettings(updates: any): void {\n    const settings = this.getSettings();\n    const updated = { ...settings, ...updates };\n    localStorage.setItem(this.STORAGE_KEYS.SETTINGS, JSON.stringify(updated));\n    console.log('⚙️ Settings updated');\n  }\n\n  // Export/Import\n  public exportData(): string {\n    const data = {\n      tracks: this.getAllTracks(),\n      clients: this.getAllClients(),\n      settings: this.getSettings(),\n      exportDate: new Date().toISOString()\n    };\n    return JSON.stringify(data, null, 2);\n  }\n\n  public importData(data: string): boolean {\n    try {\n      const parsed = JSON.parse(data);\n      \n      if (parsed.tracks) {\n        localStorage.setItem(this.STORAGE_KEYS.TRACKS, JSON.stringify(parsed.tracks));\n      }\n      if (parsed.clients) {\n        localStorage.setItem(this.STORAGE_KEYS.CLIENTS, JSON.stringify(parsed.clients));\n      }\n      if (parsed.settings) {\n        localStorage.setItem(this.STORAGE_KEYS.SETTINGS, JSON.stringify(parsed.settings));\n      }\n      \n      console.log('📥 Data imported successfully');\n      return true;\n    } catch (error) {\n      console.error('Error importing data:', error);\n      return false;\n    }\n  }\n\n  // Cleanup\n  public clearAllData(): void {\n    localStorage.removeItem(this.STORAGE_KEYS.TRACKS);\n    localStorage.removeItem(this.STORAGE_KEYS.CLIENTS);\n    localStorage.removeItem(this.STORAGE_KEYS.RECENTLY_GENERATED);\n    localStorage.removeItem(this.STORAGE_KEYS.SETTINGS);\n    this.initializeStorage();\n    console.log('🗑️ All data cleared');\n  }\n}\n\n// Export singleton instance\nconst trackStorageService = new TrackStorageService();\nexport default trackStorageService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// Performance test utilities for diagnosing loading issues on older hardware\nexport const testJSONLoading=async()=>{const startTime=performance.now();let jsonLoadTime=0;let trackProcessingTime=0;let tracksProcessed=0;let error;try{var _memory;console.log('🧪 Starting performance test...');// Test JSON import (removed YouTube Audio Library integration — migrated to Suno API)\nconst jsonStart=performance.now();// Simulate processing Suno API tracks instead of JSON file\njsonLoadTime=performance.now()-jsonStart;console.log(\"\\uD83D\\uDCCA Suno API tracks processed in \".concat(jsonLoadTime.toFixed(2),\"ms\"));console.log(\"\\uD83D\\uDCC1 Simulated \".concat(tracksProcessed,\" AI-generated tracks\"));// Removed YouTube Audio Library integration — migrated to Suno API\n// Test track processing\nconst processingStart=performance.now();tracksProcessed=10;// Simulate processing 10 AI-generated tracks\n// Simulate track processing for Suno API tracks\nArray.from({length:10},(_,index)=>({id:\"suno_test_\".concat(index),title:\"AI Generated Track \".concat(index+1),sunoId:\"suno_\".concat(index),// Add minimal processing to simulate real usage\nprocessed:true}));trackProcessingTime=performance.now()-processingStart;console.log(\"\\u26A1 Processed \".concat(tracksProcessed,\" tracks in \").concat(trackProcessingTime.toFixed(2),\"ms\"));return{jsonLoadTime,trackProcessingTime,memoryUsage:((_memory=performance.memory)===null||_memory===void 0?void 0:_memory.usedJSHeapSize)||0,totalTime:performance.now()-startTime,success:true,tracksProcessed};}catch(err){var _memory2;error=err instanceof Error?err.message:'Unknown error';console.error('❌ Performance test failed:',error);return{jsonLoadTime,trackProcessingTime,memoryUsage:((_memory2=performance.memory)===null||_memory2===void 0?void 0:_memory2.usedJSHeapSize)||0,totalTime:performance.now()-startTime,success:false,error,tracksProcessed};}};export const getHardwareInfo=()=>{const info={userAgent:navigator.userAgent,platform:navigator.platform,hardwareConcurrency:navigator.hardwareConcurrency||'Unknown',deviceMemory:navigator.deviceMemory||'Unknown',maxTouchPoints:navigator.maxTouchPoints||0,onLine:navigator.onLine,cookieEnabled:navigator.cookieEnabled,language:navigator.language,memoryInfo:performance.memory?{usedJSHeapSize:performance.memory.usedJSHeapSize,totalJSHeapSize:performance.memory.totalJSHeapSize,jsHeapSizeLimit:performance.memory.jsHeapSizeLimit}:'Not available'};console.log('🖥️ Hardware Info:',info);return info;};export const runPerformanceDiagnostics=async()=>{console.log('🔍 Running performance diagnostics...');// Get hardware info\nconst hardwareInfo=getHardwareInfo();// Test JSON loading\nconst testResult=await testJSONLoading();// Analyze results\nconst analysis={hardwareInfo,testResult,recommendations:[]};if(testResult.jsonLoadTime>5000){analysis.recommendations.push('JSON loading is slow (>5s) - consider using smaller batches');}if(testResult.trackProcessingTime>3000){analysis.recommendations.push('Track processing is slow (>3s) - consider optimizing processing logic');}if(testResult.totalTime>10000){analysis.recommendations.push('Total loading time is very slow (>10s) - consider lazy loading');}if(hardwareInfo.hardwareConcurrency&&hardwareInfo.hardwareConcurrency<4){analysis.recommendations.push('Low CPU cores detected - consider reducing batch sizes');}if(hardwareInfo.deviceMemory&&hardwareInfo.deviceMemory<4){analysis.recommendations.push('Low device memory detected - consider memory optimization');}console.log('📋 Performance Analysis:',analysis);return analysis;};","map":{"version":3,"names":["testJSONLoading","startTime","performance","now","jsonLoadTime","trackProcessingTime","tracksProcessed","error","_memory","console","log","jsonStart","concat","toFixed","processingStart","Array","from","length","_","index","id","title","sunoId","processed","memoryUsage","memory","usedJSHeapSize","totalTime","success","err","_memory2","Error","message","getHardwareInfo","info","userAgent","navigator","platform","hardwareConcurrency","deviceMemory","maxTouchPoints","onLine","cookieEnabled","language","memoryInfo","totalJSHeapSize","jsHeapSizeLimit","runPerformanceDiagnostics","hardwareInfo","testResult","analysis","recommendations","push"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/utils/performanceTest.ts"],"sourcesContent":["// Performance test utilities for diagnosing loading issues on older hardware\n\nexport interface PerformanceTestResult {\n  jsonLoadTime: number;\n  trackProcessingTime: number;\n  memoryUsage: number;\n  totalTime: number;\n  success: boolean;\n  error?: string;\n  tracksProcessed: number;\n}\n\nexport const testJSONLoading = async (): Promise<PerformanceTestResult> => {\n  const startTime = performance.now();\n  let jsonLoadTime = 0;\n  let trackProcessingTime = 0;\n  let tracksProcessed = 0;\n  let error: string | undefined;\n\n  try {\n    console.log('🧪 Starting performance test...');\n    \n    // Test JSON import (removed YouTube Audio Library integration — migrated to Suno API)\n    const jsonStart = performance.now();\n    // Simulate processing Suno API tracks instead of JSON file\n    jsonLoadTime = performance.now() - jsonStart;\n    \n    console.log(`📊 Suno API tracks processed in ${jsonLoadTime.toFixed(2)}ms`);\n    console.log(`📁 Simulated ${tracksProcessed} AI-generated tracks`);\n    \n    // Removed YouTube Audio Library integration — migrated to Suno API\n    // Test track processing\n    const processingStart = performance.now();\n    tracksProcessed = 10; // Simulate processing 10 AI-generated tracks\n    \n    // Simulate track processing for Suno API tracks\n    Array.from({ length: 10 }, (_, index: number) => ({\n      id: `suno_test_${index}`,\n      title: `AI Generated Track ${index + 1}`,\n      sunoId: `suno_${index}`,\n      // Add minimal processing to simulate real usage\n      processed: true\n    }));\n    \n    trackProcessingTime = performance.now() - processingStart;\n    \n    console.log(`⚡ Processed ${tracksProcessed} tracks in ${trackProcessingTime.toFixed(2)}ms`);\n    \n    return {\n      jsonLoadTime,\n      trackProcessingTime,\n      memoryUsage: (performance as any).memory?.usedJSHeapSize || 0,\n      totalTime: performance.now() - startTime,\n      success: true,\n      tracksProcessed\n    };\n    \n  } catch (err) {\n    error = err instanceof Error ? err.message : 'Unknown error';\n    console.error('❌ Performance test failed:', error);\n    \n    return {\n      jsonLoadTime,\n      trackProcessingTime,\n      memoryUsage: (performance as any).memory?.usedJSHeapSize || 0,\n      totalTime: performance.now() - startTime,\n      success: false,\n      error,\n      tracksProcessed\n    };\n  }\n};\n\nexport const getHardwareInfo = () => {\n  const info = {\n    userAgent: navigator.userAgent,\n    platform: navigator.platform,\n    hardwareConcurrency: navigator.hardwareConcurrency || 'Unknown',\n    deviceMemory: (navigator as any).deviceMemory || 'Unknown',\n    maxTouchPoints: navigator.maxTouchPoints || 0,\n    onLine: navigator.onLine,\n    cookieEnabled: navigator.cookieEnabled,\n    language: navigator.language,\n    memoryInfo: (performance as any).memory ? {\n      usedJSHeapSize: (performance as any).memory.usedJSHeapSize,\n      totalJSHeapSize: (performance as any).memory.totalJSHeapSize,\n      jsHeapSizeLimit: (performance as any).memory.jsHeapSizeLimit\n    } : 'Not available'\n  };\n  \n  console.log('🖥️ Hardware Info:', info);\n  return info;\n};\n\nexport const runPerformanceDiagnostics = async () => {\n  console.log('🔍 Running performance diagnostics...');\n  \n  // Get hardware info\n  const hardwareInfo = getHardwareInfo();\n  \n  // Test JSON loading\n  const testResult = await testJSONLoading();\n  \n  // Analyze results\n  const analysis = {\n    hardwareInfo,\n    testResult,\n    recommendations: [] as string[]\n  };\n  \n  if (testResult.jsonLoadTime > 5000) {\n    analysis.recommendations.push('JSON loading is slow (>5s) - consider using smaller batches');\n  }\n  \n  if (testResult.trackProcessingTime > 3000) {\n    analysis.recommendations.push('Track processing is slow (>3s) - consider optimizing processing logic');\n  }\n  \n  if (testResult.totalTime > 10000) {\n    analysis.recommendations.push('Total loading time is very slow (>10s) - consider lazy loading');\n  }\n  \n  if (hardwareInfo.hardwareConcurrency && hardwareInfo.hardwareConcurrency < 4) {\n    analysis.recommendations.push('Low CPU cores detected - consider reducing batch sizes');\n  }\n  \n  if (hardwareInfo.deviceMemory && hardwareInfo.deviceMemory < 4) {\n    analysis.recommendations.push('Low device memory detected - consider memory optimization');\n  }\n  \n  console.log('📋 Performance Analysis:', analysis);\n  return analysis;\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
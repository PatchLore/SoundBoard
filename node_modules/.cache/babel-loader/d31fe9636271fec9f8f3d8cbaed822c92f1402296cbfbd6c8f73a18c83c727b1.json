{"ast":null,"code":"import _objectSpread from\"/Users/allendunn/Documents/Stream/stream-soundboard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";class OBSIntegration{constructor(){this.ws=null;this.connection={isConnected:false,version:'',sceneName:'',isStreaming:false,isRecording:false};this.config={host:'localhost',port:4455,password:'',autoConnect:false,reconnectInterval:5000};this.reconnectTimer=null;this.messageId=0;this.pendingRequests=new Map();// Event System\nthis.listeners=new Map();}// Initialize OBS integration\n// Configuration\nsetConfig(config){this.config=_objectSpread(_objectSpread({},this.config),config);if(this.config.autoConnect&&!this.connection.isConnected){this.connect();}}getConfig(){return _objectSpread({},this.config);}// Connection Management\nasync connect(){try{const url=\"ws://\".concat(this.config.host,\":\").concat(this.config.port);this.ws=new WebSocket(url);this.ws.onopen=()=>{console.log('OBS WebSocket connected');this.connection.isConnected=true;this.authenticate();this.getOBSInfo();};this.ws.onmessage=event=>{this.handleMessage(JSON.parse(event.data));};this.ws.onclose=()=>{console.log('OBS WebSocket disconnected');this.connection.isConnected=false;this.scheduleReconnect();};this.ws.onerror=error=>{console.error('OBS WebSocket error:',error);this.connection.isConnected=false;};return true;}catch(error){console.error('Failed to connect to OBS:',error);return false;}}disconnect(){if(this.ws){this.ws.close();this.ws=null;}if(this.reconnectTimer){clearTimeout(this.reconnectTimer);this.reconnectTimer=null;}this.connection.isConnected=false;}scheduleReconnect(){if(this.config.autoConnect&&this.reconnectTimer===null){this.reconnectTimer=setTimeout(()=>{this.connect();this.reconnectTimer=null;},this.config.reconnectInterval);}}// Authentication\nasync authenticate(){if(!this.config.password)return;try{const response=await this.sendCommand('GetAuthRequired');if(response.authRequired){const auth=await this.sendCommand('Authenticate',{auth:response.salt,challenge:response.challenge});console.log('OBS authenticated successfully');}}catch(error){console.error('OBS authentication failed:',error);}}// Command System\nasync sendCommand(command,params){if(!this.ws||this.ws.readyState!==WebSocket.OPEN){throw new Error('OBS WebSocket not connected');}const id=++this.messageId;const message=_objectSpread({requestType:command,requestId:id},params&&{requestData:params});return new Promise((resolve,reject)=>{this.pendingRequests.set(id,{resolve,reject});this.ws.send(JSON.stringify(message));// Timeout after 10 seconds\nsetTimeout(()=>{if(this.pendingRequests.has(id)){this.pendingRequests.delete(id);reject(new Error(\"OBS command timeout: \".concat(command)));}},10000);});}handleMessage(data){if(data.requestId&&this.pendingRequests.has(data.requestId)){const{resolve,reject}=this.pendingRequests.get(data.requestId);this.pendingRequests.delete(data.requestId);if(data.error){reject(new Error(data.error));}else{resolve(data.responseData||data);}}else if(data.updateType){this.handleUpdate(data);}}handleUpdate(data){switch(data.updateType){case'SceneTransitionStarted':this.connection.sceneName=data.sceneName;this.emit('sceneChanged',data.sceneName);break;case'StreamStarting':this.connection.isStreaming=true;this.emit('streamStarted');break;case'StreamStopped':this.connection.isStreaming=false;this.emit('streamStopped');break;case'RecordingStarting':this.connection.isRecording=true;this.emit('recordingStarted');break;case'RecordingStopped':this.connection.isRecording=false;this.emit('recordingStopped');break;}}// OBS Information\nasync getOBSInfo(){try{const info=await this.sendCommand('GetVersion');this.connection.version=info.obsVersion;const scene=await this.sendCommand('GetCurrentProgramScene');this.connection.sceneName=scene.currentProgramSceneName;const streamStatus=await this.sendCommand('GetStreamStatus');this.connection.isStreaming=streamStatus.outputActive;const recordStatus=await this.sendCommand('GetRecordStatus');this.connection.isRecording=recordStatus.outputActive;}catch(error){console.error('Failed to get OBS info:',error);}}// Scene Management\nasync getScenes(){try{const response=await this.sendCommand('GetSceneList');return response.scenes.map(scene=>scene.sceneName);}catch(error){console.error('Failed to get scenes:',error);return[];}}async switchScene(sceneName){try{await this.sendCommand('SetCurrentProgramScene',{sceneName});this.connection.sceneName=sceneName;}catch(error){console.error('Failed to switch scene:',error);throw error;}}// Source Management\nasync getSources(){try{const response=await this.sendCommand('GetSceneList');return response.scenes.flatMap(scene=>scene.sources.map(source=>_objectSpread(_objectSpread({},source),{},{sceneName:scene.sceneName})));}catch(error){console.error('Failed to get sources:',error);return[];}}async toggleSource(sourceName,sceneName){try{const scene=sceneName||this.connection.sceneName;await this.sendCommand('ToggleSourceVisibility',{sourceName,sceneName:scene});}catch(error){console.error('Failed to toggle source:',error);throw error;}}// Audio Integration\nasync setSourceVolume(sourceName,volume){try{await this.sendCommand('SetInputVolume',{inputName:sourceName,inputVolumeMul:volume});}catch(error){console.error('Failed to set source volume:',error);throw error;}}async getSourceVolume(sourceName){try{const response=await this.sendCommand('GetInputVolume',{inputName:sourceName});return response.inputVolumeMul;}catch(error){console.error('Failed to get source volume:',error);return 1.0;}}// Streamlabs Integration\nasync triggerStreamlabsAlert(alertType,message){try{// This would integrate with Streamlabs API\n// For now, we'll create a custom source in OBS\nawait this.sendCommand('TriggerSourceFilter',{sourceName:'Streamlabs Alerts',filterName:alertType,filterSettings:{message}});}catch(error){console.error('Failed to trigger Streamlabs alert:',error);}}// Browser Source Integration\nasync createBrowserSource(name,url){let width=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1920;let height=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1080;try{await this.sendCommand('CreateInput',{sceneName:this.connection.sceneName,inputName:name,inputKind:'browser_source',inputSettings:{url,width,height}});}catch(error){console.error('Failed to create browser source:',error);throw error;}}on(event,callback){if(!this.listeners.has(event)){this.listeners.set(event,[]);}this.listeners.get(event).push(callback);}off(event,callback){if(this.listeners.has(event)){const callbacks=this.listeners.get(event);const index=callbacks.indexOf(callback);if(index>-1){callbacks.splice(index,1);}}}emit(event){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}if(this.listeners.has(event)){this.listeners.get(event).forEach(callback=>callback(...args));}}// Getters\ngetConnection(){return _objectSpread({},this.connection);}isConnected(){return this.connection.isConnected;}// Cleanup\ndestroy(){this.disconnect();this.listeners.clear();}}// Export singleton instance\nexport const obsIntegration=new OBSIntegration();","map":{"version":3,"names":["OBSIntegration","constructor","ws","connection","isConnected","version","sceneName","isStreaming","isRecording","config","host","port","password","autoConnect","reconnectInterval","reconnectTimer","messageId","pendingRequests","Map","listeners","setConfig","_objectSpread","connect","getConfig","url","concat","WebSocket","onopen","console","log","authenticate","getOBSInfo","onmessage","event","handleMessage","JSON","parse","data","onclose","scheduleReconnect","onerror","error","disconnect","close","clearTimeout","setTimeout","response","sendCommand","authRequired","auth","salt","challenge","command","params","readyState","OPEN","Error","id","message","requestType","requestId","requestData","Promise","resolve","reject","set","send","stringify","has","delete","get","responseData","updateType","handleUpdate","emit","info","obsVersion","scene","currentProgramSceneName","streamStatus","outputActive","recordStatus","getScenes","scenes","map","switchScene","getSources","flatMap","sources","source","toggleSource","sourceName","setSourceVolume","volume","inputName","inputVolumeMul","getSourceVolume","triggerStreamlabsAlert","alertType","filterName","filterSettings","createBrowserSource","name","width","arguments","length","undefined","height","inputKind","inputSettings","on","callback","push","off","callbacks","index","indexOf","splice","_len","args","Array","_key","forEach","getConnection","destroy","clear","obsIntegration"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/services/obsIntegration.ts"],"sourcesContent":["import { audioController } from './audioController';\nimport { StreamingTrack } from '../types/track';\n\nexport interface OBSConnection {\n  isConnected: boolean;\n  version: string;\n  sceneName: string;\n  isStreaming: boolean;\n  isRecording: boolean;\n}\n\nexport interface OBSCommand {\n  command: string;\n  params?: any;\n  response?: any;\n}\n\nexport interface OBSPluginConfig {\n  host: string;\n  port: number;\n  password?: string;\n  autoConnect: boolean;\n  reconnectInterval: number;\n}\n\nclass OBSIntegration {\n  private ws: WebSocket | null = null;\n  private connection: OBSConnection = {\n    isConnected: false,\n    version: '',\n    sceneName: '',\n    isStreaming: false,\n    isRecording: false\n  };\n  private config: OBSPluginConfig = {\n    host: 'localhost',\n    port: 4455,\n    password: '',\n    autoConnect: false,\n    reconnectInterval: 5000\n  };\n  private reconnectTimer: NodeJS.Timeout | null = null;\n  private messageId = 0;\n  private pendingRequests = new Map<number, { resolve: Function; reject: Function }>();\n\n  constructor() {\n    // Initialize OBS integration\n  }\n\n  // Configuration\n  setConfig(config: Partial<OBSPluginConfig>): void {\n    this.config = { ...this.config, ...config };\n    if (this.config.autoConnect && !this.connection.isConnected) {\n      this.connect();\n    }\n  }\n\n  getConfig(): OBSPluginConfig {\n    return { ...this.config };\n  }\n\n  // Connection Management\n  async connect(): Promise<boolean> {\n    try {\n      const url = `ws://${this.config.host}:${this.config.port}`;\n      this.ws = new WebSocket(url);\n\n      this.ws.onopen = () => {\n        console.log('OBS WebSocket connected');\n        this.connection.isConnected = true;\n        this.authenticate();\n        this.getOBSInfo();\n      };\n\n      this.ws.onmessage = (event) => {\n        this.handleMessage(JSON.parse(event.data));\n      };\n\n      this.ws.onclose = () => {\n        console.log('OBS WebSocket disconnected');\n        this.connection.isConnected = false;\n        this.scheduleReconnect();\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('OBS WebSocket error:', error);\n        this.connection.isConnected = false;\n      };\n\n      return true;\n    } catch (error) {\n      console.error('Failed to connect to OBS:', error);\n      return false;\n    }\n  }\n\n  disconnect(): void {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    this.connection.isConnected = false;\n  }\n\n  private scheduleReconnect(): void {\n    if (this.config.autoConnect && this.reconnectTimer === null) {\n      this.reconnectTimer = setTimeout(() => {\n        this.connect();\n        this.reconnectTimer = null;\n      }, this.config.reconnectInterval);\n    }\n  }\n\n  // Authentication\n  private async authenticate(): Promise<void> {\n    if (!this.config.password) return;\n\n    try {\n      const response = await this.sendCommand('GetAuthRequired');\n      if (response.authRequired) {\n        const auth = await this.sendCommand('Authenticate', {\n          auth: response.salt,\n          challenge: response.challenge\n        });\n        console.log('OBS authenticated successfully');\n      }\n    } catch (error) {\n      console.error('OBS authentication failed:', error);\n    }\n  }\n\n  // Command System\n  private async sendCommand(command: string, params?: any): Promise<any> {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      throw new Error('OBS WebSocket not connected');\n    }\n\n    const id = ++this.messageId;\n    const message = {\n      requestType: command,\n      requestId: id,\n      ...(params && { requestData: params })\n    };\n\n    return new Promise((resolve, reject) => {\n      this.pendingRequests.set(id, { resolve, reject });\n      this.ws!.send(JSON.stringify(message));\n      \n      // Timeout after 10 seconds\n      setTimeout(() => {\n        if (this.pendingRequests.has(id)) {\n          this.pendingRequests.delete(id);\n          reject(new Error(`OBS command timeout: ${command}`));\n        }\n      }, 10000);\n    });\n  }\n\n  private handleMessage(data: any): void {\n    if (data.requestId && this.pendingRequests.has(data.requestId)) {\n      const { resolve, reject } = this.pendingRequests.get(data.requestId)!;\n      this.pendingRequests.delete(data.requestId);\n\n      if (data.error) {\n        reject(new Error(data.error));\n      } else {\n        resolve(data.responseData || data);\n      }\n    } else if (data.updateType) {\n      this.handleUpdate(data);\n    }\n  }\n\n  private handleUpdate(data: any): void {\n    switch (data.updateType) {\n      case 'SceneTransitionStarted':\n        this.connection.sceneName = data.sceneName;\n        this.emit('sceneChanged', data.sceneName);\n        break;\n      case 'StreamStarting':\n        this.connection.isStreaming = true;\n        this.emit('streamStarted');\n        break;\n      case 'StreamStopped':\n        this.connection.isStreaming = false;\n        this.emit('streamStopped');\n        break;\n      case 'RecordingStarting':\n        this.connection.isRecording = true;\n        this.emit('recordingStarted');\n        break;\n      case 'RecordingStopped':\n        this.connection.isRecording = false;\n        this.emit('recordingStopped');\n        break;\n    }\n  }\n\n  // OBS Information\n  private async getOBSInfo(): Promise<void> {\n    try {\n      const info = await this.sendCommand('GetVersion');\n      this.connection.version = info.obsVersion;\n      \n      const scene = await this.sendCommand('GetCurrentProgramScene');\n      this.connection.sceneName = scene.currentProgramSceneName;\n      \n      const streamStatus = await this.sendCommand('GetStreamStatus');\n      this.connection.isStreaming = streamStatus.outputActive;\n      \n      const recordStatus = await this.sendCommand('GetRecordStatus');\n      this.connection.isRecording = recordStatus.outputActive;\n    } catch (error) {\n      console.error('Failed to get OBS info:', error);\n    }\n  }\n\n  // Scene Management\n  async getScenes(): Promise<string[]> {\n    try {\n      const response = await this.sendCommand('GetSceneList');\n      return response.scenes.map((scene: any) => scene.sceneName);\n    } catch (error) {\n      console.error('Failed to get scenes:', error);\n      return [];\n    }\n  }\n\n  async switchScene(sceneName: string): Promise<void> {\n    try {\n      await this.sendCommand('SetCurrentProgramScene', { sceneName });\n      this.connection.sceneName = sceneName;\n    } catch (error) {\n      console.error('Failed to switch scene:', error);\n      throw error;\n    }\n  }\n\n  // Source Management\n  async getSources(): Promise<any[]> {\n    try {\n      const response = await this.sendCommand('GetSceneList');\n      return response.scenes.flatMap((scene: any) => \n        scene.sources.map((source: any) => ({\n          ...source,\n          sceneName: scene.sceneName\n        }))\n      );\n    } catch (error) {\n      console.error('Failed to get sources:', error);\n      return [];\n    }\n  }\n\n  async toggleSource(sourceName: string, sceneName?: string): Promise<void> {\n    try {\n      const scene = sceneName || this.connection.sceneName;\n      await this.sendCommand('ToggleSourceVisibility', { sourceName, sceneName: scene });\n    } catch (error) {\n      console.error('Failed to toggle source:', error);\n      throw error;\n    }\n  }\n\n  // Audio Integration\n  async setSourceVolume(sourceName: string, volume: number): Promise<void> {\n    try {\n      await this.sendCommand('SetInputVolume', { \n        inputName: sourceName, \n        inputVolumeMul: volume \n      });\n    } catch (error) {\n      console.error('Failed to set source volume:', error);\n      throw error;\n    }\n  }\n\n  async getSourceVolume(sourceName: string): Promise<number> {\n    try {\n      const response = await this.sendCommand('GetInputVolume', { inputName: sourceName });\n      return response.inputVolumeMul;\n    } catch (error) {\n      console.error('Failed to get source volume:', error);\n      return 1.0;\n    }\n  }\n\n  // Streamlabs Integration\n  async triggerStreamlabsAlert(alertType: string, message: string): Promise<void> {\n    try {\n      // This would integrate with Streamlabs API\n      // For now, we'll create a custom source in OBS\n      await this.sendCommand('TriggerSourceFilter', {\n        sourceName: 'Streamlabs Alerts',\n        filterName: alertType,\n        filterSettings: { message }\n      });\n    } catch (error) {\n      console.error('Failed to trigger Streamlabs alert:', error);\n    }\n  }\n\n  // Browser Source Integration\n  async createBrowserSource(name: string, url: string, width: number = 1920, height: number = 1080): Promise<void> {\n    try {\n      await this.sendCommand('CreateInput', {\n        sceneName: this.connection.sceneName,\n        inputName: name,\n        inputKind: 'browser_source',\n        inputSettings: {\n          url,\n          width,\n          height\n        }\n      });\n    } catch (error) {\n      console.error('Failed to create browser source:', error);\n      throw error;\n    }\n  }\n\n  // Event System\n  private listeners: Map<string, Function[]> = new Map();\n\n  on(event: string, callback: Function): void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event)!.push(callback);\n  }\n\n  off(event: string, callback: Function): void {\n    if (this.listeners.has(event)) {\n      const callbacks = this.listeners.get(event)!;\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n\n  private emit(event: string, ...args: any[]): void {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event)!.forEach(callback => callback(...args));\n    }\n  }\n\n  // Getters\n  getConnection(): OBSConnection {\n    return { ...this.connection };\n  }\n\n  isConnected(): boolean {\n    return this.connection.isConnected;\n  }\n\n  // Cleanup\n  destroy(): void {\n    this.disconnect();\n    this.listeners.clear();\n  }\n}\n\n// Export singleton instance\nexport const obsIntegration = new OBSIntegration();\n"],"mappings":"wIAyBA,KAAM,CAAAA,cAAe,CAoBnBC,WAAWA,CAAA,CAAG,MAnBNC,EAAE,CAAqB,IAAI,MAC3BC,UAAU,CAAkB,CAClCC,WAAW,CAAE,KAAK,CAClBC,OAAO,CAAE,EAAE,CACXC,SAAS,CAAE,EAAE,CACbC,WAAW,CAAE,KAAK,CAClBC,WAAW,CAAE,KACf,CAAC,MACOC,MAAM,CAAoB,CAChCC,IAAI,CAAE,WAAW,CACjBC,IAAI,CAAE,IAAI,CACVC,QAAQ,CAAE,EAAE,CACZC,WAAW,CAAE,KAAK,CAClBC,iBAAiB,CAAE,IACrB,CAAC,MACOC,cAAc,CAA0B,IAAI,MAC5CC,SAAS,CAAG,CAAC,MACbC,eAAe,CAAG,GAAI,CAAAC,GAAG,CAAkD,CAAC,CA0RpF;AAAA,KACQC,SAAS,CAA4B,GAAI,CAAAD,GAAG,CAAC,CAAC,CAvRtD,CADE;AAGF;AACAE,SAASA,CAACX,MAAgC,CAAQ,CAChD,IAAI,CAACA,MAAM,CAAAY,aAAA,CAAAA,aAAA,IAAQ,IAAI,CAACZ,MAAM,EAAKA,MAAM,CAAE,CAC3C,GAAI,IAAI,CAACA,MAAM,CAACI,WAAW,EAAI,CAAC,IAAI,CAACV,UAAU,CAACC,WAAW,CAAE,CAC3D,IAAI,CAACkB,OAAO,CAAC,CAAC,CAChB,CACF,CAEAC,SAASA,CAAA,CAAoB,CAC3B,OAAAF,aAAA,IAAY,IAAI,CAACZ,MAAM,EACzB,CAEA;AACA,KAAM,CAAAa,OAAOA,CAAA,CAAqB,CAChC,GAAI,CACF,KAAM,CAAAE,GAAG,SAAAC,MAAA,CAAW,IAAI,CAAChB,MAAM,CAACC,IAAI,MAAAe,MAAA,CAAI,IAAI,CAAChB,MAAM,CAACE,IAAI,CAAE,CAC1D,IAAI,CAACT,EAAE,CAAG,GAAI,CAAAwB,SAAS,CAACF,GAAG,CAAC,CAE5B,IAAI,CAACtB,EAAE,CAACyB,MAAM,CAAG,IAAM,CACrBC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CACtC,IAAI,CAAC1B,UAAU,CAACC,WAAW,CAAG,IAAI,CAClC,IAAI,CAAC0B,YAAY,CAAC,CAAC,CACnB,IAAI,CAACC,UAAU,CAAC,CAAC,CACnB,CAAC,CAED,IAAI,CAAC7B,EAAE,CAAC8B,SAAS,CAAIC,KAAK,EAAK,CAC7B,IAAI,CAACC,aAAa,CAACC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC,CAAC,CAC5C,CAAC,CAED,IAAI,CAACnC,EAAE,CAACoC,OAAO,CAAG,IAAM,CACtBV,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CACzC,IAAI,CAAC1B,UAAU,CAACC,WAAW,CAAG,KAAK,CACnC,IAAI,CAACmC,iBAAiB,CAAC,CAAC,CAC1B,CAAC,CAED,IAAI,CAACrC,EAAE,CAACsC,OAAO,CAAIC,KAAK,EAAK,CAC3Bb,OAAO,CAACa,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,IAAI,CAACtC,UAAU,CAACC,WAAW,CAAG,KAAK,CACrC,CAAC,CAED,MAAO,KAAI,CACb,CAAE,MAAOqC,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjD,MAAO,MAAK,CACd,CACF,CAEAC,UAAUA,CAAA,CAAS,CACjB,GAAI,IAAI,CAACxC,EAAE,CAAE,CACX,IAAI,CAACA,EAAE,CAACyC,KAAK,CAAC,CAAC,CACf,IAAI,CAACzC,EAAE,CAAG,IAAI,CAChB,CACA,GAAI,IAAI,CAACa,cAAc,CAAE,CACvB6B,YAAY,CAAC,IAAI,CAAC7B,cAAc,CAAC,CACjC,IAAI,CAACA,cAAc,CAAG,IAAI,CAC5B,CACA,IAAI,CAACZ,UAAU,CAACC,WAAW,CAAG,KAAK,CACrC,CAEQmC,iBAAiBA,CAAA,CAAS,CAChC,GAAI,IAAI,CAAC9B,MAAM,CAACI,WAAW,EAAI,IAAI,CAACE,cAAc,GAAK,IAAI,CAAE,CAC3D,IAAI,CAACA,cAAc,CAAG8B,UAAU,CAAC,IAAM,CACrC,IAAI,CAACvB,OAAO,CAAC,CAAC,CACd,IAAI,CAACP,cAAc,CAAG,IAAI,CAC5B,CAAC,CAAE,IAAI,CAACN,MAAM,CAACK,iBAAiB,CAAC,CACnC,CACF,CAEA;AACA,KAAc,CAAAgB,YAAYA,CAAA,CAAkB,CAC1C,GAAI,CAAC,IAAI,CAACrB,MAAM,CAACG,QAAQ,CAAE,OAE3B,GAAI,CACF,KAAM,CAAAkC,QAAQ,CAAG,KAAM,KAAI,CAACC,WAAW,CAAC,iBAAiB,CAAC,CAC1D,GAAID,QAAQ,CAACE,YAAY,CAAE,CACzB,KAAM,CAAAC,IAAI,CAAG,KAAM,KAAI,CAACF,WAAW,CAAC,cAAc,CAAE,CAClDE,IAAI,CAAEH,QAAQ,CAACI,IAAI,CACnBC,SAAS,CAAEL,QAAQ,CAACK,SACtB,CAAC,CAAC,CACFvB,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC,CAC/C,CACF,CAAE,MAAOY,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CACpD,CACF,CAEA;AACA,KAAc,CAAAM,WAAWA,CAACK,OAAe,CAAEC,MAAY,CAAgB,CACrE,GAAI,CAAC,IAAI,CAACnD,EAAE,EAAI,IAAI,CAACA,EAAE,CAACoD,UAAU,GAAK5B,SAAS,CAAC6B,IAAI,CAAE,CACrD,KAAM,IAAI,CAAAC,KAAK,CAAC,6BAA6B,CAAC,CAChD,CAEA,KAAM,CAAAC,EAAE,CAAG,EAAE,IAAI,CAACzC,SAAS,CAC3B,KAAM,CAAA0C,OAAO,CAAArC,aAAA,EACXsC,WAAW,CAAEP,OAAO,CACpBQ,SAAS,CAAEH,EAAE,EACTJ,MAAM,EAAI,CAAEQ,WAAW,CAAER,MAAO,CAAC,CACtC,CAED,MAAO,IAAI,CAAAS,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC,IAAI,CAAC/C,eAAe,CAACgD,GAAG,CAACR,EAAE,CAAE,CAAEM,OAAO,CAAEC,MAAO,CAAC,CAAC,CACjD,IAAI,CAAC9D,EAAE,CAAEgE,IAAI,CAAC/B,IAAI,CAACgC,SAAS,CAACT,OAAO,CAAC,CAAC,CAEtC;AACAb,UAAU,CAAC,IAAM,CACf,GAAI,IAAI,CAAC5B,eAAe,CAACmD,GAAG,CAACX,EAAE,CAAC,CAAE,CAChC,IAAI,CAACxC,eAAe,CAACoD,MAAM,CAACZ,EAAE,CAAC,CAC/BO,MAAM,CAAC,GAAI,CAAAR,KAAK,yBAAA/B,MAAA,CAAyB2B,OAAO,CAAE,CAAC,CAAC,CACtD,CACF,CAAC,CAAE,KAAK,CAAC,CACX,CAAC,CAAC,CACJ,CAEQlB,aAAaA,CAACG,IAAS,CAAQ,CACrC,GAAIA,IAAI,CAACuB,SAAS,EAAI,IAAI,CAAC3C,eAAe,CAACmD,GAAG,CAAC/B,IAAI,CAACuB,SAAS,CAAC,CAAE,CAC9D,KAAM,CAAEG,OAAO,CAAEC,MAAO,CAAC,CAAG,IAAI,CAAC/C,eAAe,CAACqD,GAAG,CAACjC,IAAI,CAACuB,SAAS,CAAE,CACrE,IAAI,CAAC3C,eAAe,CAACoD,MAAM,CAAChC,IAAI,CAACuB,SAAS,CAAC,CAE3C,GAAIvB,IAAI,CAACI,KAAK,CAAE,CACduB,MAAM,CAAC,GAAI,CAAAR,KAAK,CAACnB,IAAI,CAACI,KAAK,CAAC,CAAC,CAC/B,CAAC,IAAM,CACLsB,OAAO,CAAC1B,IAAI,CAACkC,YAAY,EAAIlC,IAAI,CAAC,CACpC,CACF,CAAC,IAAM,IAAIA,IAAI,CAACmC,UAAU,CAAE,CAC1B,IAAI,CAACC,YAAY,CAACpC,IAAI,CAAC,CACzB,CACF,CAEQoC,YAAYA,CAACpC,IAAS,CAAQ,CACpC,OAAQA,IAAI,CAACmC,UAAU,EACrB,IAAK,wBAAwB,CAC3B,IAAI,CAACrE,UAAU,CAACG,SAAS,CAAG+B,IAAI,CAAC/B,SAAS,CAC1C,IAAI,CAACoE,IAAI,CAAC,cAAc,CAAErC,IAAI,CAAC/B,SAAS,CAAC,CACzC,MACF,IAAK,gBAAgB,CACnB,IAAI,CAACH,UAAU,CAACI,WAAW,CAAG,IAAI,CAClC,IAAI,CAACmE,IAAI,CAAC,eAAe,CAAC,CAC1B,MACF,IAAK,eAAe,CAClB,IAAI,CAACvE,UAAU,CAACI,WAAW,CAAG,KAAK,CACnC,IAAI,CAACmE,IAAI,CAAC,eAAe,CAAC,CAC1B,MACF,IAAK,mBAAmB,CACtB,IAAI,CAACvE,UAAU,CAACK,WAAW,CAAG,IAAI,CAClC,IAAI,CAACkE,IAAI,CAAC,kBAAkB,CAAC,CAC7B,MACF,IAAK,kBAAkB,CACrB,IAAI,CAACvE,UAAU,CAACK,WAAW,CAAG,KAAK,CACnC,IAAI,CAACkE,IAAI,CAAC,kBAAkB,CAAC,CAC7B,MACJ,CACF,CAEA;AACA,KAAc,CAAA3C,UAAUA,CAAA,CAAkB,CACxC,GAAI,CACF,KAAM,CAAA4C,IAAI,CAAG,KAAM,KAAI,CAAC5B,WAAW,CAAC,YAAY,CAAC,CACjD,IAAI,CAAC5C,UAAU,CAACE,OAAO,CAAGsE,IAAI,CAACC,UAAU,CAEzC,KAAM,CAAAC,KAAK,CAAG,KAAM,KAAI,CAAC9B,WAAW,CAAC,wBAAwB,CAAC,CAC9D,IAAI,CAAC5C,UAAU,CAACG,SAAS,CAAGuE,KAAK,CAACC,uBAAuB,CAEzD,KAAM,CAAAC,YAAY,CAAG,KAAM,KAAI,CAAChC,WAAW,CAAC,iBAAiB,CAAC,CAC9D,IAAI,CAAC5C,UAAU,CAACI,WAAW,CAAGwE,YAAY,CAACC,YAAY,CAEvD,KAAM,CAAAC,YAAY,CAAG,KAAM,KAAI,CAAClC,WAAW,CAAC,iBAAiB,CAAC,CAC9D,IAAI,CAAC5C,UAAU,CAACK,WAAW,CAAGyE,YAAY,CAACD,YAAY,CACzD,CAAE,MAAOvC,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CACjD,CACF,CAEA;AACA,KAAM,CAAAyC,SAASA,CAAA,CAAsB,CACnC,GAAI,CACF,KAAM,CAAApC,QAAQ,CAAG,KAAM,KAAI,CAACC,WAAW,CAAC,cAAc,CAAC,CACvD,MAAO,CAAAD,QAAQ,CAACqC,MAAM,CAACC,GAAG,CAAEP,KAAU,EAAKA,KAAK,CAACvE,SAAS,CAAC,CAC7D,CAAE,MAAOmC,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,MAAO,EAAE,CACX,CACF,CAEA,KAAM,CAAA4C,WAAWA,CAAC/E,SAAiB,CAAiB,CAClD,GAAI,CACF,KAAM,KAAI,CAACyC,WAAW,CAAC,wBAAwB,CAAE,CAAEzC,SAAU,CAAC,CAAC,CAC/D,IAAI,CAACH,UAAU,CAACG,SAAS,CAAGA,SAAS,CACvC,CAAE,MAAOmC,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAA6C,UAAUA,CAAA,CAAmB,CACjC,GAAI,CACF,KAAM,CAAAxC,QAAQ,CAAG,KAAM,KAAI,CAACC,WAAW,CAAC,cAAc,CAAC,CACvD,MAAO,CAAAD,QAAQ,CAACqC,MAAM,CAACI,OAAO,CAAEV,KAAU,EACxCA,KAAK,CAACW,OAAO,CAACJ,GAAG,CAAEK,MAAW,EAAApE,aAAA,CAAAA,aAAA,IACzBoE,MAAM,MACTnF,SAAS,CAAEuE,KAAK,CAACvE,SAAS,EAC1B,CACJ,CAAC,CACH,CAAE,MAAOmC,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,MAAO,EAAE,CACX,CACF,CAEA,KAAM,CAAAiD,YAAYA,CAACC,UAAkB,CAAErF,SAAkB,CAAiB,CACxE,GAAI,CACF,KAAM,CAAAuE,KAAK,CAAGvE,SAAS,EAAI,IAAI,CAACH,UAAU,CAACG,SAAS,CACpD,KAAM,KAAI,CAACyC,WAAW,CAAC,wBAAwB,CAAE,CAAE4C,UAAU,CAAErF,SAAS,CAAEuE,KAAM,CAAC,CAAC,CACpF,CAAE,MAAOpC,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAmD,eAAeA,CAACD,UAAkB,CAAEE,MAAc,CAAiB,CACvE,GAAI,CACF,KAAM,KAAI,CAAC9C,WAAW,CAAC,gBAAgB,CAAE,CACvC+C,SAAS,CAAEH,UAAU,CACrBI,cAAc,CAAEF,MAClB,CAAC,CAAC,CACJ,CAAE,MAAOpD,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,KAAM,CAAAuD,eAAeA,CAACL,UAAkB,CAAmB,CACzD,GAAI,CACF,KAAM,CAAA7C,QAAQ,CAAG,KAAM,KAAI,CAACC,WAAW,CAAC,gBAAgB,CAAE,CAAE+C,SAAS,CAAEH,UAAW,CAAC,CAAC,CACpF,MAAO,CAAA7C,QAAQ,CAACiD,cAAc,CAChC,CAAE,MAAOtD,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD,MAAO,IAAG,CACZ,CACF,CAEA;AACA,KAAM,CAAAwD,sBAAsBA,CAACC,SAAiB,CAAExC,OAAe,CAAiB,CAC9E,GAAI,CACF;AACA;AACA,KAAM,KAAI,CAACX,WAAW,CAAC,qBAAqB,CAAE,CAC5C4C,UAAU,CAAE,mBAAmB,CAC/BQ,UAAU,CAAED,SAAS,CACrBE,cAAc,CAAE,CAAE1C,OAAQ,CAC5B,CAAC,CAAC,CACJ,CAAE,MAAOjB,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,qCAAqC,CAAEA,KAAK,CAAC,CAC7D,CACF,CAEA;AACA,KAAM,CAAA4D,mBAAmBA,CAACC,IAAY,CAAE9E,GAAW,CAA8D,IAA5D,CAAA+E,KAAa,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,IAAE,CAAAG,MAAc,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAC9F,GAAI,CACF,KAAM,KAAI,CAACzD,WAAW,CAAC,aAAa,CAAE,CACpCzC,SAAS,CAAE,IAAI,CAACH,UAAU,CAACG,SAAS,CACpCwF,SAAS,CAAEQ,IAAI,CACfM,SAAS,CAAE,gBAAgB,CAC3BC,aAAa,CAAE,CACbrF,GAAG,CACH+E,KAAK,CACLI,MACF,CACF,CAAC,CAAC,CACJ,CAAE,MAAOlE,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD,KAAM,CAAAA,KAAK,CACb,CACF,CAKAqE,EAAEA,CAAC7E,KAAa,CAAE8E,QAAkB,CAAQ,CAC1C,GAAI,CAAC,IAAI,CAAC5F,SAAS,CAACiD,GAAG,CAACnC,KAAK,CAAC,CAAE,CAC9B,IAAI,CAACd,SAAS,CAAC8C,GAAG,CAAChC,KAAK,CAAE,EAAE,CAAC,CAC/B,CACA,IAAI,CAACd,SAAS,CAACmD,GAAG,CAACrC,KAAK,CAAC,CAAE+E,IAAI,CAACD,QAAQ,CAAC,CAC3C,CAEAE,GAAGA,CAAChF,KAAa,CAAE8E,QAAkB,CAAQ,CAC3C,GAAI,IAAI,CAAC5F,SAAS,CAACiD,GAAG,CAACnC,KAAK,CAAC,CAAE,CAC7B,KAAM,CAAAiF,SAAS,CAAG,IAAI,CAAC/F,SAAS,CAACmD,GAAG,CAACrC,KAAK,CAAE,CAC5C,KAAM,CAAAkF,KAAK,CAAGD,SAAS,CAACE,OAAO,CAACL,QAAQ,CAAC,CACzC,GAAII,KAAK,CAAG,CAAC,CAAC,CAAE,CACdD,SAAS,CAACG,MAAM,CAACF,KAAK,CAAE,CAAC,CAAC,CAC5B,CACF,CACF,CAEQzC,IAAIA,CAACzC,KAAa,CAAwB,SAAAqF,IAAA,CAAAd,SAAA,CAAAC,MAAA,CAAnBc,IAAI,KAAAC,KAAA,CAAAF,IAAA,GAAAA,IAAA,MAAAG,IAAA,GAAAA,IAAA,CAAAH,IAAA,CAAAG,IAAA,IAAJF,IAAI,CAAAE,IAAA,IAAAjB,SAAA,CAAAiB,IAAA,GACjC,GAAI,IAAI,CAACtG,SAAS,CAACiD,GAAG,CAACnC,KAAK,CAAC,CAAE,CAC7B,IAAI,CAACd,SAAS,CAACmD,GAAG,CAACrC,KAAK,CAAC,CAAEyF,OAAO,CAACX,QAAQ,EAAIA,QAAQ,CAAC,GAAGQ,IAAI,CAAC,CAAC,CACnE,CACF,CAEA;AACAI,aAAaA,CAAA,CAAkB,CAC7B,OAAAtG,aAAA,IAAY,IAAI,CAAClB,UAAU,EAC7B,CAEAC,WAAWA,CAAA,CAAY,CACrB,MAAO,KAAI,CAACD,UAAU,CAACC,WAAW,CACpC,CAEA;AACAwH,OAAOA,CAAA,CAAS,CACd,IAAI,CAAClF,UAAU,CAAC,CAAC,CACjB,IAAI,CAACvB,SAAS,CAAC0G,KAAK,CAAC,CAAC,CACxB,CACF,CAEA;AACA,MAAO,MAAM,CAAAC,cAAc,CAAG,GAAI,CAAA9H,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
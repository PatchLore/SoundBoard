{"ast":null,"code":"// Analytics service for tracking real user performance data\n\nclass AnalyticsService {\n  constructor() {\n    this.sessionId = void 0;\n    this.isProduction = void 0;\n    this.analyticsEndpoint = void 0;\n    this.events = [];\n    this.performanceMetrics = {};\n    this.sessionId = this.generateSessionId();\n    this.isProduction = process.env.NODE_ENV === 'production';\n    this.analyticsEndpoint = process.env.REACT_APP_ANALYTICS_ENDPOINT || '/api/analytics';\n\n    // Only track in production\n    if (this.isProduction) {\n      this.initializePerformanceTracking();\n    }\n  }\n  generateSessionId() {\n    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n  initializePerformanceTracking() {\n    // Track navigation timing\n    if (performance.timing) {\n      this.performanceMetrics.navigationStart = performance.timing.navigationStart;\n      this.performanceMetrics.loadEventEnd = performance.timing.loadEventEnd;\n      this.performanceMetrics.domContentLoadedEventEnd = performance.timing.domContentLoadedEventEnd;\n    }\n\n    // Track modern performance metrics\n    if ('getEntriesByType' in performance) {\n      const navigationEntries = performance.getEntriesByType('navigation');\n      if (navigationEntries.length > 0) {\n        const navEntry = navigationEntries[0];\n        this.performanceMetrics.timeToInteractive = navEntry.domInteractive;\n        this.performanceMetrics.firstContentfulPaint = navEntry.firstContentfulPaint || 0;\n      }\n    }\n\n    // Track device capabilities\n    this.performanceMetrics.userAgent = navigator.userAgent;\n    this.performanceMetrics.platform = navigator.platform;\n    this.performanceMetrics.hardwareConcurrency = navigator.hardwareConcurrency || 0;\n    this.performanceMetrics.deviceMemory = navigator.deviceMemory || 0;\n\n    // Track memory usage\n    if (performance.memory) {\n      this.performanceMetrics.memoryUsage = performance.memory.usedJSHeapSize;\n      this.performanceMetrics.memoryLimit = performance.memory.jsHeapSizeLimit;\n    }\n  }\n  trackAppLoad(metrics) {\n    if (!this.isProduction) {\n      console.log('ðŸ“Š Analytics (dev): App load tracked', metrics);\n      return;\n    }\n    const event = {\n      event: 'app_load',\n      timestamp: Date.now(),\n      data: {\n        ...this.performanceMetrics,\n        ...metrics,\n        sessionId: this.sessionId\n      },\n      sessionId: this.sessionId\n    };\n    this.events.push(event);\n    this.sendAnalytics(event);\n  }\n  trackUserInteraction(interaction, data) {\n    if (!this.isProduction) {\n      console.log('ðŸ“Š Analytics (dev): User interaction tracked', {\n        interaction,\n        data\n      });\n      return;\n    }\n    const event = {\n      event: 'user_interaction',\n      timestamp: Date.now(),\n      data: {\n        interaction,\n        data,\n        sessionId: this.sessionId,\n        ...this.performanceMetrics\n      },\n      sessionId: this.sessionId\n    };\n    this.events.push(event);\n    this.sendAnalytics(event);\n  }\n  trackPerformanceIssue(issue) {\n    if (!this.isProduction) {\n      console.log('ðŸ“Š Analytics (dev): Performance issue tracked', issue);\n      return;\n    }\n    const event = {\n      event: 'performance_issue',\n      timestamp: Date.now(),\n      data: {\n        ...issue,\n        sessionId: this.sessionId,\n        ...this.performanceMetrics\n      },\n      sessionId: this.sessionId\n    };\n    this.events.push(event);\n    this.sendAnalytics(event);\n  }\n  trackError(error) {\n    if (!this.isProduction) {\n      console.log('ðŸ“Š Analytics (dev): Error tracked', error);\n      return;\n    }\n    const event = {\n      event: 'error',\n      timestamp: Date.now(),\n      data: {\n        ...error,\n        sessionId: this.sessionId,\n        ...this.performanceMetrics\n      },\n      sessionId: this.sessionId\n    };\n    this.events.push(event);\n    this.sendAnalytics(event);\n  }\n  async sendAnalytics(event) {\n    try {\n      // Send to your analytics endpoint\n      await fetch(this.analyticsEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(event)\n      });\n\n      // Also send to Google Analytics if configured\n      if (typeof window.gtag !== 'undefined') {\n        window.gtag('event', event.event, {\n          event_category: 'performance',\n          event_label: event.sessionId,\n          value: event.timestamp,\n          custom_parameters: event.data\n        });\n      }\n\n      // Send to console in development\n      if (!this.isProduction) {\n        console.log('ðŸ“Š Analytics sent:', event);\n      }\n    } catch (error) {\n      // Don't let analytics errors break the app\n      console.warn('Analytics send failed:', error);\n    }\n  }\n  getSessionId() {\n    return this.sessionId;\n  }\n  getEvents() {\n    return this.events;\n  }\n  flushEvents() {\n    // Send all pending events\n    this.events.forEach(event => this.sendAnalytics(event));\n    this.events = [];\n  }\n}\n\n// Create singleton instance\nexport const analyticsService = new AnalyticsService();\n\n// Export for use in components\nexport default analyticsService;","map":{"version":3,"names":["AnalyticsService","constructor","sessionId","isProduction","analyticsEndpoint","events","performanceMetrics","generateSessionId","process","env","NODE_ENV","REACT_APP_ANALYTICS_ENDPOINT","initializePerformanceTracking","Date","now","Math","random","toString","substr","performance","timing","navigationStart","loadEventEnd","domContentLoadedEventEnd","navigationEntries","getEntriesByType","length","navEntry","timeToInteractive","domInteractive","firstContentfulPaint","userAgent","navigator","platform","hardwareConcurrency","deviceMemory","memory","memoryUsage","usedJSHeapSize","memoryLimit","jsHeapSizeLimit","trackAppLoad","metrics","console","log","event","timestamp","data","push","sendAnalytics","trackUserInteraction","interaction","trackPerformanceIssue","issue","trackError","error","fetch","method","headers","body","JSON","stringify","window","gtag","event_category","event_label","value","custom_parameters","warn","getSessionId","getEvents","flushEvents","forEach","analyticsService"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/services/analyticsService.ts"],"sourcesContent":["// Analytics service for tracking real user performance data\nexport interface PerformanceMetrics {\n  // Navigation timing\n  navigationStart: number;\n  loadEventEnd: number;\n  domContentLoadedEventEnd: number;\n  \n  // Resource loading\n  jsonLoadTime: number;\n  trackProcessingTime: number;\n  totalLoadTime: number;\n  \n  // Memory usage\n  memoryUsage: number;\n  memoryLimit: number;\n  \n  // User interaction\n  timeToInteractive: number;\n  firstContentfulPaint: number;\n  \n  // Device info\n  userAgent: string;\n  platform: string;\n  hardwareConcurrency: number;\n  deviceMemory: number;\n  \n  // App-specific metrics\n  tracksLoaded: number;\n  totalTracks: number;\n  loadSuccess: boolean;\n  errorType?: string;\n}\n\nexport interface AnalyticsEvent {\n  event: string;\n  timestamp: number;\n  data: any;\n  sessionId: string;\n}\n\nclass AnalyticsService {\n  private sessionId: string;\n  private isProduction: boolean;\n  private analyticsEndpoint: string;\n  private events: AnalyticsEvent[] = [];\n  private performanceMetrics: Partial<PerformanceMetrics> = {};\n\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.isProduction = process.env.NODE_ENV === 'production';\n    this.analyticsEndpoint = process.env.REACT_APP_ANALYTICS_ENDPOINT || '/api/analytics';\n    \n    // Only track in production\n    if (this.isProduction) {\n      this.initializePerformanceTracking();\n    }\n  }\n\n  private generateSessionId(): string {\n    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  private initializePerformanceTracking() {\n    // Track navigation timing\n    if (performance.timing) {\n      this.performanceMetrics.navigationStart = performance.timing.navigationStart;\n      this.performanceMetrics.loadEventEnd = performance.timing.loadEventEnd;\n      this.performanceMetrics.domContentLoadedEventEnd = performance.timing.domContentLoadedEventEnd;\n    }\n\n    // Track modern performance metrics\n    if ('getEntriesByType' in performance) {\n      const navigationEntries = performance.getEntriesByType('navigation');\n      if (navigationEntries.length > 0) {\n        const navEntry = navigationEntries[0] as PerformanceNavigationTiming;\n        this.performanceMetrics.timeToInteractive = navEntry.domInteractive;\n        this.performanceMetrics.firstContentfulPaint = (navEntry as any).firstContentfulPaint || 0;\n      }\n    }\n\n    // Track device capabilities\n    this.performanceMetrics.userAgent = navigator.userAgent;\n    this.performanceMetrics.platform = navigator.platform;\n    this.performanceMetrics.hardwareConcurrency = navigator.hardwareConcurrency || 0;\n    this.performanceMetrics.deviceMemory = (navigator as any).deviceMemory || 0;\n\n    // Track memory usage\n    if ((performance as any).memory) {\n      this.performanceMetrics.memoryUsage = (performance as any).memory.usedJSHeapSize;\n      this.performanceMetrics.memoryLimit = (performance as any).memory.jsHeapSizeLimit;\n    }\n  }\n\n  public trackAppLoad(metrics: {\n    jsonLoadTime: number;\n    trackProcessingTime: number;\n    totalLoadTime: number;\n    tracksLoaded: number;\n    totalTracks: number;\n    loadSuccess: boolean;\n    errorType?: string;\n  }) {\n    if (!this.isProduction) {\n      console.log('ðŸ“Š Analytics (dev): App load tracked', metrics);\n      return;\n    }\n\n    const event: AnalyticsEvent = {\n      event: 'app_load',\n      timestamp: Date.now(),\n      data: {\n        ...this.performanceMetrics,\n        ...metrics,\n        sessionId: this.sessionId\n      },\n      sessionId: this.sessionId\n    };\n\n    this.events.push(event);\n    this.sendAnalytics(event);\n  }\n\n  public trackUserInteraction(interaction: string, data?: any) {\n    if (!this.isProduction) {\n      console.log('ðŸ“Š Analytics (dev): User interaction tracked', { interaction, data });\n      return;\n    }\n\n    const event: AnalyticsEvent = {\n      event: 'user_interaction',\n      timestamp: Date.now(),\n      data: {\n        interaction,\n        data,\n        sessionId: this.sessionId,\n        ...this.performanceMetrics\n      },\n      sessionId: this.sessionId\n    };\n\n    this.events.push(event);\n    this.sendAnalytics(event);\n  }\n\n  public trackPerformanceIssue(issue: {\n    type: 'slow_loading' | 'memory_high' | 'timeout' | 'error';\n    details: string;\n    metrics: any;\n  }) {\n    if (!this.isProduction) {\n      console.log('ðŸ“Š Analytics (dev): Performance issue tracked', issue);\n      return;\n    }\n\n    const event: AnalyticsEvent = {\n      event: 'performance_issue',\n      timestamp: Date.now(),\n      data: {\n        ...issue,\n        sessionId: this.sessionId,\n        ...this.performanceMetrics\n      },\n      sessionId: this.sessionId\n    };\n\n    this.events.push(event);\n    this.sendAnalytics(event);\n  }\n\n  public trackError(error: {\n    type: string;\n    message: string;\n    stack?: string;\n    context?: any;\n  }) {\n    if (!this.isProduction) {\n      console.log('ðŸ“Š Analytics (dev): Error tracked', error);\n      return;\n    }\n\n    const event: AnalyticsEvent = {\n      event: 'error',\n      timestamp: Date.now(),\n      data: {\n        ...error,\n        sessionId: this.sessionId,\n        ...this.performanceMetrics\n      },\n      sessionId: this.sessionId\n    };\n\n    this.events.push(event);\n    this.sendAnalytics(event);\n  }\n\n  private async sendAnalytics(event: AnalyticsEvent) {\n    try {\n      // Send to your analytics endpoint\n      await fetch(this.analyticsEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(event),\n      });\n\n      // Also send to Google Analytics if configured\n      if (typeof (window as any).gtag !== 'undefined') {\n        (window as any).gtag('event', event.event, {\n          event_category: 'performance',\n          event_label: event.sessionId,\n          value: event.timestamp,\n          custom_parameters: event.data\n        });\n      }\n\n      // Send to console in development\n      if (!this.isProduction) {\n        console.log('ðŸ“Š Analytics sent:', event);\n      }\n\n    } catch (error) {\n      // Don't let analytics errors break the app\n      console.warn('Analytics send failed:', error);\n    }\n  }\n\n  public getSessionId(): string {\n    return this.sessionId;\n  }\n\n  public getEvents(): AnalyticsEvent[] {\n    return this.events;\n  }\n\n  public flushEvents() {\n    // Send all pending events\n    this.events.forEach(event => this.sendAnalytics(event));\n    this.events = [];\n  }\n}\n\n// Create singleton instance\nexport const analyticsService = new AnalyticsService();\n\n// Export for use in components\nexport default analyticsService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _objectSpread from\"/Users/allendunn/Documents/Stream/stream-soundboard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{audioController}from'./audioController';import{obsIntegration}from'./obsIntegration';import{discordBot}from'./discordBot';import{twitchIntegration}from'./twitchIntegration';class APIEndpoints{constructor(){this.endpoints=new Map();this.isRunning=false;this.server=null;this.setupEndpoints();}setupEndpoints(){// Audio Control Endpoints\nthis.addEndpoint({path:'/api/audio/play',method:'POST',description:'Play a track',requiresAuth:false,handler:async(req,res)=>{try{const{trackId,crossfade,volume}=req.body;if(!trackId){return this.sendResponse(res,400,{success:false,error:'Track ID is required'});}// This would find the track by ID\nconst track=await this.findTrackById(trackId);if(!track){return this.sendResponse(res,404,{success:false,error:'Track not found'});}if(volume!==undefined){audioController.setVolume(volume);}await audioController.playTrack(track,crossfade||false);this.sendResponse(res,200,{success:true,data:{message:'Track started playing',track:track.title}});}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error';this.sendResponse(res,500,{success:false,error:errorMessage});}}});this.addEndpoint({path:'/api/audio/pause',method:'POST',description:'Pause current track',requiresAuth:false,handler:async(req,res)=>{try{audioController.pause();this.sendResponse(res,200,{success:true,data:{message:'Track paused'}});}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error';this.sendResponse(res,500,{success:false,error:errorMessage});}}});this.addEndpoint({path:'/api/audio/resume',method:'POST',description:'Resume current track',requiresAuth:false,handler:async(req,res)=>{try{audioController.resume();this.sendResponse(res,200,{success:true,data:{message:'Track resumed'}});}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error';this.sendResponse(res,500,{success:false,error:errorMessage});}}});this.addEndpoint({path:'/api/audio/stop',method:'POST',description:'Stop current track',requiresAuth:false,handler:async(req,res)=>{try{audioController.stop();this.sendResponse(res,200,{success:true,data:{message:'Track stopped'}});}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error';this.sendResponse(res,500,{success:false,error:errorMessage});}}});this.addEndpoint({path:'/api/audio/volume',method:'POST',description:'Set volume',requiresAuth:false,handler:async(req,res)=>{try{const{volume}=req.body;if(volume===undefined||volume<0||volume>100){return this.sendResponse(res,400,{success:false,error:'Volume must be between 0-100'});}audioController.setVolume(volume/100);this.sendResponse(res,200,{success:true,data:{message:'Volume set',volume}});}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error';this.sendResponse(res,500,{success:false,error:errorMessage});}}});this.addEndpoint({path:'/api/audio/volume',method:'GET',description:'Get current volume',requiresAuth:false,handler:async(req,res)=>{try{const volume=Math.round(audioController.getVolume()*100);this.sendResponse(res,200,{success:true,data:{volume}});}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error';this.sendResponse(res,500,{success:false,error:errorMessage});}}});this.addEndpoint({path:'/api/audio/fade',method:'POST',description:'Fade audio in/out',requiresAuth:false,handler:async(req,res)=>{try{const{direction,duration}=req.body;if(!direction||!['in','out'].includes(direction)){return this.sendResponse(res,400,{success:false,error:'Direction must be \"in\" or \"out\"'});}const fadeDuration=duration||2;if(direction==='in'){audioController.fadeIn(fadeDuration);}else{audioController.fadeOut(fadeDuration);}this.sendResponse(res,200,{success:true,data:{message:\"Fading \".concat(direction),duration:fadeDuration}});}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error';this.sendResponse(res,500,{success:false,error:errorMessage});}}});this.addEndpoint({path:'/api/audio/ducking',method:'POST',description:'Configure audio ducking',requiresAuth:false,handler:async(req,res)=>{try{const{enabled,threshold,amount}=req.body;if(enabled===undefined){return this.sendResponse(res,400,{success:false,error:'Enabled state is required'});}audioController.enableDucking(enabled);if(threshold!==undefined){audioController.setDuckingThreshold(threshold);}if(amount!==undefined){audioController.setDuckingAmount(amount);}this.sendResponse(res,200,{success:true,data:{message:'Audio ducking configured',enabled}});}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error';this.sendResponse(res,500,{success:false,error:errorMessage});}}});this.addEndpoint({path:'/api/audio/ducking',method:'GET',description:'Get audio ducking status',requiresAuth:false,handler:async(req,res)=>{try{const settings=audioController.getSettings();this.sendResponse(res,200,{success:true,data:{enabled:settings.duckingEnabled,threshold:settings.duckingThreshold,amount:settings.duckingAmount}});}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error';this.sendResponse(res,500,{success:false,error:errorMessage});}}});// Status Endpoints\nthis.addEndpoint({path:'/api/status',method:'GET',description:'Get system status',requiresAuth:false,handler:async(req,res)=>{try{const currentTrack=audioController.getCurrentTrack();const isPlaying=audioController.getIsPlaying();const volume=audioController.getVolume();const settings=audioController.getSettings();this.sendResponse(res,200,{success:true,data:{audio:{isPlaying,volume:Math.round(volume*100),currentTrack:currentTrack?{id:currentTrack.id,title:currentTrack.title,duration:currentTrack.duration}:null,settings:{duckingEnabled:settings.duckingEnabled,normalizationEnabled:settings.normalizationEnabled,loopEnabled:settings.loopEnabled}},integrations:{obs:obsIntegration.isConnected(),discord:discordBot.isBotConnected(),twitch:twitchIntegration.isTwitchConnected()}}});}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error';this.sendResponse(res,500,{success:false,error:errorMessage});}}});// OBS Integration Endpoints\nthis.addEndpoint({path:'/api/obs/connect',method:'POST',description:'Connect to OBS',requiresAuth:false,handler:async(req,res)=>{try{const{host,port,password}=req.body;if(host&&port){obsIntegration.setConfig({host,port,password});}const connected=await obsIntegration.connect();this.sendResponse(res,200,{success:true,data:{connected,message:connected?'Connected to OBS':'Failed to connect to OBS'}});}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error';this.sendResponse(res,500,{success:false,error:errorMessage});}}});this.addEndpoint({path:'/api/obs/status',method:'GET',description:'Get OBS connection status',requiresAuth:false,handler:async(req,res)=>{try{const connection=obsIntegration.getConnection();this.sendResponse(res,200,{success:true,data:connection});}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error';this.sendResponse(res,500,{success:false,error:errorMessage});}}});// Discord Integration Endpoints\nthis.addEndpoint({path:'/api/discord/connect',method:'POST',description:'Connect Discord bot',requiresAuth:false,handler:async(req,res)=>{try{const{token,clientId,guildId,modRoleId}=req.body;if(token&&clientId&&guildId){discordBot.setConfig({token,clientId,guildId,modRoleId,enabled:true});}const connected=await discordBot.connect();this.sendResponse(res,200,{success:true,data:{connected,message:connected?'Discord bot connected':'Failed to connect Discord bot'}});}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error';this.sendResponse(res,500,{success:false,error:errorMessage});}}});// Twitch Integration Endpoints\nthis.addEndpoint({path:'/api/twitch/connect',method:'POST',description:'Connect to Twitch',requiresAuth:false,handler:async(req,res)=>{try{const{username,oauth,channel}=req.body;if(username&&oauth&&channel){twitchIntegration.setConfig({username,oauth,channel,enabled:true});}const connected=await twitchIntegration.connect();this.sendResponse(res,200,{success:true,data:{connected,message:connected?'Connected to Twitch':'Failed to connect to Twitch'}});}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error';this.sendResponse(res,500,{success:false,error:errorMessage});}}});// Health Check Endpoint\nthis.addEndpoint({path:'/api/health',method:'GET',description:'Health check endpoint',requiresAuth:false,handler:async(req,res)=>{this.sendResponse(res,200,{success:true,data:{status:'healthy',timestamp:new Date().toISOString(),version:'1.0.0'}});}});}addEndpoint(endpoint){this.endpoints.set(endpoint.path,endpoint);}async findTrackById(trackId){// This would search your track library by ID\n// For now, return null to indicate no track found\nreturn null;}sendResponse(res,status,data){res.status(status).json(_objectSpread(_objectSpread({},data),{},{timestamp:new Date().toISOString()}));}// Get all available endpoints\ngetEndpoints(){return new Map(this.endpoints);}// Get endpoint documentation\ngetDocumentation(){return Array.from(this.endpoints.values()).map(endpoint=>({path:endpoint.path,method:endpoint.method,description:endpoint.description,requiresAuth:endpoint.requiresAuth}));}// Start the API server\nasync startServer(){let port=arguments.length>0&&arguments[0]!==undefined?arguments[0]:3001;if(this.isRunning)return;try{// This would start an Express.js server\n// For now, we'll simulate it\nthis.isRunning=true;console.log(\"API server started on port \".concat(port));console.log('Available endpoints:');this.endpoints.forEach((endpoint,path)=>{console.log(\"  \".concat(endpoint.method,\" \").concat(path,\" - \").concat(endpoint.description));});}catch(error){console.error('Failed to start API server:',error);this.isRunning=false;}}// Stop the API server\nstopServer(){if(!this.isRunning)return;this.isRunning=false;console.log('API server stopped');}// Check if server is running\nisServerRunning(){return this.isRunning;}// Cleanup\ndestroy(){this.stopServer();this.endpoints.clear();}}// Export singleton instance\nexport const apiEndpoints=new APIEndpoints();","map":{"version":3,"names":["audioController","obsIntegration","discordBot","twitchIntegration","APIEndpoints","constructor","endpoints","Map","isRunning","server","setupEndpoints","addEndpoint","path","method","description","requiresAuth","handler","req","res","trackId","crossfade","volume","body","sendResponse","success","error","track","findTrackById","undefined","setVolume","playTrack","data","message","title","errorMessage","Error","pause","resume","stop","Math","round","getVolume","direction","duration","includes","fadeDuration","fadeIn","fadeOut","concat","enabled","threshold","amount","enableDucking","setDuckingThreshold","setDuckingAmount","settings","getSettings","duckingEnabled","duckingThreshold","duckingAmount","currentTrack","getCurrentTrack","isPlaying","getIsPlaying","audio","id","normalizationEnabled","loopEnabled","integrations","obs","isConnected","discord","isBotConnected","twitch","isTwitchConnected","host","port","password","setConfig","connected","connect","connection","getConnection","token","clientId","guildId","modRoleId","username","oauth","channel","status","timestamp","Date","toISOString","version","endpoint","set","json","_objectSpread","getEndpoints","getDocumentation","Array","from","values","map","startServer","arguments","length","console","log","forEach","stopServer","isServerRunning","destroy","clear","apiEndpoints"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/services/apiEndpoints.ts"],"sourcesContent":["import { audioController } from './audioController';\nimport { obsIntegration } from './obsIntegration';\nimport { discordBot } from './discordBot';\nimport { twitchIntegration } from './twitchIntegration';\nimport { StreamingTrack } from '../types/track';\n\nexport interface APIEndpoint {\n  path: string;\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  description: string;\n  requiresAuth: boolean;\n  handler: (req: any, res: any) => Promise<void>;\n}\n\nexport interface APIResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n\nexport interface TrackRequest {\n  trackId: string;\n  crossfade?: boolean;\n  volume?: number;\n}\n\nexport interface VolumeRequest {\n  volume: number;\n}\n\nexport interface DuckingRequest {\n  enabled: boolean;\n  threshold?: number;\n  amount?: number;\n}\n\nclass APIEndpoints {\n  private endpoints: Map<string, APIEndpoint> = new Map();\n  private isRunning = false;\n  private server: any = null;\n\n  constructor() {\n    this.setupEndpoints();\n  }\n\n  private setupEndpoints(): void {\n    // Audio Control Endpoints\n    this.addEndpoint({\n      path: '/api/audio/play',\n      method: 'POST',\n      description: 'Play a track',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const { trackId, crossfade, volume }: TrackRequest = req.body;\n          \n          if (!trackId) {\n            return this.sendResponse(res, 400, { success: false, error: 'Track ID is required' });\n          }\n\n          // This would find the track by ID\n          const track = await this.findTrackById(trackId);\n          if (!track) {\n            return this.sendResponse(res, 404, { success: false, error: 'Track not found' });\n          }\n\n          if (volume !== undefined) {\n            audioController.setVolume(volume);\n          }\n\n          await audioController.playTrack(track, crossfade || false);\n          \n          this.sendResponse(res, 200, {\n            success: true,\n            data: { message: 'Track started playing', track: track.title }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/pause',\n      method: 'POST',\n      description: 'Pause current track',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          audioController.pause();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: { message: 'Track paused' }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/resume',\n      method: 'POST',\n      description: 'Resume current track',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          audioController.resume();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: { message: 'Track resumed' }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/stop',\n      method: 'POST',\n      description: 'Stop current track',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          audioController.stop();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: { message: 'Track stopped' }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/volume',\n      method: 'POST',\n      description: 'Set volume',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const { volume }: VolumeRequest = req.body;\n          \n          if (volume === undefined || volume < 0 || volume > 100) {\n            return this.sendResponse(res, 400, { success: false, error: 'Volume must be between 0-100' });\n          }\n\n          audioController.setVolume(volume / 100);\n          \n          this.sendResponse(res, 200, {\n            success: true,\n            data: { message: 'Volume set', volume }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/volume',\n      method: 'GET',\n      description: 'Get current volume',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const volume = Math.round(audioController.getVolume() * 100);\n          this.sendResponse(res, 200, {\n            success: true,\n            data: { volume }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/fade',\n      method: 'POST',\n      description: 'Fade audio in/out',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const { direction, duration } = req.body;\n          \n          if (!direction || !['in', 'out'].includes(direction)) {\n            return this.sendResponse(res, 400, { success: false, error: 'Direction must be \"in\" or \"out\"' });\n          }\n\n          const fadeDuration = duration || 2;\n\n          if (direction === 'in') {\n            audioController.fadeIn(fadeDuration);\n          } else {\n            audioController.fadeOut(fadeDuration);\n          }\n\n          this.sendResponse(res, 200, {\n            success: true,\n            data: { message: `Fading ${direction}`, duration: fadeDuration }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/ducking',\n      method: 'POST',\n      description: 'Configure audio ducking',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const { enabled, threshold, amount }: DuckingRequest = req.body;\n          \n          if (enabled === undefined) {\n            return this.sendResponse(res, 400, { success: false, error: 'Enabled state is required' });\n          }\n\n          audioController.enableDucking(enabled);\n          \n          if (threshold !== undefined) {\n            audioController.setDuckingThreshold(threshold);\n          }\n          \n          if (amount !== undefined) {\n            audioController.setDuckingAmount(amount);\n          }\n\n          this.sendResponse(res, 200, {\n            success: true,\n            data: { message: 'Audio ducking configured', enabled }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/audio/ducking',\n      method: 'GET',\n      description: 'Get audio ducking status',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const settings = audioController.getSettings();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              enabled: settings.duckingEnabled,\n              threshold: settings.duckingThreshold,\n              amount: settings.duckingAmount\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    // Status Endpoints\n    this.addEndpoint({\n      path: '/api/status',\n      method: 'GET',\n      description: 'Get system status',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const currentTrack = audioController.getCurrentTrack();\n          const isPlaying = audioController.getIsPlaying();\n          const volume = audioController.getVolume();\n          const settings = audioController.getSettings();\n\n          this.sendResponse(res, 200, {\n            success: true,\n            data: {\n              audio: {\n                isPlaying,\n                volume: Math.round(volume * 100),\n                currentTrack: currentTrack ? {\n                  id: currentTrack.id,\n                  title: currentTrack.title,\n                  duration: currentTrack.duration\n                } : null,\n                settings: {\n                  duckingEnabled: settings.duckingEnabled,\n                  normalizationEnabled: settings.normalizationEnabled,\n                  loopEnabled: settings.loopEnabled\n                }\n              },\n              integrations: {\n                obs: obsIntegration.isConnected(),\n                discord: discordBot.isBotConnected(),\n                twitch: twitchIntegration.isTwitchConnected()\n              }\n            }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    // OBS Integration Endpoints\n    this.addEndpoint({\n      path: '/api/obs/connect',\n      method: 'POST',\n      description: 'Connect to OBS',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const { host, port, password } = req.body;\n          \n          if (host && port) {\n            obsIntegration.setConfig({ host, port, password });\n          }\n          \n          const connected = await obsIntegration.connect();\n          \n          this.sendResponse(res, 200, {\n            success: true,\n            data: { connected, message: connected ? 'Connected to OBS' : 'Failed to connect to OBS' }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    this.addEndpoint({\n      path: '/api/obs/status',\n      method: 'GET',\n      description: 'Get OBS connection status',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const connection = obsIntegration.getConnection();\n          this.sendResponse(res, 200, {\n            success: true,\n            data: connection\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    // Discord Integration Endpoints\n    this.addEndpoint({\n      path: '/api/discord/connect',\n      method: 'POST',\n      description: 'Connect Discord bot',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const { token, clientId, guildId, modRoleId } = req.body;\n          \n          if (token && clientId && guildId) {\n            discordBot.setConfig({ token, clientId, guildId, modRoleId, enabled: true });\n          }\n          \n          const connected = await discordBot.connect();\n          \n          this.sendResponse(res, 200, {\n            success: true,\n            data: { connected, message: connected ? 'Discord bot connected' : 'Failed to connect Discord bot' }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    // Twitch Integration Endpoints\n    this.addEndpoint({\n      path: '/api/twitch/connect',\n      method: 'POST',\n      description: 'Connect to Twitch',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        try {\n          const { username, oauth, channel } = req.body;\n          \n          if (username && oauth && channel) {\n            twitchIntegration.setConfig({ username, oauth, channel, enabled: true });\n          }\n          \n          const connected = await twitchIntegration.connect();\n          \n          this.sendResponse(res, 200, {\n            success: true,\n            data: { connected, message: connected ? 'Connected to Twitch' : 'Failed to connect to Twitch' }\n          });\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.sendResponse(res, 500, { success: false, error: errorMessage });\n        }\n      }\n    });\n\n    // Health Check Endpoint\n    this.addEndpoint({\n      path: '/api/health',\n      method: 'GET',\n      description: 'Health check endpoint',\n      requiresAuth: false,\n      handler: async (req, res) => {\n        this.sendResponse(res, 200, {\n          success: true,\n          data: { \n            status: 'healthy',\n            timestamp: new Date().toISOString(),\n            version: '1.0.0'\n          }\n        });\n      }\n    });\n  }\n\n  private addEndpoint(endpoint: APIEndpoint): void {\n    this.endpoints.set(endpoint.path, endpoint);\n  }\n\n  private async findTrackById(trackId: string): Promise<StreamingTrack | null> {\n    // This would search your track library by ID\n    // For now, return null to indicate no track found\n    return null;\n  }\n\n  private sendResponse(res: any, status: number, data: APIResponse): void {\n    res.status(status).json({\n      ...data,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  // Get all available endpoints\n  getEndpoints(): Map<string, APIEndpoint> {\n    return new Map(this.endpoints);\n  }\n\n  // Get endpoint documentation\n  getDocumentation(): any[] {\n    return Array.from(this.endpoints.values()).map(endpoint => ({\n      path: endpoint.path,\n      method: endpoint.method,\n      description: endpoint.description,\n      requiresAuth: endpoint.requiresAuth\n    }));\n  }\n\n  // Start the API server\n  async startServer(port: number = 3001): Promise<void> {\n    if (this.isRunning) return;\n\n    try {\n      // This would start an Express.js server\n      // For now, we'll simulate it\n      this.isRunning = true;\n      console.log(`API server started on port ${port}`);\n      console.log('Available endpoints:');\n      \n      this.endpoints.forEach((endpoint, path) => {\n        console.log(`  ${endpoint.method} ${path} - ${endpoint.description}`);\n      });\n    } catch (error) {\n      console.error('Failed to start API server:', error);\n      this.isRunning = false;\n    }\n  }\n\n  // Stop the API server\n  stopServer(): void {\n    if (!this.isRunning) return;\n\n    this.isRunning = false;\n    console.log('API server stopped');\n  }\n\n  // Check if server is running\n  isServerRunning(): boolean {\n    return this.isRunning;\n  }\n\n  // Cleanup\n  destroy(): void {\n    this.stopServer();\n    this.endpoints.clear();\n  }\n}\n\n// Export singleton instance\nexport const apiEndpoints = new APIEndpoints();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
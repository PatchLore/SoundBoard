{"ast":null,"code":"import _objectSpread from\"/Users/allendunn/Documents/Stream/stream-soundboard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{audioController}from'./audioController';class TwitchIntegration{constructor(){this.config={username:'',oauth:'',channel:'',enabled:false,modCommands:true,viewerCommands:true,cooldown:30};this.commands=new Map();this.isConnected=false;this.cooldowns=new Map();this.setupCommands();}setConfig(config){this.config=_objectSpread(_objectSpread({},this.config),config);}getConfig(){return _objectSpread({},this.config);}setupCommands(){// Sound request command\nthis.addCommand({name:'sound',description:'Request a sound to play',usage:'!sound <sound name>',modOnly:false,cooldown:60,execute:async(user,args)=>{if(args.length===0){console.log(\"@\".concat(user.username,\" Usage: !sound <sound name>\"));return;}const soundName=args.join(' ');console.log(\"@\".concat(user.username,\" Sound request: \").concat(soundName));}});// Play command for mods\nthis.addCommand({name:'play',description:'Play a track immediately (mod only)',usage:'!play <track name>',modOnly:true,cooldown:10,execute:async(user,args)=>{if(args.length===0){console.log(\"@\".concat(user.username,\" Usage: !play <track name>\"));return;}const trackName=args.join(' ');console.log(\"@\".concat(user.username,\" Playing: \").concat(trackName));}});// Stop command for mods\nthis.addCommand({name:'stop',description:'Stop current music (mod only)',usage:'!stop',modOnly:true,cooldown:5,execute:async user=>{audioController.stop();console.log(\"@\".concat(user.username,\" Music stopped!\"));}});// Volume command for mods\nthis.addCommand({name:'volume',description:'Set volume (mod only)',usage:'!volume <0-100>',modOnly:true,cooldown:10,execute:async(user,args)=>{if(args.length===0){const currentVolume=Math.round(audioController.getVolume()*100);console.log(\"@\".concat(user.username,\" Current volume: \").concat(currentVolume,\"%\"));return;}const volume=parseInt(args[0]);if(isNaN(volume)||volume<0||volume>100){console.log(\"@\".concat(user.username,\" Volume must be between 0-100\"));return;}audioController.setVolume(volume/100);console.log(\"@\".concat(user.username,\" Volume set to \").concat(volume,\"%\"));}});// Help command\nthis.addCommand({name:'help',description:'Show available commands',usage:'!help',modOnly:false,cooldown:30,execute:async user=>{const availableCommands=Array.from(this.commands.values()).filter(cmd=>!cmd.modOnly||user.isModerator).map(cmd=>\"\".concat(cmd.name,\" - \").concat(cmd.description)).join(', ');console.log(\"@\".concat(user.username,\" Available commands: \").concat(availableCommands));}});}addCommand(command){this.commands.set(command.name.toLowerCase(),command);}async executeCommand(user,message){var _args$shift;if(!message.startsWith('!'))return;const args=message.slice(1).trim().split(/ +/);const commandName=(_args$shift=args.shift())===null||_args$shift===void 0?void 0:_args$shift.toLowerCase();if(!commandName||!this.commands.has(commandName))return;const command=this.commands.get(commandName);if(command.modOnly&&!user.isModerator&&!user.isBroadcaster){console.log(\"@\".concat(user.username,\" This command is moderator-only\"));return;}try{await command.execute(user,args);}catch(error){console.error(\"Error executing command \".concat(commandName,\":\"),error);}}async handleMessage(user,message){if(message.startsWith('!')){await this.executeCommand(user,message);}}async connect(){if(!this.config.enabled){console.log('Twitch integration disabled');return false;}this.isConnected=true;console.log('Twitch integration connected');return true;}disconnect(){this.isConnected=false;console.log('Twitch integration disconnected');}isTwitchConnected(){return this.isConnected;}getCommands(){return new Map(this.commands);}destroy(){this.disconnect();this.commands.clear();this.cooldowns.clear();}}export const twitchIntegration=new TwitchIntegration();","map":{"version":3,"names":["audioController","TwitchIntegration","constructor","config","username","oauth","channel","enabled","modCommands","viewerCommands","cooldown","commands","Map","isConnected","cooldowns","setupCommands","setConfig","_objectSpread","getConfig","addCommand","name","description","usage","modOnly","execute","user","args","length","console","log","concat","soundName","join","trackName","stop","currentVolume","Math","round","getVolume","volume","parseInt","isNaN","setVolume","availableCommands","Array","from","values","filter","cmd","isModerator","map","command","set","toLowerCase","executeCommand","message","_args$shift","startsWith","slice","trim","split","commandName","shift","has","get","isBroadcaster","error","handleMessage","connect","disconnect","isTwitchConnected","getCommands","destroy","clear","twitchIntegration"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/services/twitchIntegration.ts"],"sourcesContent":["import { audioController } from './audioController';\n\nexport interface TwitchConfig {\n  username: string;\n  oauth: string;\n  channel: string;\n  enabled: boolean;\n  modCommands: boolean;\n  viewerCommands: boolean;\n  cooldown: number;\n}\n\nexport interface TwitchCommand {\n  name: string;\n  description: string;\n  usage: string;\n  modOnly: boolean;\n  cooldown: number;\n  execute: (user: TwitchUser, args: string[]) => Promise<void>;\n}\n\nexport interface TwitchUser {\n  username: string;\n  isModerator: boolean;\n  isSubscriber: boolean;\n  isVip: boolean;\n  isBroadcaster: boolean;\n}\n\nclass TwitchIntegration {\n  private config: TwitchConfig = {\n    username: '',\n    oauth: '',\n    channel: '',\n    enabled: false,\n    modCommands: true,\n    viewerCommands: true,\n    cooldown: 30\n  };\n  private commands: Map<string, TwitchCommand> = new Map();\n  private isConnected = false;\n  private cooldowns = new Map<string, number>();\n\n  constructor() {\n    this.setupCommands();\n  }\n\n  setConfig(config: Partial<TwitchConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  getConfig(): TwitchConfig {\n    return { ...this.config };\n  }\n\n  private setupCommands(): void {\n    // Sound request command\n    this.addCommand({\n      name: 'sound',\n      description: 'Request a sound to play',\n      usage: '!sound <sound name>',\n      modOnly: false,\n      cooldown: 60,\n      execute: async (user, args) => {\n        if (args.length === 0) {\n          console.log(`@${user.username} Usage: !sound <sound name>`);\n          return;\n        }\n        const soundName = args.join(' ');\n        console.log(`@${user.username} Sound request: ${soundName}`);\n      }\n    });\n\n    // Play command for mods\n    this.addCommand({\n      name: 'play',\n      description: 'Play a track immediately (mod only)',\n      usage: '!play <track name>',\n      modOnly: true,\n      cooldown: 10,\n      execute: async (user, args) => {\n        if (args.length === 0) {\n          console.log(`@${user.username} Usage: !play <track name>`);\n          return;\n        }\n        const trackName = args.join(' ');\n        console.log(`@${user.username} Playing: ${trackName}`);\n      }\n    });\n\n    // Stop command for mods\n    this.addCommand({\n      name: 'stop',\n      description: 'Stop current music (mod only)',\n      usage: '!stop',\n      modOnly: true,\n      cooldown: 5,\n      execute: async (user) => {\n        audioController.stop();\n        console.log(`@${user.username} Music stopped!`);\n      }\n    });\n\n    // Volume command for mods\n    this.addCommand({\n      name: 'volume',\n      description: 'Set volume (mod only)',\n      usage: '!volume <0-100>',\n      modOnly: true,\n      cooldown: 10,\n      execute: async (user, args) => {\n        if (args.length === 0) {\n          const currentVolume = Math.round(audioController.getVolume() * 100);\n          console.log(`@${user.username} Current volume: ${currentVolume}%`);\n          return;\n        }\n\n        const volume = parseInt(args[0]);\n        if (isNaN(volume) || volume < 0 || volume > 100) {\n          console.log(`@${user.username} Volume must be between 0-100`);\n          return;\n        }\n\n        audioController.setVolume(volume / 100);\n        console.log(`@${user.username} Volume set to ${volume}%`);\n      }\n    });\n\n    // Help command\n    this.addCommand({\n      name: 'help',\n      description: 'Show available commands',\n      usage: '!help',\n      modOnly: false,\n      cooldown: 30,\n      execute: async (user) => {\n        const availableCommands = Array.from(this.commands.values())\n          .filter(cmd => !cmd.modOnly || user.isModerator)\n          .map(cmd => `${cmd.name} - ${cmd.description}`)\n          .join(', ');\n        console.log(`@${user.username} Available commands: ${availableCommands}`);\n      }\n    });\n  }\n\n  private addCommand(command: TwitchCommand): void {\n    this.commands.set(command.name.toLowerCase(), command);\n  }\n\n  async executeCommand(user: TwitchUser, message: string): Promise<void> {\n    if (!message.startsWith('!')) return;\n\n    const args = message.slice(1).trim().split(/ +/);\n    const commandName = args.shift()?.toLowerCase();\n\n    if (!commandName || !this.commands.has(commandName)) return;\n\n    const command = this.commands.get(commandName)!;\n    \n    if (command.modOnly && !user.isModerator && !user.isBroadcaster) {\n      console.log(`@${user.username} This command is moderator-only`);\n      return;\n    }\n\n    try {\n      await command.execute(user, args);\n    } catch (error) {\n      console.error(`Error executing command ${commandName}:`, error);\n    }\n  }\n\n  async handleMessage(user: TwitchUser, message: string): Promise<void> {\n    if (message.startsWith('!')) {\n      await this.executeCommand(user, message);\n    }\n  }\n\n  async connect(): Promise<boolean> {\n    if (!this.config.enabled) {\n      console.log('Twitch integration disabled');\n      return false;\n    }\n\n    this.isConnected = true;\n    console.log('Twitch integration connected');\n    return true;\n  }\n\n  disconnect(): void {\n    this.isConnected = false;\n    console.log('Twitch integration disconnected');\n  }\n\n  isTwitchConnected(): boolean {\n    return this.isConnected;\n  }\n\n  getCommands(): Map<string, TwitchCommand> {\n    return new Map(this.commands);\n  }\n\n  destroy(): void {\n    this.disconnect();\n    this.commands.clear();\n    this.cooldowns.clear();\n  }\n}\n\nexport const twitchIntegration = new TwitchIntegration();\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
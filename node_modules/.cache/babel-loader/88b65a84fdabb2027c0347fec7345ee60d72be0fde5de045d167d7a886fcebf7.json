{"ast":null,"code":"import { audioController } from './audioController';\nclass TwitchIntegration {\n  constructor() {\n    this.config = {\n      username: '',\n      oauth: '',\n      channel: '',\n      enabled: false,\n      modCommands: true,\n      viewerCommands: true,\n      cooldown: 30\n    };\n    this.commands = new Map();\n    this.isConnected = false;\n    this.cooldowns = new Map();\n    this.setupCommands();\n  }\n  setConfig(config) {\n    this.config = {\n      ...this.config,\n      ...config\n    };\n  }\n  getConfig() {\n    return {\n      ...this.config\n    };\n  }\n  setupCommands() {\n    // Sound request command\n    this.addCommand({\n      name: 'sound',\n      description: 'Request a sound to play',\n      usage: '!sound <sound name>',\n      modOnly: false,\n      cooldown: 60,\n      execute: async (user, args) => {\n        if (args.length === 0) {\n          console.log(`@${user.username} Usage: !sound <sound name>`);\n          return;\n        }\n        const soundName = args.join(' ');\n        console.log(`@${user.username} Sound request: ${soundName}`);\n      }\n    });\n\n    // Play command for mods\n    this.addCommand({\n      name: 'play',\n      description: 'Play a track immediately (mod only)',\n      usage: '!play <track name>',\n      modOnly: true,\n      cooldown: 10,\n      execute: async (user, args) => {\n        if (args.length === 0) {\n          console.log(`@${user.username} Usage: !play <track name>`);\n          return;\n        }\n        const trackName = args.join(' ');\n        console.log(`@${user.username} Playing: ${trackName}`);\n      }\n    });\n\n    // Stop command for mods\n    this.addCommand({\n      name: 'stop',\n      description: 'Stop current music (mod only)',\n      usage: '!stop',\n      modOnly: true,\n      cooldown: 5,\n      execute: async user => {\n        audioController.stop();\n        console.log(`@${user.username} Music stopped!`);\n      }\n    });\n\n    // Volume command for mods\n    this.addCommand({\n      name: 'volume',\n      description: 'Set volume (mod only)',\n      usage: '!volume <0-100>',\n      modOnly: true,\n      cooldown: 10,\n      execute: async (user, args) => {\n        if (args.length === 0) {\n          const currentVolume = Math.round(audioController.getVolume() * 100);\n          console.log(`@${user.username} Current volume: ${currentVolume}%`);\n          return;\n        }\n        const volume = parseInt(args[0]);\n        if (isNaN(volume) || volume < 0 || volume > 100) {\n          console.log(`@${user.username} Volume must be between 0-100`);\n          return;\n        }\n        audioController.setVolume(volume / 100);\n        console.log(`@${user.username} Volume set to ${volume}%`);\n      }\n    });\n\n    // Help command\n    this.addCommand({\n      name: 'help',\n      description: 'Show available commands',\n      usage: '!help',\n      modOnly: false,\n      cooldown: 30,\n      execute: async user => {\n        const availableCommands = Array.from(this.commands.values()).filter(cmd => !cmd.modOnly || user.isModerator).map(cmd => `${cmd.name} - ${cmd.description}`).join(', ');\n        console.log(`@${user.username} Available commands: ${availableCommands}`);\n      }\n    });\n  }\n  addCommand(command) {\n    this.commands.set(command.name.toLowerCase(), command);\n  }\n  async executeCommand(user, message) {\n    var _args$shift;\n    if (!message.startsWith('!')) return;\n    const args = message.slice(1).trim().split(/ +/);\n    const commandName = (_args$shift = args.shift()) === null || _args$shift === void 0 ? void 0 : _args$shift.toLowerCase();\n    if (!commandName || !this.commands.has(commandName)) return;\n    const command = this.commands.get(commandName);\n    if (command.modOnly && !user.isModerator && !user.isBroadcaster) {\n      console.log(`@${user.username} This command is moderator-only`);\n      return;\n    }\n    try {\n      await command.execute(user, args);\n    } catch (error) {\n      console.error(`Error executing command ${commandName}:`, error);\n    }\n  }\n  async handleMessage(user, message) {\n    if (message.startsWith('!')) {\n      await this.executeCommand(user, message);\n    }\n  }\n  async connect() {\n    if (!this.config.enabled) {\n      console.log('Twitch integration disabled');\n      return false;\n    }\n    this.isConnected = true;\n    console.log('Twitch integration connected');\n    return true;\n  }\n  disconnect() {\n    this.isConnected = false;\n    console.log('Twitch integration disconnected');\n  }\n  isTwitchConnected() {\n    return this.isConnected;\n  }\n  getCommands() {\n    return new Map(this.commands);\n  }\n  destroy() {\n    this.disconnect();\n    this.commands.clear();\n    this.cooldowns.clear();\n  }\n}\nexport const twitchIntegration = new TwitchIntegration();","map":{"version":3,"names":["audioController","TwitchIntegration","constructor","config","username","oauth","channel","enabled","modCommands","viewerCommands","cooldown","commands","Map","isConnected","cooldowns","setupCommands","setConfig","getConfig","addCommand","name","description","usage","modOnly","execute","user","args","length","console","log","soundName","join","trackName","stop","currentVolume","Math","round","getVolume","volume","parseInt","isNaN","setVolume","availableCommands","Array","from","values","filter","cmd","isModerator","map","command","set","toLowerCase","executeCommand","message","_args$shift","startsWith","slice","trim","split","commandName","shift","has","get","isBroadcaster","error","handleMessage","connect","disconnect","isTwitchConnected","getCommands","destroy","clear","twitchIntegration"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/services/twitchIntegration.ts"],"sourcesContent":["import { audioController } from './audioController';\n\nexport interface TwitchConfig {\n  username: string;\n  oauth: string;\n  channel: string;\n  enabled: boolean;\n  modCommands: boolean;\n  viewerCommands: boolean;\n  cooldown: number;\n}\n\nexport interface TwitchCommand {\n  name: string;\n  description: string;\n  usage: string;\n  modOnly: boolean;\n  cooldown: number;\n  execute: (user: TwitchUser, args: string[]) => Promise<void>;\n}\n\nexport interface TwitchUser {\n  username: string;\n  isModerator: boolean;\n  isSubscriber: boolean;\n  isVip: boolean;\n  isBroadcaster: boolean;\n}\n\nclass TwitchIntegration {\n  private config: TwitchConfig = {\n    username: '',\n    oauth: '',\n    channel: '',\n    enabled: false,\n    modCommands: true,\n    viewerCommands: true,\n    cooldown: 30\n  };\n  private commands: Map<string, TwitchCommand> = new Map();\n  private isConnected = false;\n  private cooldowns = new Map<string, number>();\n\n  constructor() {\n    this.setupCommands();\n  }\n\n  setConfig(config: Partial<TwitchConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  getConfig(): TwitchConfig {\n    return { ...this.config };\n  }\n\n  private setupCommands(): void {\n    // Sound request command\n    this.addCommand({\n      name: 'sound',\n      description: 'Request a sound to play',\n      usage: '!sound <sound name>',\n      modOnly: false,\n      cooldown: 60,\n      execute: async (user, args) => {\n        if (args.length === 0) {\n          console.log(`@${user.username} Usage: !sound <sound name>`);\n          return;\n        }\n        const soundName = args.join(' ');\n        console.log(`@${user.username} Sound request: ${soundName}`);\n      }\n    });\n\n    // Play command for mods\n    this.addCommand({\n      name: 'play',\n      description: 'Play a track immediately (mod only)',\n      usage: '!play <track name>',\n      modOnly: true,\n      cooldown: 10,\n      execute: async (user, args) => {\n        if (args.length === 0) {\n          console.log(`@${user.username} Usage: !play <track name>`);\n          return;\n        }\n        const trackName = args.join(' ');\n        console.log(`@${user.username} Playing: ${trackName}`);\n      }\n    });\n\n    // Stop command for mods\n    this.addCommand({\n      name: 'stop',\n      description: 'Stop current music (mod only)',\n      usage: '!stop',\n      modOnly: true,\n      cooldown: 5,\n      execute: async (user) => {\n        audioController.stop();\n        console.log(`@${user.username} Music stopped!`);\n      }\n    });\n\n    // Volume command for mods\n    this.addCommand({\n      name: 'volume',\n      description: 'Set volume (mod only)',\n      usage: '!volume <0-100>',\n      modOnly: true,\n      cooldown: 10,\n      execute: async (user, args) => {\n        if (args.length === 0) {\n          const currentVolume = Math.round(audioController.getVolume() * 100);\n          console.log(`@${user.username} Current volume: ${currentVolume}%`);\n          return;\n        }\n\n        const volume = parseInt(args[0]);\n        if (isNaN(volume) || volume < 0 || volume > 100) {\n          console.log(`@${user.username} Volume must be between 0-100`);\n          return;\n        }\n\n        audioController.setVolume(volume / 100);\n        console.log(`@${user.username} Volume set to ${volume}%`);\n      }\n    });\n\n    // Help command\n    this.addCommand({\n      name: 'help',\n      description: 'Show available commands',\n      usage: '!help',\n      modOnly: false,\n      cooldown: 30,\n      execute: async (user) => {\n        const availableCommands = Array.from(this.commands.values())\n          .filter(cmd => !cmd.modOnly || user.isModerator)\n          .map(cmd => `${cmd.name} - ${cmd.description}`)\n          .join(', ');\n        console.log(`@${user.username} Available commands: ${availableCommands}`);\n      }\n    });\n  }\n\n  private addCommand(command: TwitchCommand): void {\n    this.commands.set(command.name.toLowerCase(), command);\n  }\n\n  async executeCommand(user: TwitchUser, message: string): Promise<void> {\n    if (!message.startsWith('!')) return;\n\n    const args = message.slice(1).trim().split(/ +/);\n    const commandName = args.shift()?.toLowerCase();\n\n    if (!commandName || !this.commands.has(commandName)) return;\n\n    const command = this.commands.get(commandName)!;\n    \n    if (command.modOnly && !user.isModerator && !user.isBroadcaster) {\n      console.log(`@${user.username} This command is moderator-only`);\n      return;\n    }\n\n    try {\n      await command.execute(user, args);\n    } catch (error) {\n      console.error(`Error executing command ${commandName}:`, error);\n    }\n  }\n\n  async handleMessage(user: TwitchUser, message: string): Promise<void> {\n    if (message.startsWith('!')) {\n      await this.executeCommand(user, message);\n    }\n  }\n\n  async connect(): Promise<boolean> {\n    if (!this.config.enabled) {\n      console.log('Twitch integration disabled');\n      return false;\n    }\n\n    this.isConnected = true;\n    console.log('Twitch integration connected');\n    return true;\n  }\n\n  disconnect(): void {\n    this.isConnected = false;\n    console.log('Twitch integration disconnected');\n  }\n\n  isTwitchConnected(): boolean {\n    return this.isConnected;\n  }\n\n  getCommands(): Map<string, TwitchCommand> {\n    return new Map(this.commands);\n  }\n\n  destroy(): void {\n    this.disconnect();\n    this.commands.clear();\n    this.cooldowns.clear();\n  }\n}\n\nexport const twitchIntegration = new TwitchIntegration();\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/allendunn/Documents/Stream/stream-soundboard/src/components/PlaceholderAvatar.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaceholderAvatar = ({\n  name,\n  size = 'md',\n  className = ''\n}) => {\n  const getInitials = name => {\n    return name.split(' ').map(word => word.charAt(0)).join('').toUpperCase().slice(0, 2);\n  };\n  const getSizeClasses = size => {\n    switch (size) {\n      case 'sm':\n        return 'h-6 w-6 text-xs';\n      case 'md':\n        return 'h-8 w-8 text-sm';\n      case 'lg':\n        return 'h-12 w-12 text-lg';\n      case 'xl':\n        return 'h-16 w-16 text-xl';\n      default:\n        return 'h-8 w-8 text-sm';\n    }\n  };\n  const getRandomColor = name => {\n    const colors = ['bg-blue-500', 'bg-green-500', 'bg-purple-500', 'bg-pink-500', 'bg-indigo-500', 'bg-yellow-500', 'bg-red-500', 'bg-teal-500'];\n\n    // Generate a consistent color based on the name\n    let hash = 0;\n    for (let i = 0; i < name.length; i++) {\n      hash = name.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    const index = Math.abs(hash) % colors.length;\n    return colors[index];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${getSizeClasses(size)} ${getRandomColor(name)} rounded-full flex items-center justify-center text-white font-semibold ${className}`,\n    title: name,\n    children: getInitials(name)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_c = PlaceholderAvatar;\nexport default PlaceholderAvatar;\nvar _c;\n$RefreshReg$(_c, \"PlaceholderAvatar\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","PlaceholderAvatar","name","size","className","getInitials","split","map","word","charAt","join","toUpperCase","slice","getSizeClasses","getRandomColor","colors","hash","i","length","charCodeAt","index","Math","abs","title","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/components/PlaceholderAvatar.tsx"],"sourcesContent":["import React from 'react';\n\ninterface PlaceholderAvatarProps {\n  name: string;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  className?: string;\n}\n\nconst PlaceholderAvatar: React.FC<PlaceholderAvatarProps> = ({ name, size = 'md', className = '' }) => {\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(word => word.charAt(0))\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getSizeClasses = (size: string) => {\n    switch (size) {\n      case 'sm':\n        return 'h-6 w-6 text-xs';\n      case 'md':\n        return 'h-8 w-8 text-sm';\n      case 'lg':\n        return 'h-12 w-12 text-lg';\n      case 'xl':\n        return 'h-16 w-16 text-xl';\n      default:\n        return 'h-8 w-8 text-sm';\n    }\n  };\n\n  const getRandomColor = (name: string) => {\n    const colors = [\n      'bg-blue-500',\n      'bg-green-500',\n      'bg-purple-500',\n      'bg-pink-500',\n      'bg-indigo-500',\n      'bg-yellow-500',\n      'bg-red-500',\n      'bg-teal-500'\n    ];\n    \n    // Generate a consistent color based on the name\n    let hash = 0;\n    for (let i = 0; i < name.length; i++) {\n      hash = name.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    const index = Math.abs(hash) % colors.length;\n    return colors[index];\n  };\n\n  return (\n    <div\n      className={`${getSizeClasses(size)} ${getRandomColor(name)} rounded-full flex items-center justify-center text-white font-semibold ${className}`}\n      title={name}\n    >\n      {getInitials(name)}\n    </div>\n  );\n};\n\nexport default PlaceholderAvatar;\n\n\n\n\n\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ1B,MAAMC,iBAAmD,GAAGA,CAAC;EAAEC,IAAI;EAAEC,IAAI,GAAG,IAAI;EAAEC,SAAS,GAAG;AAAG,CAAC,KAAK;EACrG,MAAMC,WAAW,GAAIH,IAAY,IAAK;IACpC,OAAOA,IAAI,CACRI,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,CAC3BC,IAAI,CAAC,EAAE,CAAC,CACRC,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAChB,CAAC;EAED,MAAMC,cAAc,GAAIV,IAAY,IAAK;IACvC,QAAQA,IAAI;MACV,KAAK,IAAI;QACP,OAAO,iBAAiB;MAC1B,KAAK,IAAI;QACP,OAAO,iBAAiB;MAC1B,KAAK,IAAI;QACP,OAAO,mBAAmB;MAC5B,KAAK,IAAI;QACP,OAAO,mBAAmB;MAC5B;QACE,OAAO,iBAAiB;IAC5B;EACF,CAAC;EAED,MAAMW,cAAc,GAAIZ,IAAY,IAAK;IACvC,MAAMa,MAAM,GAAG,CACb,aAAa,EACb,cAAc,EACd,eAAe,EACf,aAAa,EACb,eAAe,EACf,eAAe,EACf,YAAY,EACZ,aAAa,CACd;;IAED;IACA,IAAIC,IAAI,GAAG,CAAC;IACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,IAAI,CAACgB,MAAM,EAAED,CAAC,EAAE,EAAE;MACpCD,IAAI,GAAGd,IAAI,CAACiB,UAAU,CAACF,CAAC,CAAC,IAAI,CAACD,IAAI,IAAI,CAAC,IAAIA,IAAI,CAAC;IAClD;IACA,MAAMI,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACN,IAAI,CAAC,GAAGD,MAAM,CAACG,MAAM;IAC5C,OAAOH,MAAM,CAACK,KAAK,CAAC;EACtB,CAAC;EAED,oBACEpB,OAAA;IACEI,SAAS,EAAE,GAAGS,cAAc,CAACV,IAAI,CAAC,IAAIW,cAAc,CAACZ,IAAI,CAAC,2EAA2EE,SAAS,EAAG;IACjJmB,KAAK,EAAErB,IAAK;IAAAsB,QAAA,EAEXnB,WAAW,CAACH,IAAI;EAAC;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEV,CAAC;AAACC,EAAA,GAtDI5B,iBAAmD;AAwDzD,eAAeA,iBAAiB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
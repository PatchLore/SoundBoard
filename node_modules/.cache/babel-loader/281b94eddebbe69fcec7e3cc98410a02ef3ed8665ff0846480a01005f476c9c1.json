{"ast":null,"code":"// Audio controller service to manage track playback\nclass AudioController {\n  constructor() {\n    this.currentPlayingTrackId = null;\n    this.listeners = new Map();\n    this.volume = 0.5;\n    this.isPlaying = false;\n    this.settings = {\n      volume: 0.5,\n      fadeInDuration: 2,\n      fadeOutDuration: 2,\n      crossfadeDuration: 1,\n      duckingEnabled: false,\n      duckingThreshold: -20,\n      duckingAmount: 0.5,\n      normalizationEnabled: false,\n      loopEnabled: false,\n      loopCount: 1\n    };\n    this.hotkeys = new Map();\n    this.eventListeners = new Map();\n  }\n  // Set the currently playing track\n  setPlayingTrack(trackId) {\n    console.log('🎵 AudioController: Setting playing track to:', trackId);\n\n    // Stop any previously playing track (but not the current one)\n    if (this.currentPlayingTrackId && this.currentPlayingTrackId !== trackId) {\n      console.log('🎵 AudioController: Stopping previous track:', this.currentPlayingTrackId);\n      this.stopTrack(this.currentPlayingTrackId);\n    }\n    this.currentPlayingTrackId = trackId;\n    this.isPlaying = true;\n    this.emit('trackStarted', trackId);\n    console.log('🎵 AudioController: Now playing track:', trackId);\n  }\n\n  // Stop a specific track\n  stopTrack(trackId) {\n    console.log('🎵 AudioController: Stop track called for:', trackId);\n\n    // Only stop if this is the currently playing track\n    if (this.currentPlayingTrackId === trackId) {\n      console.log('🎵 AudioController: Stopping currently playing track:', trackId);\n      this.currentPlayingTrackId = null;\n      this.isPlaying = false;\n\n      // Notify listeners that this track should stop\n      const listener = this.listeners.get(trackId);\n      if (listener) {\n        listener();\n      }\n    } else {\n      console.log('🎵 AudioController: Track not currently playing, ignoring stop:', trackId);\n    }\n    console.log('🎵 AudioController: Stop track completed for:', trackId);\n  }\n\n  // Stop all tracks\n  stopAllTracks() {\n    this.currentPlayingTrackId = null;\n    this.isPlaying = false;\n    this.listeners.forEach(listener => listener());\n    this.emit('stopped');\n    console.log('🎵 Stopped all tracks');\n  }\n\n  // Get currently playing track\n  getCurrentPlayingTrack() {\n    return this.currentPlayingTrackId;\n  }\n\n  // Register a stop listener for a track\n  registerStopListener(trackId, callback) {\n    this.listeners.set(trackId, callback);\n  }\n\n  // Unregister a stop listener\n  unregisterStopListener(trackId) {\n    this.listeners.delete(trackId);\n  }\n\n  // Check if a track is currently playing\n  isTrackPlaying(trackId) {\n    return this.currentPlayingTrackId === trackId;\n  }\n\n  // Volume control\n  setVolume(volume) {\n    this.volume = Math.max(0, Math.min(1, volume));\n    this.settings.volume = this.volume;\n    this.emit('volumeChanged', this.volume);\n    console.log('🔊 Volume set to:', this.volume);\n  }\n  getVolume() {\n    return this.volume;\n  }\n\n  // Playback control\n  pause() {\n    this.isPlaying = false;\n    this.emit('paused');\n    console.log('⏸️ Audio paused');\n  }\n  resume() {\n    this.isPlaying = true;\n    this.emit('resumed');\n    console.log('▶️ Audio resumed');\n  }\n  stop() {\n    this.stopAllTracks();\n  }\n\n  // Track playback\n  async playTrack(track, crossfade = false) {\n    this.setPlayingTrack(track.id);\n    console.log('🎵 Playing track:', track.title, 'crossfade:', crossfade);\n  }\n\n  // Fade effects\n  fadeIn(duration) {\n    console.log('🔊 Fading in over', duration, 'seconds');\n    this.emit('fadeIn', duration);\n  }\n  fadeOut(duration) {\n    console.log('🔊 Fading out over', duration, 'seconds');\n    this.emit('fadeOut', duration);\n  }\n\n  // Settings management\n  getSettings() {\n    return {\n      ...this.settings\n    };\n  }\n  enableDucking(enabled) {\n    this.settings.duckingEnabled = enabled;\n    console.log('🔊 Ducking enabled:', enabled);\n  }\n  setDuckingThreshold(threshold) {\n    this.settings.duckingThreshold = threshold;\n    console.log('🔊 Ducking threshold set to:', threshold);\n  }\n  setDuckingAmount(amount) {\n    this.settings.duckingAmount = amount;\n    console.log('🔊 Ducking amount set to:', amount);\n  }\n  enableNormalization(enabled) {\n    this.settings.normalizationEnabled = enabled;\n    console.log('🔊 Normalization enabled:', enabled);\n  }\n  setLooping(enabled, count) {\n    this.settings.loopEnabled = enabled;\n    this.settings.loopCount = count;\n    console.log('🔊 Looping set to:', enabled, 'count:', count);\n  }\n\n  // Hotkey management\n  getHotkeys() {\n    return new Map(this.hotkeys);\n  }\n  addHotkey(config) {\n    this.hotkeys.set(config.key, config);\n    console.log('⌨️ Hotkey added:', config);\n  }\n  removeHotkey(key) {\n    this.hotkeys.delete(key);\n    console.log('⌨️ Hotkey removed:', key);\n  }\n  enableHotkeys(enabled) {\n    console.log('⌨️ Hotkeys enabled:', enabled);\n  }\n\n  // Status methods\n  getIsPlaying() {\n    return this.isPlaying;\n  }\n  getCurrentTrack() {\n    // This would need to be implemented to return the actual track object\n    return null;\n  }\n\n  // Event system\n  on(event, callback) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(callback);\n  }\n  off(event, callback) {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n  emit(event, ...args) {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.forEach(callback => callback(...args));\n    }\n  }\n}\n\n// Create singleton instance\nexport const audioController = new AudioController();\nexport default audioController;","map":{"version":3,"names":["AudioController","constructor","currentPlayingTrackId","listeners","Map","volume","isPlaying","settings","fadeInDuration","fadeOutDuration","crossfadeDuration","duckingEnabled","duckingThreshold","duckingAmount","normalizationEnabled","loopEnabled","loopCount","hotkeys","eventListeners","setPlayingTrack","trackId","console","log","stopTrack","emit","listener","get","stopAllTracks","forEach","getCurrentPlayingTrack","registerStopListener","callback","set","unregisterStopListener","delete","isTrackPlaying","setVolume","Math","max","min","getVolume","pause","resume","stop","playTrack","track","crossfade","id","title","fadeIn","duration","fadeOut","getSettings","enableDucking","enabled","setDuckingThreshold","threshold","setDuckingAmount","amount","enableNormalization","setLooping","count","getHotkeys","addHotkey","config","key","removeHotkey","enableHotkeys","getIsPlaying","getCurrentTrack","on","event","has","push","off","index","indexOf","splice","args","audioController"],"sources":["/Users/allendunn/Documents/Stream/stream-soundboard/src/services/audioController.ts"],"sourcesContent":["import { StreamingTrack } from '../types/track';\n\nexport interface AudioSettings {\n  volume: number;\n  fadeInDuration: number; // in seconds\n  fadeOutDuration: number; // in seconds\n  crossfadeDuration: number; // in seconds\n  duckingEnabled: boolean;\n  duckingThreshold: number; // dB threshold for ducking\n  duckingAmount: number; // how much to reduce volume (0-1)\n  normalizationEnabled: boolean;\n  loopEnabled: boolean;\n  loopCount: number; // -1 for infinite\n}\n\nexport interface HotkeyConfig {\n  key: string;\n  ctrl?: boolean;\n  shift?: boolean;\n  alt?: boolean;\n  action: 'play' | 'pause' | 'next' | 'previous' | 'volume_up' | 'volume_down' | 'mute' | 'duck';\n  trackId?: string;\n}\n\n// Audio controller service to manage track playback\nclass AudioController {\n  private currentPlayingTrackId: string | null = null;\n  private listeners: Map<string, () => void> = new Map();\n  private volume: number = 0.5;\n  private isPlaying: boolean = false;\n  private settings: AudioSettings = {\n    volume: 0.5,\n    fadeInDuration: 2,\n    fadeOutDuration: 2,\n    crossfadeDuration: 1,\n    duckingEnabled: false,\n    duckingThreshold: -20,\n    duckingAmount: 0.5,\n    normalizationEnabled: false,\n    loopEnabled: false,\n    loopCount: 1\n  };\n  private hotkeys: Map<string, HotkeyConfig> = new Map();\n  private eventListeners: Map<string, Function[]> = new Map();\n\n  // Set the currently playing track\n  setPlayingTrack(trackId: string) {\n    console.log('🎵 AudioController: Setting playing track to:', trackId);\n    \n    // Stop any previously playing track (but not the current one)\n    if (this.currentPlayingTrackId && this.currentPlayingTrackId !== trackId) {\n      console.log('🎵 AudioController: Stopping previous track:', this.currentPlayingTrackId);\n      this.stopTrack(this.currentPlayingTrackId);\n    }\n    \n    this.currentPlayingTrackId = trackId;\n    this.isPlaying = true;\n    this.emit('trackStarted', trackId);\n    console.log('🎵 AudioController: Now playing track:', trackId);\n  }\n\n  // Stop a specific track\n  stopTrack(trackId: string) {\n    console.log('🎵 AudioController: Stop track called for:', trackId);\n    \n    // Only stop if this is the currently playing track\n    if (this.currentPlayingTrackId === trackId) {\n      console.log('🎵 AudioController: Stopping currently playing track:', trackId);\n      this.currentPlayingTrackId = null;\n      this.isPlaying = false;\n      \n      // Notify listeners that this track should stop\n      const listener = this.listeners.get(trackId);\n      if (listener) {\n        listener();\n      }\n    } else {\n      console.log('🎵 AudioController: Track not currently playing, ignoring stop:', trackId);\n    }\n    \n    console.log('🎵 AudioController: Stop track completed for:', trackId);\n  }\n\n  // Stop all tracks\n  stopAllTracks() {\n    this.currentPlayingTrackId = null;\n    this.isPlaying = false;\n    this.listeners.forEach(listener => listener());\n    this.emit('stopped');\n    console.log('🎵 Stopped all tracks');\n  }\n\n  // Get currently playing track\n  getCurrentPlayingTrack(): string | null {\n    return this.currentPlayingTrackId;\n  }\n\n  // Register a stop listener for a track\n  registerStopListener(trackId: string, callback: () => void) {\n    this.listeners.set(trackId, callback);\n  }\n\n  // Unregister a stop listener\n  unregisterStopListener(trackId: string) {\n    this.listeners.delete(trackId);\n  }\n\n  // Check if a track is currently playing\n  isTrackPlaying(trackId: string): boolean {\n    return this.currentPlayingTrackId === trackId;\n  }\n\n  // Volume control\n  setVolume(volume: number) {\n    this.volume = Math.max(0, Math.min(1, volume));\n    this.settings.volume = this.volume;\n    this.emit('volumeChanged', this.volume);\n    console.log('🔊 Volume set to:', this.volume);\n  }\n\n  getVolume(): number {\n    return this.volume;\n  }\n\n  // Playback control\n  pause() {\n    this.isPlaying = false;\n    this.emit('paused');\n    console.log('⏸️ Audio paused');\n  }\n\n  resume() {\n    this.isPlaying = true;\n    this.emit('resumed');\n    console.log('▶️ Audio resumed');\n  }\n\n  stop() {\n    this.stopAllTracks();\n  }\n\n  // Track playback\n  async playTrack(track: StreamingTrack, crossfade: boolean = false) {\n    this.setPlayingTrack(track.id);\n    console.log('🎵 Playing track:', track.title, 'crossfade:', crossfade);\n  }\n\n  // Fade effects\n  fadeIn(duration: number) {\n    console.log('🔊 Fading in over', duration, 'seconds');\n    this.emit('fadeIn', duration);\n  }\n\n  fadeOut(duration: number) {\n    console.log('🔊 Fading out over', duration, 'seconds');\n    this.emit('fadeOut', duration);\n  }\n\n  // Settings management\n  getSettings(): AudioSettings {\n    return { ...this.settings };\n  }\n\n  enableDucking(enabled: boolean) {\n    this.settings.duckingEnabled = enabled;\n    console.log('🔊 Ducking enabled:', enabled);\n  }\n\n  setDuckingThreshold(threshold: number) {\n    this.settings.duckingThreshold = threshold;\n    console.log('🔊 Ducking threshold set to:', threshold);\n  }\n\n  setDuckingAmount(amount: number) {\n    this.settings.duckingAmount = amount;\n    console.log('🔊 Ducking amount set to:', amount);\n  }\n\n  enableNormalization(enabled: boolean) {\n    this.settings.normalizationEnabled = enabled;\n    console.log('🔊 Normalization enabled:', enabled);\n  }\n\n  setLooping(enabled: boolean, count: number) {\n    this.settings.loopEnabled = enabled;\n    this.settings.loopCount = count;\n    console.log('🔊 Looping set to:', enabled, 'count:', count);\n  }\n\n  // Hotkey management\n  getHotkeys(): Map<string, HotkeyConfig> {\n    return new Map(this.hotkeys);\n  }\n\n  addHotkey(config: HotkeyConfig) {\n    this.hotkeys.set(config.key, config);\n    console.log('⌨️ Hotkey added:', config);\n  }\n\n  removeHotkey(key: string) {\n    this.hotkeys.delete(key);\n    console.log('⌨️ Hotkey removed:', key);\n  }\n\n  enableHotkeys(enabled: boolean) {\n    console.log('⌨️ Hotkeys enabled:', enabled);\n  }\n\n  // Status methods\n  getIsPlaying(): boolean {\n    return this.isPlaying;\n  }\n\n  getCurrentTrack(): StreamingTrack | null {\n    // This would need to be implemented to return the actual track object\n    return null;\n  }\n\n  // Event system\n  on(event: string, callback: Function) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event)!.push(callback);\n  }\n\n  off(event: string, callback: Function) {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  private emit(event: string, ...args: any[]) {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.forEach(callback => callback(...args));\n    }\n  }\n}\n\n// Create singleton instance\nexport const audioController = new AudioController();\nexport default audioController;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}